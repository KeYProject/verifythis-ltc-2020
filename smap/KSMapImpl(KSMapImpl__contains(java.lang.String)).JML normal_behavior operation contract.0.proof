\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Feb 27 02:53:39 CET 2020
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Labels]UseOriginLabels=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Thu Feb 27 02:53:39 CET 2020
name=KSMapImpl[KSMapImpl\\:\\:contains(java.lang.String)].JML normal_behavior operation contract.0
contract=KSMapImpl[KSMapImpl\\:\\:contains(java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "weigl" ) (keyVersion "b50fb00150"))

(autoModeTime "4207")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "key,self_25,result_21,exc_25,heapAtPre_0,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "4"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,0,0,0,0,0,1"))
(rule "Class_invariant_axiom_for_KSMapImpl" (formula "6") (inst "j=j") (inst "x=x") (inst "j_0=j_0") (inst "i=i") (inst "j_1=j_1") (inst "i_0=i_0") (inst "j_2=j_2") (inst "i_1=i_1") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "eqSymm" (formula "15") (term "1,0,1,1,0"))
(rule "eqSymm" (formula "13") (term "0,1,0,0"))
(rule "eqSymm" (formula "12") (term "0,1,0,0"))
(rule "eqSymm" (formula "9"))
(rule "eqSymm" (formula "18"))
(rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0,0"))
(rule "polySimp_addComm1" (formula "12") (term "0,1,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_gtToGeq" (formula "8"))
(rule "times_zero_1" (formula "8") (term "1,0,0"))
(rule "add_literals" (formula "8") (term "0,0"))
(rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "10"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "16") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "16") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,0"))
(rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,0"))
(rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0,0,0"))
(rule "mul_literals" (formula "13") (term "0,1,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "12") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "0,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8"))
(rule "mul_literals" (formula "8") (term "1"))
(rule "nonNull" (formula "6") (inst "i=i"))
(rule "sub_literals" (formula "6") (term "2,1,0,1,1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "greater_literals" (formula "6") (term "0,1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "narrowSelectArrayType" (formula "6") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "18"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
(rule "nonNull" (formula "7") (inst "i=i"))
(rule "greater_literals" (formula "7") (term "0,1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "sub_literals" (formula "7") (term "2,1,0,1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "narrowSelectArrayType" (formula "7") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "18"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "applyEq" (formula "7") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
(rule "commuteUnion" (formula "17") (term "1,1"))
(rule "nnf_imp2or" (formula "16") (term "0"))
(rule "nnf_imp2or" (formula "15") (term "0"))
(rule "nnf_imp2or" (formula "14") (term "0"))
(rule "nnf_imp2or" (formula "13") (term "0,0"))
(rule "nnf_imp2or" (formula "12") (term "0,0"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_notAnd" (formula "16") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0"))
(rule "add_literals" (formula "16") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "16") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "16") (term "0,0,0"))
(rule "mul_literals" (formula "16") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "16") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
(rule "mul_literals" (formula "16") (term "1,0,0,0"))
(rule "nnf_notAnd" (formula "15") (term "0,0"))
 (builtin "One Step Simplification" (formula "15"))
(rule "nnf_notAnd" (formula "14") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
(rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
(rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
(rule "mul_literals" (formula "14") (term "1,0,0,0"))
(rule "nnf_notAnd" (formula "6") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "13") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
(rule "nnf_notAnd" (formula "12") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "12") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
(rule "nnf_notOr" (formula "15") (term "0,0,0"))
(rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0,0"))
(rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0,0"))
(rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0"))
(rule "mul_literals" (formula "13") (term "1,1,0,0,0,0"))
(rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "12") (term "0,0,0,0,0"))
(rule "times_zero_1" (formula "12") (term "1,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "12") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
(rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "12") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "12") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0"))
(rule "nnf_notAnd" (formula "13") (term "0,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0,0"))
(rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0,0"))
(rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0,0"))
(rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0,0"))
(rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0,0"))
(rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0"))
(rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_contains,savedHeapBefore_contains"))
 (builtin "One Step Simplification" (formula "23"))
(rule "variableDeclarationAssign" (formula "23") (term "1"))
(rule "variableDeclaration" (formula "23") (term "1") (newnames "pos"))
(rule "commute_or_2" (formula "16") (term "0"))
(rule "commute_or_2" (formula "6") (term "0"))
(rule "commute_or_2" (formula "7") (term "0"))
(rule "cnf_rightDist" (formula "14") (term "0"))
(rule "distr_forallAnd" (formula "14"))
(rule "andLeft" (formula "14"))
(rule "associativeLawUnion" (formula "18") (term "1"))
(rule "commute_or" (formula "16") (term "0,0"))
(rule "commute_and_2" (formula "16") (term "0,1,1,0"))
(rule "commute_or_2" (formula "12") (term "0,0"))
(rule "commute_or_2" (formula "14") (term "0"))
(rule "commute_or_2" (formula "13") (term "0,0"))
(rule "commute_or" (formula "17") (term "0,0"))
(rule "commute_or" (formula "6") (term "0,0"))
(rule "commute_or" (formula "7") (term "0,0"))
(rule "shift_paren_or" (formula "15") (term "0"))
(rule "commute_or" (formula "14") (term "0,0"))
(rule "commute_or_2" (formula "12") (term "0,0,0"))
(rule "commute_or_2" (formula "12") (term "0,0"))
(rule "commute_or_2" (formula "13") (term "0,0,0"))
(rule "cnf_rightDist" (formula "16") (term "0,0"))
 (builtin "One Step Simplification" (formula "16"))
(rule "commute_or" (formula "16") (term "0,0"))
(rule "commute_or" (formula "12") (term "0,0,0,0"))
(rule "commute_or_2" (formula "13") (term "0,0,0,0"))
(rule "arrayLengthNotNegative" (formula "9") (term "1"))
(rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "8"))
(rule "leq_literals" (formula "9") (term "0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "true_left" (formula "9"))
(rule "arrayLengthIsAnInt" (formula "9") (term "0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "true_left" (formula "9"))
(rule "arrayLengthIsAnInt" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "true_left" (formula "9"))
(rule "arrayLengthNotNegative" (formula "9") (term "0"))
(rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
(rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "8"))
(rule "leq_literals" (formula "9") (term "0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "true_left" (formula "9"))
(rule "commute_or" (formula "13") (term "0,0,0,0,0"))
(rule "commute_and" (formula "16") (term "0,0,1,1,0"))
(rule "cnf_eqv" (formula "16") (term "1,0"))
(rule "nnf_notEx" (formula "16") (term "1,0,1,0"))
(rule "nnf_notAnd" (formula "16") (term "0,1,0,1,0"))
(rule "inEqSimp_notLeq" (formula "16") (term "1,0,1,0,1,0"))
(rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,1,0,1,0"))
(rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,1,0,1,0"))
(rule "add_literals" (formula "16") (term "0,0,0,1,0,1,0,1,0"))
(rule "add_zero_left" (formula "16") (term "0,0,1,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,1,0,1,0"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,1,0,1,0"))
(rule "polySimp_elimOne" (formula "16") (term "1,1,0,1,0,1,0"))
(rule "nnf_notAnd" (formula "16") (term "0,0,1,0,1,0"))
(rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,1,0,1,0"))
(rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "add_zero_right" (formula "16") (term "0,0,1,0,0,1,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,0,1,0"))
(rule "mul_literals" (formula "16") (term "1,1,0,0,1,0,1,0"))
 (builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_posOfId,result_22,exc_26") (contract "KSMapImpl[KSMapImpl::posOfId(java.lang.String)].JML normal_behavior operation contract.0"))
(branch "Post (posOfId)"
    (builtin "One Step Simplification" (formula "19"))
    (builtin "One Step Simplification" (formula "25"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "21"))
   (rule "andLeft" (formula "22"))
   (rule "inEqSimp_ltToLeq" (formula "21") (term "0"))
   (rule "times_zero_1" (formula "21") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "21") (term "0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,1"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,1"))
   (rule "polySimp_addComm1" (formula "22") (term "0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1"))
   (rule "assignment" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0"))
   (rule "mul_literals" (formula "21") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "22") (term "1,1"))
   (rule "polySimp_mulLiterals" (formula "22") (term "0,1,1"))
   (rule "polySimp_elimOne" (formula "22") (term "0,1,1"))
   (rule "nnf_imp2or" (formula "21") (term "0,1"))
   (rule "nnf_notAnd" (formula "21") (term "0,0,1"))
   (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1"))
   (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1"))
   (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1"))
   (rule "mul_literals" (formula "21") (term "1,0,0,0,1"))
   (rule "Class_invariant_axiom_for_KSMapImpl" (formula "23") (inst "j=j") (inst "x=x") (inst "j_0=j_0") (inst "i=i") (inst "j_1=j_1") (inst "i_0=i_0") (inst "j_2=j_2") (inst "i_1=i_1") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "notLeft" (formula "25"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "eqSymm" (formula "32") (term "1,0,1,1,0"))
   (rule "eqSymm" (formula "30") (term "0,1,0,0"))
   (rule "eqSymm" (formula "29") (term "0,1,0,0"))
   (rule "eqSymm" (formula "26"))
   (rule "eqSymm" (formula "34"))
   (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "28") (term "0,1,0,0,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "25"))
   (rule "times_zero_1" (formula "25") (term "1,0,0"))
   (rule "add_zero_right" (formula "25") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "29") (term "1,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "27"))
   (rule "inEqSimp_commuteLeq" (formula "26"))
   (rule "applyEq" (formula "31") (term "0") (ifseqformula "18"))
   (rule "eqSymm" (formula "31"))
   (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "30") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "25"))
   (rule "mul_literals" (formula "25") (term "1"))
   (rule "nonNull" (formula "24") (inst "i=i"))
   (rule "greater_literals" (formula "24") (term "0,1"))
    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "31")))
   (rule "sub_literals" (formula "24") (term "2,1,0"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "31"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
   (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0") (ifseqformula "9"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0"))
   (rule "nonNull" (formula "23") (inst "i=i"))
   (rule "sub_literals" (formula "23") (term "2,1,0,1,1"))
    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "32")))
   (rule "greater_literals" (formula "23") (term "0"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "narrowSelectArrayType" (formula "23") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "32"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
   (rule "commuteUnion" (formula "30") (term "1,0"))
   (rule "eqSymm" (formula "30"))
   (rule "applyEq" (formula "18") (term "1") (ifseqformula "30"))
   (rule "nnf_imp2or" (formula "29") (term "0"))
   (rule "nnf_imp2or" (formula "28") (term "0"))
   (rule "nnf_imp2or" (formula "27") (term "0"))
   (rule "nnf_imp2or" (formula "26") (term "0,0"))
   (rule "nnf_imp2or" (formula "25") (term "0,0"))
   (rule "nnf_imp2or" (formula "24") (term "0"))
   (rule "nnf_imp2or" (formula "23") (term "0"))
   (rule "nnf_notAnd" (formula "29") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "29") (term "0,0,0"))
   (rule "times_zero_1" (formula "29") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "29") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
   (rule "mul_literals" (formula "29") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "29") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "29") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "29") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "29") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "28") (term "0,0"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "nnf_notAnd" (formula "27") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0"))
   (rule "times_zero_1" (formula "27") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "27") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
   (rule "mul_literals" (formula "27") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "27") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "27") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "23") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0"))
   (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0"))
   (rule "mul_literals" (formula "23") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "23") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "26") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
   (rule "nnf_notAnd" (formula "25") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "25") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
   (rule "nnf_notOr" (formula "28") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "26") (term "0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0,0,0"))
   (rule "times_zero_1" (formula "26") (term "1,0,0,1,0,0,0,0"))
   (rule "add_zero_right" (formula "26") (term "0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,0"))
   (rule "mul_literals" (formula "26") (term "1,1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "25") (term "0,0,0,1,0,0,0,0"))
   (rule "add_zero_left" (formula "25") (term "0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "25") (term "0,0,0,0,0"))
   (rule "times_zero_1" (formula "25") (term "1,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "25") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0"))
   (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0"))
   (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0"))
   (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "21") (term "0,1"))
   (rule "returnUnfold" (formula "36") (term "1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "36") (term "1"))
   (rule "variableDeclaration" (formula "36") (term "1") (newnames "x"))
   (rule "ex_pull_out3" (formula "16") (term "1,1,0"))
   (rule "commute_or_2" (formula "29") (term "0"))
   (rule "all_pull_out3" (formula "16") (term "0,1,0"))
   (rule "commute_or_2" (formula "24") (term "0"))
   (rule "commute_or_2" (formula "23") (term "0"))
   (rule "cnf_rightDist" (formula "27") (term "0"))
   (rule "distr_forallAnd" (formula "27"))
   (rule "andLeft" (formula "27"))
   (rule "associativeLawUnion" (formula "31") (term "1"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "true_left" (formula "31"))
   (rule "associativeLawUnion" (formula "18") (term "1"))
   (rule "commute_or" (formula "29") (term "0,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "32"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "commute_and_2" (formula "30") (term "0,1,1,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,1") (ifseqformula "1"))
   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "34"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "commute_or_2" (formula "27") (term "0,0"))
   (rule "commute_or_2" (formula "29") (term "0"))
   (rule "commute_or_2" (formula "28") (term "0,0"))
   (rule "commute_or" (formula "32") (term "0,0"))
   (rule "commute_or" (formula "26") (term "0,0"))
   (rule "commute_or" (formula "25") (term "0,0"))
   (rule "shift_paren_or" (formula "28") (term "0"))
   (rule "commute_or" (formula "23") (term "0,0,1"))
   (rule "commute_or" (formula "27") (term "0,0"))
   (rule "commute_or_2" (formula "25") (term "0,0,0"))
   (rule "commute_or_2" (formula "25") (term "0,0"))
   (rule "commute_or_2" (formula "26") (term "0,0,0"))
   (rule "shift_paren_or" (formula "18") (term "0,0,1,0"))
   (rule "cnf_rightDist" (formula "27") (term "0,0"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "commute_or" (formula "27") (term "0,0"))
   (rule "commute_or" (formula "25") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "25") (term "0,0,0,0"))
   (rule "cnf_rightDist" (formula "18") (term "0,1,1,0"))
   (rule "commute_or" (formula "25") (term "0,0,0,0,0"))
   (rule "commute_or" (formula "18") (term "1,0,1,1,0"))
   (rule "greater_equal_than_comparison_simple" (formula "31") (term "1"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "shift_paren_or" (formula "18") (term "0,0,0,1,0"))
   (rule "commute_or" (formula "18") (term "0,0,0,0,1,0"))
   (rule "commute_and" (formula "25") (term "0,0,1,1,0"))
   (rule "cnf_eqv" (formula "25") (term "1,0"))
   (rule "nnf_notEx" (formula "25") (term "1,0,1,0"))
   (rule "nnf_notAnd" (formula "25") (term "0,1,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "25") (term "1,0,1,0,1,0"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,1,0,1,0,1,0"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,1,0,1,0,1,0"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,1,0,1,0,1,0"))
   (rule "add_literals" (formula "25") (term "0,0,0,1,0,1,0,1,0"))
   (rule "add_zero_left" (formula "25") (term "0,0,1,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "1,0,1,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,1,0,1,0"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,0,1,0,1,0"))
   (rule "nnf_notAnd" (formula "25") (term "0,0,1,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0,1,0,1,0"))
   (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0,1,0,1,0"))
   (rule "add_zero_right" (formula "25") (term "0,0,1,0,0,1,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,0,1,0"))
   (rule "mul_literals" (formula "25") (term "1,1,0,0,1,0,1,0"))
   (rule "cnf_rightDist" (formula "18") (term "0,0,1,1,0"))
   (rule "commute_or" (formula "18") (term "0,0,0,1,1,0"))
   (rule "commute_or" (formula "18") (term "1,0,0,1,1,0"))
   (rule "methodCallReturn" (formula "31") (term "1"))
   (rule "assignment" (formula "31") (term "1"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "methodCallEmpty" (formula "31") (term "1"))
   (rule "tryEmpty" (formula "31") (term "1"))
   (rule "emptyModality" (formula "31") (term "1"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "Class_invariant_axiom_for_KSMapImpl" (formula "31") (term "1") (inst "j=j") (inst "x=x_1") (inst "j_0=j_0") (inst "i=i") (inst "j_1=j_1") (inst "i_0=i_0") (inst "j_2=j_2") (inst "i_1=i_1") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "eqSymm" (formula "31") (term "0,1,0,0,1,0,0,0,0,0,1"))
   (rule "eqSymm" (formula "31") (term "0,1,0,0,0,0,0,0,0,1"))
   (rule "eqSymm" (formula "31") (term "1,0,1,1,0,1,0,0,1"))
   (rule "eqSymm" (formula "31") (term "1,0,0,0,0,0,0,0,0,1"))
   (rule "eqSymm" (formula "31") (term "0,1,0,0,1,0,0,0,0,1"))
   (rule "replace_known_right" (formula "31") (term "0,1,0,0,0,0,0,0,0,1") (ifseqformula "28"))
    (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "11")))
   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,1,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,1,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,0,1"))
   (rule "inEqSimp_gtToGeq" (formula "31") (term "1,0,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "1,0,0,1,0,0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "31") (term "0,0,1,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "31") (term "0,1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,1,0,0,0,0,0,0,1"))
   (rule "replace_known_left" (formula "31") (term "0,1,0,0,0,0,0,0,1") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,1,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0,0,0,0,0,1"))
   (rule "replace_known_left" (formula "31") (term "1,0,0,0,0,0,0,1") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "applyEq" (formula "31") (term "0,1,1") (ifseqformula "20"))
   (rule "eqSymm" (formula "31") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "1,1,0,0,0,0,0,0,1"))
   (rule "replace_known_left" (formula "31") (term "1,0,0,0,0,0,0,1") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,1,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,1,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,1,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,1,0,1,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,1,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,1,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "31") (term "1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "0,1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "0,1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "nonNull" (formula "31") (term "1,0,0,0,0,0,0,1") (inst "i=i"))
   (rule "sub_literals" (formula "31") (term "2,1,0,1,1,1,0,0,0,0,0,0,1"))
    (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "26")))
   (rule "greater_literals" (formula "31") (term "0,1,0,0,0,0,0,0,1"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "narrowSelectArrayType" (formula "31") (term "0,0,1,0,1,0,0,0,0,0,0,1") (ifseqformula "1") (ifseqformula "26"))
   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,1,0,0,0,0,0,0,1"))
   (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0,1,0,0,0,0,0,0,1") (ifseqformula "11"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "nonNull" (formula "31") (term "0,0,0,0,0,0,0,1") (inst "i=i"))
   (rule "greater_literals" (formula "31") (term "0,1,0,0,0,0,0,0,0,1"))
    (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "27")))
   (rule "sub_literals" (formula "31") (term "2,1,0,0,0,0,0,0,0,0,1"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "narrowSelectArrayType" (formula "31") (term "0,0,1,0,0,0,0,0,0,0,0,1") (ifseqformula "1") (ifseqformula "27"))
   (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,0,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "commuteUnion" (formula "31") (term "1,0,1,1"))
   (rule "eqSymm" (formula "31") (term "1,1"))
   (rule "nnf_imp2or" (formula "31") (term "0,1,0,1"))
   (rule "nnf_imp2or" (formula "31") (term "0,1,0,0,1"))
   (rule "nnf_imp2or" (formula "31") (term "0,1,0,0,0,1"))
   (rule "nnf_notAnd" (formula "31") (term "0,0,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,1,0,1"))
   (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,1,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,0,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,1,0,1"))
   (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,1"))
   (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,1,0,1"))
   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,1,0,1"))
   (rule "nnf_notAnd" (formula "31") (term "0,0,1,0,0,1"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "nnf_notOr" (formula "31") (term "0,0,0,1,0,0,1"))
   (rule "nnf_notAnd" (formula "31") (term "0,0,1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,1,0,0,0,1"))
   (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,0,0,1"))
   (rule "nnf_imp2or" (formula "31") (term "0,0,1,0,0,0,0,1"))
   (rule "nnf_imp2or" (formula "31") (term "0,0,1,0,0,0,0,0,1"))
   (rule "nnf_imp2or" (formula "31") (term "0,1,0,0,0,0,0,0,1"))
   (rule "nnf_imp2or" (formula "31") (term "0,0,0,0,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "31") (term "0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,1,0,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,1,0,0,0,0,1"))
   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,1,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "31") (term "0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,1,0,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "31") (term "0,0,1,0,0,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,1,0,0,0,0,0,0,1"))
   (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,1,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,0,0,1,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,1,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,0,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "31") (term "0,0,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,0,0,0,0,0,0,1"))
   (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,0,0,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0,0,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0,0,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "31") (term "0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "31") (term "1,0,0,0,0,1,0,0,0,0,1"))
   (rule "times_zero_1" (formula "31") (term "1,0,0,1,0,0,0,0,1,0,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,1,0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "1,1,0,0,0,0,1,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "31") (term "0,0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "31") (term "1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0,1,0,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "31") (term "0,0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0,0,1,0,0,0,0,1"))
   (rule "ex_pull_out3" (formula "25") (term "1,1,0"))
   (rule "ex_pull_out1" (formula "18") (term "1,0"))
   (rule "all_pull_out3" (formula "25") (term "0,1,0"))
   (rule "associativeLawUnion" (formula "31") (term "1,1,1"))
    (builtin "One Step Simplification" (formula "31"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1,0,0,1") (ifseqformula "1"))
   (rule "cut_direct" (formula "25") (term "0"))
   (branch "CUT: result_22 >= 0 TRUE"
       (builtin "One Step Simplification" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "replace_known_left" (formula "34") (term "0,1,0") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "inEqSimp_subsumption1" (formula "22") (ifseqformula "25"))
      (rule "leq_literals" (formula "22") (term "0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "inEqSimp_contradInEq1" (formula "22") (term "0") (ifseqformula "24"))
      (rule "qeq_literals" (formula "22") (term "0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "shift_paren_or" (formula "26") (term "0,0,1,0"))
      (rule "cnf_rightDist" (formula "26") (term "0,1,1,0"))
      (rule "commute_or" (formula "26") (term "1,0,1,1,0"))
      (rule "andRight" (formula "32"))
      (branch "Case 1"
         (rule "nnf_ex2all" (formula "32"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "1") (term "0"))
         (rule "commute_or" (formula "1") (term "0,0"))
         (rule "shift_paren_or" (formula "27") (term "0,0,0,1,0"))
         (rule "commute_or" (formula "27") (term "0,0,0,0,1,0"))
         (rule "cnf_rightDist" (formula "27") (term "0,0,1,1,0"))
         (rule "commute_or" (formula "27") (term "1,0,0,1,1,0"))
         (rule "commute_or" (formula "27") (term "0,0,0,1,1,0"))
         (rule "all_pull_out0" (formula "19") (term "0,1,0"))
         (rule "shift_paren_and" (formula "19") (term "0,0,1,0"))
         (rule "shift_paren_and" (formula "19") (term "0,0,0,1,0"))
         (rule "ex_pull_out1" (formula "27") (term "1,0"))
         (rule "ex_pull_out3" (formula "19") (term "0"))
         (rule "all_pull_out0" (formula "27") (term "0,1,0"))
         (rule "shift_paren_and" (formula "27") (term "0,0,1,0"))
         (rule "shift_paren_and" (formula "27") (term "0,0,0,1,0"))
         (rule "ex_pull_out3" (formula "27") (term "0"))
         (rule "all_pull_out3" (formula "19") (term "0,0"))
         (rule "cnf_rightDist" (formula "19") (term "0,0,0"))
         (rule "commute_or_2" (formula "19") (term "1,0,0,0"))
         (rule "commute_or" (formula "19") (term "0,1,0,0,0"))
         (rule "cnf_rightDist" (formula "19") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "19") (term "1,0,0,0,0"))
         (rule "commute_or" (formula "19") (term "0,1,0,0,0,0"))
         (rule "cnf_rightDist" (formula "19") (term "0,0,0,0,0"))
         (rule "commute_or_2" (formula "19") (term "1,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "19") (term "0,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "19") (term "0,1,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "19") (term "0,0,0,0,0,0,0"))
         (rule "commute_or" (formula "19") (term "0,0,1,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "19") (term "0,0,0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "19") (term "0,0,0,0,0,0,0,0,0"))
         (rule "applyEq_or_gen0" (formula "19") (term "0,0,0,0,0,0,0,0,0,0"))
         (rule "allLeft" (formula "1") (inst "t=result_22"))
         (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "27"))
         (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
         (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "leq_literals" (formula "1") (term "0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_contradInEq0" (formula "25") (ifseqformula "1"))
         (rule "qeq_literals" (formula "25") (term "0"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "closeFalse" (formula "25"))
      )
      (branch "Case 2"
         (rule "shift_paren_or" (formula "26") (term "0,0,0,1,0"))
         (rule "andRight" (formula "32"))
         (branch "Case 1"
            (rule "andRight" (formula "32"))
            (branch "Case 1"
               (rule "andRight" (formula "32"))
               (branch "Case 1"
                  (rule "andRight" (formula "32"))
                  (branch "Case 1"
                     (rule "andRight" (formula "32"))
                     (branch "Case 1"
                        (rule "andRight" (formula "32"))
                        (branch "Case 1"
                           (rule "allRight" (formula "32") (inst "sk=i_0"))
                           (rule "orRight" (formula "32"))
                           (rule "orRight" (formula "32"))
                           (rule "notRight" (formula "34"))
                           (rule "inEqSimp_leqRight" (formula "33"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "34"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "commute_or" (formula "29") (term "0,0,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "29") (term "0,0,1,1,0"))
                           (rule "commute_or" (formula "29") (term "0,0,0,1,1,0"))
                           (rule "commute_or" (formula "29") (term "1,0,0,1,1,0"))
                           (rule "all_pull_out0" (formula "21") (term "0,1,0"))
                           (rule "shift_paren_and" (formula "21") (term "0,0,1,0"))
                           (rule "shift_paren_and" (formula "21") (term "0,0,0,1,0"))
                           (rule "allLeft" (formula "9") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "9") (term "0,0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "9"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "32") (inst "sk=i_0"))
                           (rule "orRight" (formula "32"))
                           (rule "orRight" (formula "32"))
                           (rule "notRight" (formula "34"))
                           (rule "inEqSimp_leqRight" (formula "33"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "34"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "commute_or" (formula "29") (term "0,0,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "29") (term "0,0,1,1,0"))
                           (rule "commute_or" (formula "29") (term "0,0,0,1,1,0"))
                           (rule "commute_or" (formula "29") (term "1,0,0,1,1,0"))
                           (rule "all_pull_out0" (formula "21") (term "0,1,0"))
                           (rule "shift_paren_and" (formula "21") (term "0,0,1,0"))
                           (rule "shift_paren_and" (formula "21") (term "0,0,0,1,0"))
                           (rule "allLeft" (formula "10") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "10") (term "0,0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "10"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "32") (inst "sk=j_2_0"))
                        (rule "allRight" (formula "32") (inst "sk=i_1_0"))
                        (rule "orRight" (formula "32"))
                        (rule "notRight" (formula "33"))
                        (rule "orRight" (formula "33"))
                        (rule "orRight" (formula "33"))
                        (rule "inEqSimp_geqRight" (formula "35"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "34"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "35"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "commute_or" (formula "30") (term "0,0,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "30") (term "0,0,1,1,0"))
                        (rule "commute_or" (formula "30") (term "1,0,0,1,1,0"))
                        (rule "commute_or" (formula "30") (term "0,0,0,1,1,0"))
                        (rule "all_pull_out0" (formula "22") (term "0,1,0"))
                        (rule "shift_paren_and" (formula "22") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "22") (term "0,0,0,1,0"))
                        (rule "allLeft" (formula "18") (inst "t=j_2_0"))
                        (rule "eqSymm" (formula "18") (term "0,0,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0"))
                        (rule "applyEq" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "4"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                        (rule "leq_literals" (formula "18") (term "0,1,0,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "ex_pull_out1" (formula "31") (term "1,0"))
                        (rule "ex_pull_out3" (formula "23") (term "0"))
                        (rule "all_pull_out0" (formula "31") (term "0,1,0"))
                        (rule "shift_paren_and" (formula "31") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "31") (term "0,0,0,1,0"))
                        (rule "ex_pull_out3" (formula "31") (term "0"))
                        (rule "all_pull_out3" (formula "23") (term "0,0"))
                        (rule "cnf_rightDist" (formula "23") (term "0,0,0"))
                        (rule "commute_or_2" (formula "23") (term "1,0,0,0"))
                        (rule "commute_or" (formula "23") (term "0,1,0,0,0"))
                        (rule "cnf_rightDist" (formula "23") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "23") (term "1,0,0,0,0"))
                        (rule "commute_or" (formula "23") (term "0,1,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "23") (term "0,0,0,0,0"))
                        (rule "commute_or_2" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "23") (term "0,1,0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0,0,0"))
                        (rule "commute_or" (formula "23") (term "0,0,1,0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "23") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "applyEq_or_gen0" (formula "23") (term "0,0,0,0,0,0,0,0,0,0"))
                        (rule "allLeft" (formula "20") (inst "t=result_22"))
                        (rule "eqSymm" (formula "20") (term "0,0,0,0,0,0"))
                        (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0,0") (ifseqformula "29"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "31"))
                        (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
                        (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
                        (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
                        (rule "add_literals" (formula "20") (term "0,0,1,0"))
                        (rule "leq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "allLeft" (formula "18") (inst "t=i_1_0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "18") (term "0,0,1"))
                        (rule "leq_literals" (formula "18") (term "0,1"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "18"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "32") (inst "sk=j_1_0"))
                     (rule "allRight" (formula "32") (inst "sk=i_0_0"))
                     (rule "orRight" (formula "32"))
                     (rule "notRight" (formula "33"))
                     (rule "orRight" (formula "33"))
                     (rule "orRight" (formula "33"))
                     (rule "orRight" (formula "33"))
                     (rule "inEqSimp_geqRight" (formula "36"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "36"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "35"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "36"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "commute_or" (formula "31") (term "0,0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "31") (term "0,0,1,1,0"))
                     (rule "commute_or" (formula "31") (term "1,0,0,1,1,0"))
                     (rule "commute_or" (formula "31") (term "0,0,0,1,1,0"))
                     (rule "all_pull_out0" (formula "23") (term "0,1,0"))
                     (rule "shift_paren_and" (formula "23") (term "0,0,1,0"))
                     (rule "shift_paren_and" (formula "23") (term "0,0,0,1,0"))
                     (rule "allLeft" (formula "20") (inst "t=j_1_0"))
                     (rule "eqSymm" (formula "20") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                     (rule "applyEq" (formula "20") (term "1,0,0,0,0,0,0") (ifseqformula "5"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0,0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "20") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "20") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "ex_pull_out1" (formula "32") (term "1,0"))
                     (rule "ex_pull_out3" (formula "24") (term "0"))
                     (rule "all_pull_out0" (formula "32") (term "0,1,0"))
                     (rule "shift_paren_and" (formula "32") (term "0,0,1,0"))
                     (rule "shift_paren_and" (formula "32") (term "0,0,0,1,0"))
                     (rule "ex_pull_out3" (formula "32") (term "0"))
                     (rule "all_pull_out3" (formula "24") (term "0,0"))
                     (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                     (rule "commute_or_2" (formula "24") (term "1,0,0,0"))
                     (rule "commute_or" (formula "24") (term "0,1,0,0,0"))
                     (rule "cnf_rightDist" (formula "24") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "24") (term "1,0,0,0,0"))
                     (rule "commute_or" (formula "24") (term "0,1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "24") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "24") (term "0,1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "24") (term "0,0,1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "applyEq_or_gen0" (formula "24") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "allLeft" (formula "21") (inst "t=i_0_0"))
                     (rule "eqSymm" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "21") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "21") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "21") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "allLeft" (formula "22") (inst "t=result_22"))
                     (rule "eqSymm" (formula "22") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0,0") (ifseqformula "31"))
                     (rule "qeq_literals" (formula "22") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "33"))
                     (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1,0"))
                     (rule "add_literals" (formula "22") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "22") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "22") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "22") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "allLeft" (formula "20") (inst "t=i_0_0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "20") (term "0,0,1"))
                     (rule "leq_literals" (formula "20") (term "0,1"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "20"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "32") (inst "sk=i_0"))
                  (rule "orRight" (formula "32"))
                  (rule "orRight" (formula "32"))
                  (rule "inEqSimp_geqRight" (formula "33"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "33"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "commute_or" (formula "28") (term "0,0,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "28") (term "0,0,1,1,0"))
                  (rule "commute_or" (formula "28") (term "1,0,0,1,1,0"))
                  (rule "commute_or" (formula "28") (term "0,0,0,1,1,0"))
                  (rule "all_pull_out0" (formula "20") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "20") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "20") (term "0,0,0,1,0"))
                  (rule "ex_pull_out1" (formula "28") (term "1,0"))
                  (rule "ex_pull_out3" (formula "20") (term "0"))
                  (rule "all_pull_out0" (formula "28") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "28") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "28") (term "0,0,0,1,0"))
                  (rule "ex_pull_out3" (formula "28") (term "0"))
                  (rule "all_pull_out3" (formula "20") (term "0,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "1,0,0,0"))
                  (rule "commute_or" (formula "20") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "20") (term "0,1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "20") (term "0,0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "applyEq_or_gen0" (formula "20") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "allLeft" (formula "21") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "21") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                  (rule "add_literals" (formula "21") (term "0,0,1"))
                  (rule "leq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "allLeft" (formula "17") (inst "t=result_22"))
                  (rule "eqSymm" (formula "17") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "29"))
                  (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0"))
                  (rule "add_literals" (formula "17") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0,0,1,0"))
                  (rule "add_literals" (formula "17") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "17") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0") (ifseqformula "27"))
                  (rule "qeq_literals" (formula "17") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "allLeft" (formula "23") (inst "t=result_22"))
                  (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "28"))
                  (rule "qeq_literals" (formula "23") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "30"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                  (rule "add_literals" (formula "23") (term "0,0,1"))
                  (rule "leq_literals" (formula "23") (term "0,1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "allLeft" (formula "18") (inst "t=i_0"))
                  (rule "eqSymm" (formula "18") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "18") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "18") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "allLeft" (formula "20") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                  (rule "add_literals" (formula "20") (term "0,0,1"))
                  (rule "leq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "replace_known_right" (formula "38") (term "0,0") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "notRight" (formula "38"))
                  (rule "applyEq" (formula "19") (term "1,0,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "23") (term "1") (ifseqformula "1"))
                  (rule "allLeft" (formula "20") (inst "t=result_22"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "30"))
                  (rule "qeq_literals" (formula "20") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "32"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                  (rule "add_literals" (formula "20") (term "0,0,1"))
                  (rule "leq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "allLeft" (formula "21") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                  (rule "add_literals" (formula "21") (term "0,0,1"))
                  (rule "leq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "21") (term "0"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "closeFalse" (formula "21"))
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "32") (inst "sk=x_1_0"))
               (rule "orRight" (formula "32"))
               (rule "orRight" (formula "32"))
               (rule "eqSymm" (formula "34") (term "1,0,1"))
               (rule "replace_known_right" (formula "32") (term "0,0") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "notRight" (formula "32"))
               (rule "equiv_right" (formula "34"))
               (branch "Case 1"
                  (rule "nnf_ex2all" (formula "35"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0"))
                  (rule "commute_or" (formula "1") (term "0,0"))
                  (rule "commute_or" (formula "29") (term "0,0,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "29") (term "0,0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "1,0,0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "0,0,0,1,1,0"))
                  (rule "all_pull_out0" (formula "21") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "21") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "21") (term "0,0,0,1,0"))
                  (rule "ex_pull_out1" (formula "29") (term "1,0"))
                  (rule "ex_pull_out3" (formula "21") (term "0"))
                  (rule "all_pull_out0" (formula "29") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "29") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "29") (term "0,0,0,1,0"))
                  (rule "ex_pull_out3" (formula "29") (term "0"))
                  (rule "all_pull_out3" (formula "21") (term "0,0"))
                  (rule "cnf_rightDist" (formula "21") (term "0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "1,0,0,0"))
                  (rule "commute_or" (formula "21") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "21") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "21") (term "0,1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "21") (term "0,0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "applyEq_or_gen0" (formula "21") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "allLeft" (formula "22") (inst "t=result_22"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "29"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                  (rule "add_literals" (formula "22") (term "0,0,1"))
                  (rule "leq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "27"))
                  (rule "qeq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "allLeft" (formula "20") (inst "t=result_22"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "30"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                  (rule "add_literals" (formula "20") (term "0,0,1"))
                  (rule "leq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "28"))
                  (rule "qeq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "allLeft" (formula "18") (inst "t=result_22"))
                  (rule "eqSymm" (formula "18") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0") (ifseqformula "28"))
                  (rule "qeq_literals" (formula "18") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "30"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "18") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "allLeft" (formula "20") (inst "t=result_22"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "31"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1"))
                  (rule "leq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "29"))
                  (rule "qeq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "allLeft" (formula "1") (inst "t=result_22"))
                  (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "31"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "leq_literals" (formula "1") (term "0,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "29"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "commute_and" (formula "22") (term "0,0,0,0,0"))
                  (rule "allLeft" (formula "18") (inst "t=result_22"))
                  (rule "eqSymm" (formula "18") (term "0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "29"))
                  (rule "qeq_literals" (formula "18") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "31"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "18") (term "0,0,1"))
                  (rule "leq_literals" (formula "18") (term "0,1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "notLeft" (formula "18"))
                  (rule "allLeft" (formula "18") (inst "t=result_22<<origin(\"ensures @ file KSMapImpl.java @ line 122\",\"[]\")>>"))
                  (rule "eqSymm" (formula "18") (term "0,0,0"))
                  (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "allLeft" (formula "22") (inst "t=x_1_0"))
                  (rule "exLeft" (formula "22") (inst "sk=j_0_0"))
                  (rule "eqSymm" (formula "22") (term "0,1,0,0,0,0,1,0,0,0"))
                  (rule "eqSymm" (formula "22") (term "1,0,0,0,0,0,0"))
                  (rule "replace_known_right" (formula "22") (term "0,0,0,1,0") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "41")) (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "41")) (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "2")))
                  (rule "andLeft" (formula "22"))
                  (rule "andLeft" (formula "22"))
                  (rule "inEqSimp_homoInEq0" (formula "24"))
                  (rule "polySimp_addComm1" (formula "24") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "24"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1"))
                  (rule "polySimp_rightDist" (formula "24") (term "1"))
                  (rule "mul_literals" (formula "24") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                  (rule "allLeft" (formula "1") (inst "t=j_0_0"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "25"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "leq_literals" (formula "1") (term "0,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "24"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                  (rule "exLeft" (formula "1") (inst "sk=j_0_0"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "commute_or" (formula "30") (term "0,0,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "30") (term "0,0,1,1,0"))
                  (rule "commute_or" (formula "30") (term "1,0,0,1,1,0"))
                  (rule "commute_or" (formula "30") (term "0,0,0,1,1,0"))
                  (rule "all_pull_out0" (formula "22") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "22") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "22") (term "0,0,0,1,0"))
                  (rule "ex_pull_out1" (formula "30") (term "1,0"))
                  (rule "ex_pull_out3" (formula "22") (term "0"))
                  (rule "all_pull_out0" (formula "30") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "30") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "30") (term "0,0,0,1,0"))
                  (rule "ex_pull_out3" (formula "30") (term "0"))
                  (rule "all_pull_out3" (formula "22") (term "0,0"))
                  (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                  (rule "commute_or_2" (formula "22") (term "1,0,0,0"))
                  (rule "commute_or" (formula "22") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "22") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "22") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "22") (term "0,1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "22") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "22") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "22") (term "0,0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "22") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "applyEq_or_gen0" (formula "22") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "allLeft" (formula "23") (inst "t=result_22"))
                  (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "30"))
                  (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                  (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "23") (term "0,0,1"))
                  (rule "leq_literals" (formula "23") (term "0,1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "28"))
                  (rule "qeq_literals" (formula "23") (term "0,1"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "allLeft" (formula "19") (inst "t=result_22"))
                  (rule "eqSymm" (formula "19") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0,0") (ifseqformula "29"))
                  (rule "qeq_literals" (formula "19") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "31"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "19") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "allLeft" (formula "21") (inst "t=result_22"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "32"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "21") (term "0,0,1"))
                  (rule "leq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "30"))
                  (rule "qeq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "notLeft" (formula "21"))
                  (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "allLeft" (formula "22") (inst "t=result_22"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "32"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "22") (term "0,0,1"))
                  (rule "leq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "30"))
                  (rule "qeq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "notLeft" (formula "22"))
                  (rule "allLeft" (formula "22") (inst "t=j_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "22") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "22") (term "0,0,1"))
                  (rule "leq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "notLeft" (formula "22"))
                  (rule "allLeft" (formula "21") (inst "t=j_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                  (rule "applyEq" (formula "21") (term "0,0,0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "21") (term "0,0,0") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "allLeft" (formula "20") (inst "t=j_0_0"))
                  (rule "eqSymm" (formula "20") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "20") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "20") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "allLeft" (formula "26") (inst "t=j_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                  (rule "applyEq" (formula "26") (term "1,0,0,0") (ifseqformula "3"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                  (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "26") (term "0,0,1"))
                  (rule "leq_literals" (formula "26") (term "0,1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "26") (term "0,1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "commute_and" (formula "24") (term "0,0,0,0,0"))
                  (rule "notInDomain" (formula "43"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "27"))
                  (rule "eqSymm" (formula "1"))
                  (rule "allLeft" (formula "20") (inst "t=j_0_0"))
                  (rule "eqSymm" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                  (rule "applyEq" (formula "20") (term "1,0,0,0") (ifseqformula "4"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1"))
                  (rule "leq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "allLeft" (formula "20") (inst "t=result_22"))
                  (rule "eqSymm" (formula "20") (term "0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "35"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1"))
                  (rule "leq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "33"))
                  (rule "qeq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "allLeft" (formula "21") (inst "t=result_22"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "35"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "21") (term "0,0,1"))
                  (rule "leq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "33"))
                  (rule "qeq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "notLeft" (formula "21"))
                  (rule "allLeft" (formula "21") (inst "t=j_0_0"))
                  (rule "eqSymm" (formula "21") (term "0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                  (rule "applyEq" (formula "21") (term "1,0,0,0") (ifseqformula "4"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "21") (term "0,0,1"))
                  (rule "leq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "notLeft" (formula "21"))
                  (rule "allLeft" (formula "25") (inst "t=x_1_0"))
                  (rule "exLeft" (formula "25") (inst "sk=j_0_1"))
                  (rule "eqSymm" (formula "25") (term "1,0,0,0,0,0,0"))
                  (rule "eqSymm" (formula "25") (term "0,1,0,0,0,0,1,0,0,0"))
                  (rule "replace_known_right" (formula "25") (term "0,0,0,1,0,0") (ifseqformula "48"))
                   (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "48")) (ifInst ""  (formula "5")) (ifInst ""  (formula "49")) (ifInst ""  (formula "5")) (ifInst ""  (formula "49")) (ifInst ""  (formula "5")) (ifInst ""  (formula "49")) (ifInst ""  (formula "48")) (ifInst ""  (formula "5")) (ifInst ""  (formula "49")))
                  (rule "applyEq_or_gen0" (formula "25") (term "0,0,0"))
                  (rule "replace_known_right" (formula "25") (term "0,0,0,0") (ifseqformula "48"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "commute_and_2" (formula "26") (term "0,0,0,0"))
                  (rule "allLeft" (formula "25") (inst "t=j_0_0"))
                  (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "25") (term "0,0,1"))
                  (rule "leq_literals" (formula "25") (term "0,1"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "25") (term "0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "closeFalse" (formula "25"))
               )
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "32") (inst "sk=j_0"))
            (rule "orRight" (formula "32"))
            (rule "orRight" (formula "32"))
            (rule "inEqSimp_geqRight" (formula "33"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "33"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "commute_or" (formula "28") (term "0,0,0,0,1,0"))
            (rule "cnf_rightDist" (formula "28") (term "0,0,1,1,0"))
            (rule "commute_or" (formula "28") (term "0,0,0,1,1,0"))
            (rule "commute_or" (formula "28") (term "1,0,0,1,1,0"))
            (rule "all_pull_out0" (formula "20") (term "0,1,0"))
            (rule "shift_paren_and" (formula "20") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "20") (term "0,0,0,1,0"))
            (rule "ex_pull_out1" (formula "28") (term "1,0"))
            (rule "allLeft" (formula "21") (inst "t=j_0"))
            (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
            (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
            (rule "add_literals" (formula "21") (term "0,0,1"))
            (rule "leq_literals" (formula "21") (term "0,1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "21"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "CUT: result_22 >= 0 FALSE"
       (builtin "One Step Simplification" (formula "25"))
      (rule "true_left" (formula "25"))
      (rule "replace_known_right" (formula "32") (term "0,1,0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "32"))
      (rule "inEqSimp_geqRight" (formula "26"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "1"))
      (rule "applyEq" (formula "26") (term "0,2,1,0,1") (ifseqformula "23"))
      (rule "applyEq" (formula "26") (term "0,2,0,0") (ifseqformula "23"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "23"))
      (rule "leq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
      (rule "qeq_literals" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "shift_paren_or" (formula "25") (term "0,0,1,0"))
      (rule "cnf_rightDist" (formula "25") (term "0,1,1,0"))
      (rule "commute_or" (formula "25") (term "1,0,1,1,0"))
      (rule "andRight" (formula "31"))
      (branch "Case 1"
         (rule "notRight" (formula "31"))
         (rule "exLeft" (formula "1") (inst "sk=i_0"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "shift_paren_or" (formula "28") (term "0,0,0,1,0"))
         (rule "commute_or" (formula "28") (term "0,0,0,0,1,0"))
         (rule "cnf_rightDist" (formula "28") (term "0,0,1,1,0"))
         (rule "commute_or" (formula "28") (term "0,0,0,1,1,0"))
         (rule "commute_or" (formula "28") (term "1,0,0,1,1,0"))
         (rule "all_pull_out0" (formula "21") (term "0,1,0"))
         (rule "shift_paren_and" (formula "21") (term "0,0,1,0"))
         (rule "shift_paren_and" (formula "21") (term "0,0,0,1,0"))
         (rule "ex_pull_out1" (formula "28") (term "1,0"))
         (rule "ex_pull_out3" (formula "21") (term "0"))
         (rule "allLeft" (formula "26") (inst "t=i_0"))
         (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "26") (term "0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "2"))
         (rule "andLeft" (formula "26"))
         (rule "inEqSimp_homoInEq1" (formula "26"))
         (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
         (rule "add_literals" (formula "26") (term "1,1,0"))
         (rule "times_zero_1" (formula "26") (term "1,0"))
         (rule "add_zero_right" (formula "26") (term "0"))
         (rule "leq_literals" (formula "26"))
         (rule "closeFalse" (formula "26"))
      )
      (branch "Case 2"
         (rule "shift_paren_or" (formula "25") (term "0,0,0,1,0"))
         (rule "andRight" (formula "31"))
         (branch "Case 1"
            (rule "andRight" (formula "31"))
            (branch "Case 1"
               (rule "andRight" (formula "31"))
               (branch "Case 1"
                  (rule "andRight" (formula "31"))
                  (branch "Case 1"
                     (rule "andRight" (formula "31"))
                     (branch "Case 1"
                        (rule "andRight" (formula "31"))
                        (branch "Case 1"
                           (rule "allRight" (formula "31") (inst "sk=i_0"))
                           (rule "orRight" (formula "31"))
                           (rule "orRight" (formula "31"))
                           (rule "notRight" (formula "33"))
                           (rule "inEqSimp_leqRight" (formula "32"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "commute_or" (formula "28") (term "0,0,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "28") (term "0,0,1,1,0"))
                           (rule "commute_or" (formula "28") (term "1,0,0,1,1,0"))
                           (rule "commute_or" (formula "28") (term "0,0,0,1,1,0"))
                           (rule "all_pull_out0" (formula "21") (term "0,1,0"))
                           (rule "shift_paren_and" (formula "21") (term "0,0,1,0"))
                           (rule "shift_paren_and" (formula "21") (term "0,0,0,1,0"))
                           (rule "allLeft" (formula "9") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                           (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "9") (term "0,0,1"))
                           (rule "leq_literals" (formula "9") (term "0,1"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "inEqSimp_contradInEq1" (formula "9") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "9") (term "0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "closeFalse" (formula "9"))
                        )
                        (branch "Case 2"
                           (rule "allRight" (formula "31") (inst "sk=i_0"))
                           (rule "orRight" (formula "31"))
                           (rule "orRight" (formula "31"))
                           (rule "notRight" (formula "33"))
                           (rule "inEqSimp_leqRight" (formula "32"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "commute_or" (formula "28") (term "0,0,0,0,1,0"))
                           (rule "cnf_rightDist" (formula "28") (term "0,0,1,1,0"))
                           (rule "commute_or" (formula "28") (term "1,0,0,1,1,0"))
                           (rule "commute_or" (formula "28") (term "0,0,0,1,1,0"))
                           (rule "all_pull_out0" (formula "21") (term "0,1,0"))
                           (rule "shift_paren_and" (formula "21") (term "0,0,1,0"))
                           (rule "shift_paren_and" (formula "21") (term "0,0,0,1,0"))
                           (rule "allLeft" (formula "10") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "2"))
                           (rule "qeq_literals" (formula "10") (term "0,0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "1"))
                           (rule "andLeft" (formula "10"))
                           (rule "inEqSimp_homoInEq1" (formula "10"))
                           (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                           (rule "add_literals" (formula "10") (term "1,1,0"))
                           (rule "times_zero_1" (formula "10") (term "1,0"))
                           (rule "add_zero_right" (formula "10") (term "0"))
                           (rule "leq_literals" (formula "10"))
                           (rule "closeFalse" (formula "10"))
                        )
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "31") (inst "sk=j_2_0"))
                        (rule "allRight" (formula "31") (inst "sk=i_1_0"))
                        (rule "orRight" (formula "31"))
                        (rule "notRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "inEqSimp_geqRight" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "33"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "34"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "commute_or" (formula "29") (term "0,0,0,0,1,0"))
                        (rule "cnf_rightDist" (formula "29") (term "0,0,1,1,0"))
                        (rule "commute_or" (formula "29") (term "0,0,0,1,1,0"))
                        (rule "commute_or" (formula "29") (term "1,0,0,1,1,0"))
                        (rule "all_pull_out0" (formula "22") (term "0,1,0"))
                        (rule "shift_paren_and" (formula "22") (term "0,0,1,0"))
                        (rule "allLeft" (formula "18") (inst "t=j_2_0"))
                        (rule "eqSymm" (formula "18") (term "0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0"))
                        (rule "applyEq" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "4"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
                        (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                        (rule "leq_literals" (formula "18") (term "0,1,0,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "shift_paren_and" (formula "23") (term "0,0,0,1,0"))
                        (rule "ex_pull_out1" (formula "30") (term "1,0"))
                        (rule "ex_pull_out3" (formula "23") (term "0"))
                        (rule "all_pull_out0" (formula "30") (term "0,1,0"))
                        (rule "shift_paren_and" (formula "30") (term "0,0,1,0"))
                        (rule "shift_paren_and" (formula "30") (term "0,0,0,1,0"))
                        (rule "ex_pull_out3" (formula "30") (term "0"))
                        (rule "all_pull_out3" (formula "23") (term "0,0"))
                        (rule "cnf_rightDist" (formula "23") (term "0,0,0"))
                        (rule "commute_or_2" (formula "23") (term "1,0,0,0"))
                        (rule "commute_or" (formula "23") (term "0,1,0,0,0"))
                        (rule "cnf_rightDist" (formula "23") (term "0,0,0,0"))
                        (rule "commute_or_2" (formula "23") (term "1,0,0,0,0"))
                        (rule "commute_or" (formula "23") (term "0,1,0,0,0,0"))
                        (rule "cnf_rightDist" (formula "23") (term "0,0,0,0,0"))
                        (rule "commute_or_2" (formula "23") (term "1,0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "23") (term "0,1,0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0,0,0"))
                        (rule "commute_or" (formula "23") (term "0,0,1,0,0,0,0,0"))
                        (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0,0,0,0"))
                        (rule "commute_or_2" (formula "23") (term "0,0,0,0,0,0,0,0,0"))
                        (rule "applyEq_or_gen0" (formula "23") (term "0,0,0,0,0,0,0,0,0,0"))
                        (rule "allLeft" (formula "18") (inst "t=i_1_0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "18") (term "0,0"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "1"))
                        (rule "andLeft" (formula "18"))
                        (rule "inEqSimp_homoInEq1" (formula "18"))
                        (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                        (rule "add_literals" (formula "18") (term "1,1,0"))
                        (rule "times_zero_1" (formula "18") (term "1,0"))
                        (rule "add_zero_right" (formula "18") (term "0"))
                        (rule "leq_literals" (formula "18"))
                        (rule "closeFalse" (formula "18"))
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "31") (inst "sk=j_1_0"))
                     (rule "allRight" (formula "31") (inst "sk=i_0_0"))
                     (rule "orRight" (formula "31"))
                     (rule "notRight" (formula "32"))
                     (rule "orRight" (formula "32"))
                     (rule "orRight" (formula "32"))
                     (rule "orRight" (formula "32"))
                     (rule "inEqSimp_geqRight" (formula "35"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "35"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "34"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "35"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "commute_or" (formula "30") (term "0,0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "30") (term "0,0,1,1,0"))
                     (rule "commute_or" (formula "30") (term "1,0,0,1,1,0"))
                     (rule "commute_or" (formula "30") (term "0,0,0,1,1,0"))
                     (rule "all_pull_out0" (formula "23") (term "0,1,0"))
                     (rule "shift_paren_and" (formula "23") (term "0,0,1,0"))
                     (rule "allLeft" (formula "20") (inst "t=j_1_0"))
                     (rule "eqSymm" (formula "20") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
                     (rule "applyEq" (formula "20") (term "1,0,0,0,0,0,0") (ifseqformula "5"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
                     (rule "add_zero_right" (formula "20") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "20") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "20") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "shift_paren_and" (formula "24") (term "0,0,0,1,0"))
                     (rule "ex_pull_out1" (formula "31") (term "1,0"))
                     (rule "ex_pull_out3" (formula "24") (term "0"))
                     (rule "all_pull_out0" (formula "31") (term "0,1,0"))
                     (rule "shift_paren_and" (formula "31") (term "0,0,1,0"))
                     (rule "shift_paren_and" (formula "31") (term "0,0,0,1,0"))
                     (rule "ex_pull_out3" (formula "31") (term "0"))
                     (rule "all_pull_out3" (formula "24") (term "0,0"))
                     (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                     (rule "commute_or_2" (formula "24") (term "1,0,0,0"))
                     (rule "commute_or" (formula "24") (term "0,1,0,0,0"))
                     (rule "cnf_rightDist" (formula "24") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "24") (term "1,0,0,0,0"))
                     (rule "commute_or" (formula "24") (term "0,1,0,0,0,0"))
                     (rule "cnf_rightDist" (formula "24") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "24") (term "1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "24") (term "0,1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0,0"))
                     (rule "commute_or" (formula "24") (term "0,0,1,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "applyEq_or_gen0" (formula "24") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "allLeft" (formula "21") (inst "t=i_0_0"))
                     (rule "eqSymm" (formula "21") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
                     (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0"))
                     (rule "add_literals" (formula "21") (term "1,1,0,0,1,0"))
                     (rule "times_zero_1" (formula "21") (term "1,0,0,1,0"))
                     (rule "add_literals" (formula "21") (term "0,0,1,0"))
                     (rule "leq_literals" (formula "21") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "21") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "allLeft" (formula "20") (inst "t=i_0_0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "20") (term "0,0,1"))
                     (rule "leq_literals" (formula "20") (term "0,1"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "20") (term "0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "closeFalse" (formula "20"))
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "31") (inst "sk=i_0"))
                  (rule "orRight" (formula "31"))
                  (rule "orRight" (formula "31"))
                  (rule "inEqSimp_leqRight" (formula "31"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "32"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "commute_or" (formula "27") (term "0,0,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "27") (term "0,0,1,1,0"))
                  (rule "commute_or" (formula "27") (term "0,0,0,1,1,0"))
                  (rule "commute_or" (formula "27") (term "1,0,0,1,1,0"))
                  (rule "all_pull_out0" (formula "20") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "20") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "20") (term "0,0,0,1,0"))
                  (rule "ex_pull_out1" (formula "27") (term "1,0"))
                  (rule "ex_pull_out3" (formula "20") (term "0"))
                  (rule "all_pull_out0" (formula "27") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "27") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "27") (term "0,0,0,1,0"))
                  (rule "ex_pull_out3" (formula "27") (term "0"))
                  (rule "all_pull_out3" (formula "20") (term "0,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "1,0,0,0"))
                  (rule "commute_or" (formula "20") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "20") (term "0,1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "20") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "20") (term "0,0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "20") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "applyEq_or_gen0" (formula "20") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "allLeft" (formula "21") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                  (rule "add_literals" (formula "21") (term "0,0,1"))
                  (rule "leq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "allLeft" (formula "19") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "19") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                  (rule "add_literals" (formula "19") (term "0,0,1"))
                  (rule "leq_literals" (formula "19") (term "0,1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "notLeft" (formula "19"))
                  (rule "replace_known_right" (formula "34") (term "0,1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "notRight" (formula "34"))
                  (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "1"))
                  (rule "allLeft" (formula "18") (inst "t=i_0"))
                  (rule "eqSymm" (formula "18") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "18") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "18") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "allLeft" (formula "20") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "20") (term "0,0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "2"))
                  (rule "andLeft" (formula "20"))
                  (rule "inEqSimp_homoInEq1" (formula "20"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                  (rule "add_literals" (formula "20") (term "1,1,0"))
                  (rule "times_zero_1" (formula "20") (term "1,0"))
                  (rule "add_zero_right" (formula "20") (term "0"))
                  (rule "leq_literals" (formula "20"))
                  (rule "closeFalse" (formula "20"))
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "31") (inst "sk=x_1_0"))
               (rule "orRight" (formula "31"))
               (rule "orRight" (formula "31"))
               (rule "eqSymm" (formula "33") (term "1,0,1"))
               (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "notRight" (formula "31"))
               (rule "equiv_right" (formula "33"))
               (branch "Case 1"
                  (rule "nnf_ex2all" (formula "34"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0"))
                  (rule "commute_or" (formula "1") (term "0,0"))
                  (rule "commute_or" (formula "28") (term "0,0,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "28") (term "0,0,1,1,0"))
                  (rule "commute_or" (formula "28") (term "0,0,0,1,1,0"))
                  (rule "commute_or" (formula "28") (term "1,0,0,1,1,0"))
                  (rule "all_pull_out0" (formula "21") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "21") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "21") (term "0,0,0,1,0"))
                  (rule "ex_pull_out1" (formula "28") (term "1,0"))
                  (rule "ex_pull_out3" (formula "21") (term "0"))
                  (rule "all_pull_out0" (formula "28") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "28") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "28") (term "0,0,0,1,0"))
                  (rule "ex_pull_out3" (formula "28") (term "0"))
                  (rule "all_pull_out3" (formula "21") (term "0,0"))
                  (rule "cnf_rightDist" (formula "21") (term "0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "1,0,0,0"))
                  (rule "commute_or" (formula "21") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "21") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "21") (term "0,1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "21") (term "0,0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "21") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "applyEq_or_gen0" (formula "21") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "allLeft" (formula "21") (inst "t=x_1_0"))
                  (rule "exLeft" (formula "21") (inst "sk=j_0_0"))
                  (rule "eqSymm" (formula "21") (term "1,0,0,1,0,0,0"))
                  (rule "eqSymm" (formula "21") (term "0,1,0,0,0,0,0,0,0,0"))
                  (rule "replace_known_left" (formula "21") (term "0,1,0,1,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "34")) (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "34")) (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "34")) (ifInst ""  (formula "3")))
                  (rule "andLeft" (formula "21"))
                  (rule "andLeft" (formula "21"))
                  (rule "inEqSimp_homoInEq0" (formula "23"))
                  (rule "polySimp_addComm1" (formula "23") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "23"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1"))
                  (rule "polySimp_rightDist" (formula "23") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                  (rule "mul_literals" (formula "23") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                  (rule "allLeft" (formula "1") (inst "t=j_0_0"))
                  (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "24"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_literals" (formula "1") (term "0,0,1"))
                  (rule "leq_literals" (formula "1") (term "0,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "23"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                  (rule "exLeft" (formula "1") (inst "sk=j_0_0"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "commute_or" (formula "29") (term "0,0,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "29") (term "0,0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "0,0,0,1,1,0"))
                  (rule "commute_or" (formula "29") (term "1,0,0,1,1,0"))
                  (rule "all_pull_out0" (formula "22") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "22") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "22") (term "0,0,0,1,0"))
                  (rule "ex_pull_out1" (formula "29") (term "1,0"))
                  (rule "ex_pull_out3" (formula "22") (term "0"))
                  (rule "all_pull_out0" (formula "29") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "29") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "29") (term "0,0,0,1,0"))
                  (rule "ex_pull_out3" (formula "29") (term "0"))
                  (rule "all_pull_out3" (formula "22") (term "0,0"))
                  (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                  (rule "commute_or_2" (formula "22") (term "1,0,0,0"))
                  (rule "commute_or" (formula "22") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "22") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "22") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "22") (term "0,1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "22") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "22") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "22") (term "0,0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "22") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "applyEq_or_gen0" (formula "22") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "allLeft" (formula "20") (inst "t=j_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                  (rule "applyEq" (formula "20") (term "0,0,0,0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "35"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "allLeft" (formula "19") (inst "t=j_0_0"))
                  (rule "eqSymm" (formula "19") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "19") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "19") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "19") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "allLeft" (formula "22") (inst "t=j_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "22") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
                  (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "22") (term "0,0,1"))
                  (rule "leq_literals" (formula "22") (term "0,1"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "notLeft" (formula "22"))
                  (rule "allLeft" (formula "24") (inst "t=j_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                  (rule "applyEq" (formula "24") (term "1,0,0,0") (ifseqformula "3"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "24") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                  (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "24") (term "0,0,1"))
                  (rule "leq_literals" (formula "24") (term "0,1"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "allLeft" (formula "29") (inst "t=j_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                  (rule "applyEq" (formula "29") (term "1,0,0,0,0") (ifseqformula "3"))
                  (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                  (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "29") (term "0,0,1"))
                  (rule "leq_literals" (formula "29") (term "0,1"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "29") (term "0,1"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "notLeft" (formula "29"))
                  (rule "cut_direct" (formula "30") (term "0"))
                  (branch "CUT: self_25.keys[-1] = null TRUE"
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "commute_and" (formula "23") (term "0,0,0,0,0"))
                     (rule "notInDomain" (formula "39"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "1") (term "1") (ifseqformula "25"))
                     (rule "allLeft" (formula "20") (inst "t=j_0_0"))
                     (rule "eqSymm" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                     (rule "applyEq" (formula "20") (term "1,0,0,0") (ifseqformula "4"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "20") (term "0,0,1"))
                     (rule "leq_literals" (formula "20") (term "0,1"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "20") (term "0,1"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "notLeft" (formula "20"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "24") (term "0,0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "distr_existsAnd1" (formula "24") (term "0"))
                     (rule "distr_forallAnd" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "swapQuantifiersAll" (formula "25"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "6"))
                     (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "42"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "5"))
                     (rule "allLeft" (formula "11") (inst "t=j_0_0"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                     (rule "applyEq" (formula "11") (term "0,0,0,0") (ifseqformula "4"))
                     (rule "replace_known_right" (formula "11") (term "0,0,0") (ifseqformula "42"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "32") (term "0") (ifseqformula "6"))
                     (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "33"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "true_left" (formula "32"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "1") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "36"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "allLeft" (formula "26") (inst "t=j_0_0"))
                     (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                     (rule "applyEq" (formula "26") (term "1,0,0,1,0,0,0") (ifseqformula "5"))
                     (rule "replace_known_left" (formula "26") (term "0,1,0,0,0") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "applyEq" (formula "26") (term "1,1,0,0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "26") (term "1,0,0") (ifseqformula "44"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "applyEq" (formula "26") (term "0,0,0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "26") (term "0,0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "4"))
                     (rule "andLeft" (formula "26"))
                     (rule "inEqSimp_homoInEq1" (formula "26"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                     (rule "add_literals" (formula "26") (term "1,1,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0"))
                     (rule "add_zero_right" (formula "26") (term "0"))
                     (rule "leq_literals" (formula "26"))
                     (rule "closeFalse" (formula "26"))
                  )
                  (branch "CUT: self_25.keys[-1] = null FALSE"
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "commute_and" (formula "23") (term "0,0,0,0,0"))
                     (rule "notInDomain" (formula "40"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "1") (term "1") (ifseqformula "25"))
                     (rule "allLeft" (formula "20") (inst "t=j_0_0"))
                     (rule "eqSymm" (formula "20") (term "0,0,0"))
                     (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                     (rule "applyEq" (formula "20") (term "1,0,0,0") (ifseqformula "4"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "20") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "3"))
                     (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                     (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "20") (term "0,0,1"))
                     (rule "leq_literals" (formula "20") (term "0,1"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "notLeft" (formula "20"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0,0"))
                     (rule "commute_and_2" (formula "24") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "24") (term "0,0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "distr_existsAnd1" (formula "24") (term "0"))
                     (rule "distr_forallAnd" (formula "24"))
                     (rule "andLeft" (formula "24"))
                     (rule "swapQuantifiersAll" (formula "25"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0,0"))
                     (rule "commute_or_2" (formula "25") (term "0,0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "6"))
                     (rule "applyEq" (formula "4") (term "1,0,1") (ifseqformula "5"))
                     (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "allLeft" (formula "11") (inst "t=j_0_0"))
                     (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                     (rule "applyEq" (formula "11") (term "0,0,0,0") (ifseqformula "4"))
                     (rule "replace_known_right" (formula "11") (term "0,0,0") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "true_left" (formula "11"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "33") (term "1,0") (ifseqformula "7"))
                     (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "36"))
                      (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "34")))
                     (rule "true_left" (formula "33"))
                     (rule "allLeft" (formula "26") (inst "t=j_0_0"))
                     (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                     (rule "applyEq" (formula "26") (term "0,0,0,0,0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "26") (term "0,0,0,0") (ifseqformula "44"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "applyEq" (formula "26") (term "1,0,0,0,0,0") (ifseqformula "5"))
                     (rule "replace_known_left" (formula "26") (term "0,0,0,0") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "applyEq" (formula "26") (term "1,0,0") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "45"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                     (rule "add_literals" (formula "26") (term "0,0,1"))
                     (rule "leq_literals" (formula "26") (term "0,1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "26"))
                     (rule "qeq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "closeFalse" (formula "3"))
                  )
               )
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "31") (inst "sk=j_0"))
            (rule "orRight" (formula "31"))
            (rule "orRight" (formula "31"))
            (rule "inEqSimp_geqRight" (formula "32"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "32"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "commute_or" (formula "27") (term "0,0,0,0,1,0"))
            (rule "cnf_rightDist" (formula "27") (term "0,0,1,1,0"))
            (rule "commute_or" (formula "27") (term "1,0,0,1,1,0"))
            (rule "commute_or" (formula "27") (term "0,0,0,1,1,0"))
            (rule "all_pull_out0" (formula "20") (term "0,1,0"))
            (rule "shift_paren_and" (formula "20") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "20") (term "0,0,0,1,0"))
            (rule "allLeft" (formula "21") (inst "t=j_0"))
            (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "34"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
            (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
            (rule "add_literals" (formula "21") (term "0,0,1"))
            (rule "leq_literals" (formula "21") (term "0,1"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "1"))
            (rule "qeq_literals" (formula "21") (term "0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "closeFalse" (formula "21"))
         )
      )
   )
)
(branch "Exceptional Post (posOfId)"
    (builtin "One Step Simplification" (formula "19"))
    (builtin "One Step Simplification" (formula "25"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "21"))
   (rule "notLeft" (formula "19"))
   (rule "close" (formula "22") (ifseqformula "21"))
)
(branch "Pre (posOfId)"
    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "23")) (ifInst ""  (formula "1")) (ifInst ""  (formula "23")) (ifInst ""  (formula "4")))
   (rule "Class_invariant_axiom_for_KSMapImpl" (formula "24") (inst "j=j") (inst "x=x") (inst "j_0=j_0") (inst "i=i") (inst "j_1=j_1") (inst "i_0=i_0") (inst "j_2=j_2") (inst "i_1=i_1") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "eqSymm" (formula "24") (term "1,0,0,0,0,0,0,0,0"))
   (rule "eqSymm" (formula "24") (term "1,0,1,1,0,1,0,0"))
   (rule "eqSymm" (formula "24") (term "0,1,0,0,1,0,0,0,0"))
   (rule "eqSymm" (formula "24") (term "0,1,0,0,1,0,0,0,0,0"))
   (rule "eqSymm" (formula "24") (term "0,1,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "24") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "21"))
    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "9")))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "24") (term "0,1,0,0,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,1,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,1,0,1,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "24") (term "1,0,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "24") (term "0,0,1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0,1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0,0,0,0,0,0"))
   (rule "replace_known_left" (formula "24") (term "0,1,0,0,0,0,0,0") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "1,0,0,0,0,0,0"))
   (rule "replace_known_left" (formula "24") (term "1,0,0,0,0,0,0") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,1,0,1,0,0"))
   (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "18"))
   (rule "eqSymm" (formula "24") (term "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1,0,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,1,0,0,0,0,0,0"))
   (rule "replace_known_left" (formula "24") (term "1,0,0,0,0,0,0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,0,1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,1,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,1,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,1,0,1,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,1,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,1,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,1,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,0,0"))
   (rule "nonNull" (formula "24") (term "1,0,0,0,0,0,0") (inst "i=i"))
   (rule "greater_literals" (formula "24") (term "0,1,1,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "19")))
   (rule "sub_literals" (formula "24") (term "2,1,0,1,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0,1,0,0,0,0,0,0") (ifseqformula "1") (ifseqformula "19"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "applyEq" (formula "24") (term "0,1,0,0,1,0,0,1,0,0,0,0,0,0") (ifseqformula "9"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,1,0,0,0,0,0,0"))
   (rule "nonNull" (formula "24") (term "0,0,0,0,0,0,0") (inst "i=i"))
   (rule "greater_literals" (formula "24") (term "0,1,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "20")))
   (rule "sub_literals" (formula "24") (term "2,1,0,0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "narrowSelectArrayType" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1") (ifseqformula "20"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,0,0,0,0,0"))
   (rule "commuteUnion" (formula "24") (term "1,0,1"))
   (rule "eqSymm" (formula "24") (term "1"))
   (rule "nnf_imp2or" (formula "24") (term "0,1,0"))
   (rule "nnf_imp2or" (formula "24") (term "0,1,0,0"))
   (rule "nnf_imp2or" (formula "24") (term "0,1,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "nnf_notOr" (formula "24") (term "0,0,0,1,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,0,0"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0,0,0"))
   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0,0,0"))
   (rule "nnf_imp2or" (formula "24") (term "0,0,1,0,0,0,0"))
   (rule "nnf_imp2or" (formula "24") (term "0,0,1,0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "24") (term "0,0,0,0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "24") (term "0,1,0,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,1,0,0,0,0"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,1,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,1,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0,0,0,1,0,0,0,0"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,1,0,0,0,0,1,0,0,0,0"))
   (rule "add_zero_right" (formula "24") (term "0,0,1,0,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,1,0,0,0,0,1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,1,0,0,0,0,0"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,1,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0,1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0,1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0,1,0,0,0,0"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,0,0,1,0,0,0,0"))
   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,1,0,0,0,0"))
   (rule "ex_pull_out3" (formula "16") (term "1,1,0"))
   (rule "all_pull_out3" (formula "16") (term "0,1,0"))
   (rule "associativeLawUnion" (formula "24") (term "1,1"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "20"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,1") (ifseqformula "1"))
   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "22"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "shift_paren_or" (formula "18") (term "0,0,1,0"))
   (rule "andRight" (formula "26"))
   (branch "Case 1"
      (rule "andRight" (formula "26"))
      (branch "Case 1"
         (rule "andRight" (formula "26"))
         (branch "Case 1"
            (rule "andRight" (formula "26"))
            (branch "Case 1"
               (rule "andRight" (formula "26"))
               (branch "Case 1"
                  (rule "andRight" (formula "26"))
                  (branch "Case 1"
                     (rule "allRight" (formula "26") (inst "sk=i_0"))
                     (rule "orRight" (formula "26"))
                     (rule "orRight" (formula "26"))
                     (rule "notRight" (formula "28"))
                     (rule "inEqSimp_geqRight" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "28"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "shift_paren_or" (formula "21") (term "0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "21") (term "0,1,1,0"))
                     (rule "commute_or" (formula "21") (term "1,0,1,1,0"))
                     (rule "commute_or" (formula "21") (term "0,0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "21") (term "0,0,1,1,0"))
                     (rule "commute_or" (formula "21") (term "1,0,0,1,1,0"))
                     (rule "commute_or" (formula "21") (term "0,0,0,1,1,0"))
                     (rule "ex_pull_out1" (formula "21") (term "1,0"))
                     (rule "allLeft" (formula "9") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "9") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_commuteGeq" (formula "9") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "9") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "9") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,1"))
                     (rule "add_literals" (formula "9") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1"))
                     (rule "leq_literals" (formula "9") (term "0,1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "9"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "26") (inst "sk=i_0"))
                     (rule "orRight" (formula "26"))
                     (rule "orRight" (formula "26"))
                     (rule "notRight" (formula "28"))
                     (rule "inEqSimp_geqRight" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_leqRight" (formula "28"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "shift_paren_or" (formula "21") (term "0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "21") (term "0,1,1,0"))
                     (rule "commute_or" (formula "21") (term "1,0,1,1,0"))
                     (rule "commute_or" (formula "21") (term "0,0,0,0,1,0"))
                     (rule "cnf_rightDist" (formula "21") (term "0,0,1,1,0"))
                     (rule "commute_or" (formula "21") (term "1,0,0,1,1,0"))
                     (rule "commute_or" (formula "21") (term "0,0,0,1,1,0"))
                     (rule "ex_pull_out1" (formula "21") (term "1,0"))
                     (rule "allLeft" (formula "10") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "10") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_commuteGeq" (formula "10") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                     (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "10") (term "0,0,1"))
                     (rule "leq_literals" (formula "10") (term "0,1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "10"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "26") (inst "sk=j_2_0"))
                  (rule "allRight" (formula "26") (inst "sk=i_1_0"))
                  (rule "orRight" (formula "26"))
                  (rule "notRight" (formula "27"))
                  (rule "orRight" (formula "27"))
                  (rule "orRight" (formula "27"))
                  (rule "inEqSimp_geqRight" (formula "29"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "29"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_leqRight" (formula "29"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "shift_paren_or" (formula "22") (term "0,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "22") (term "0,1,1,0"))
                  (rule "commute_or" (formula "22") (term "1,0,1,1,0"))
                  (rule "commute_or" (formula "22") (term "0,0,0,0,1,0"))
                  (rule "cnf_rightDist" (formula "22") (term "0,0,1,1,0"))
                  (rule "commute_or" (formula "22") (term "1,0,0,1,1,0"))
                  (rule "commute_or" (formula "22") (term "0,0,0,1,1,0"))
                  (rule "allLeft" (formula "18") (inst "t=j_2_0"))
                  (rule "eqSymm" (formula "18") (term "0,0,0,0,0"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0"))
                  (rule "applyEq" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "4"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0,0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0,1,0,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                  (rule "leq_literals" (formula "18") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "ex_pull_out1" (formula "23") (term "1,0"))
                  (rule "all_pull_out0" (formula "23") (term "0,1,0"))
                  (rule "shift_paren_and" (formula "23") (term "0,0,1,0"))
                  (rule "shift_paren_and" (formula "23") (term "0,0,0,1,0"))
                  (rule "ex_pull_out3" (formula "23") (term "0"))
                  (rule "all_pull_out3" (formula "23") (term "0,0"))
                  (rule "cnf_rightDist" (formula "23") (term "0,0,0"))
                  (rule "commute_or_2" (formula "23") (term "1,0,0,0"))
                  (rule "commute_or" (formula "23") (term "0,1,0,0,0"))
                  (rule "cnf_rightDist" (formula "23") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "23") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "23") (term "0,1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "23") (term "0,0,0,0,0"))
                  (rule "commute_or_2" (formula "23") (term "1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "23") (term "0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0,0,0"))
                  (rule "commute_or" (formula "23") (term "0,0,1,0,0,0,0,0"))
                  (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0,0,0,0"))
                  (rule "commute_or_2" (formula "23") (term "0,0,0,0,0,0,0,0,0"))
                  (rule "applyEq_or_gen0" (formula "23") (term "0,0,0,0,0,0,0,0,0,0"))
                  (rule "allLeft" (formula "18") (inst "t=i_1_0"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                  (rule "add_literals" (formula "18") (term "0,0,1"))
                  (rule "leq_literals" (formula "18") (term "0,1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Case 2"
               (rule "allRight" (formula "26") (inst "sk=j_1_0"))
               (rule "allRight" (formula "26") (inst "sk=i_0_0"))
               (rule "orRight" (formula "26"))
               (rule "notRight" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "orRight" (formula "27"))
               (rule "inEqSimp_geqRight" (formula "30"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "30"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "30"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "30"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "shift_paren_or" (formula "23") (term "0,0,0,1,0"))
               (rule "cnf_rightDist" (formula "23") (term "0,1,1,0"))
               (rule "commute_or" (formula "23") (term "1,0,1,1,0"))
               (rule "commute_or" (formula "23") (term "0,0,0,0,1,0"))
               (rule "cnf_rightDist" (formula "23") (term "0,0,1,1,0"))
               (rule "commute_or" (formula "23") (term "0,0,0,1,1,0"))
               (rule "commute_or" (formula "23") (term "1,0,0,1,1,0"))
               (rule "allLeft" (formula "20") (inst "t=j_1_0"))
               (rule "eqSymm" (formula "20") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0"))
               (rule "applyEq" (formula "20") (term "1,0,0,0,0,0,0") (ifseqformula "5"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0,0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "20") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,1,0"))
               (rule "add_zero_right" (formula "20") (term "0,0,1,0"))
               (rule "leq_literals" (formula "20") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "ex_pull_out1" (formula "24") (term "1,0"))
               (rule "all_pull_out0" (formula "24") (term "0,1,0"))
               (rule "shift_paren_and" (formula "24") (term "0,0,1,0"))
               (rule "shift_paren_and" (formula "24") (term "0,0,0,1,0"))
               (rule "ex_pull_out3" (formula "24") (term "0"))
               (rule "all_pull_out3" (formula "24") (term "0,0"))
               (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
               (rule "commute_or_2" (formula "24") (term "1,0,0,0"))
               (rule "commute_or" (formula "24") (term "0,1,0,0,0"))
               (rule "cnf_rightDist" (formula "24") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "24") (term "1,0,0,0,0"))
               (rule "commute_or" (formula "24") (term "0,1,0,0,0,0"))
               (rule "cnf_rightDist" (formula "24") (term "0,0,0,0,0"))
               (rule "commute_or_2" (formula "24") (term "1,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "24") (term "0,1,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0,0"))
               (rule "commute_or" (formula "24") (term "0,0,1,0,0,0,0,0"))
               (rule "shift_paren_or" (formula "24") (term "0,0,0,0,0,0,0,0"))
               (rule "commute_or_2" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
               (rule "applyEq_or_gen0" (formula "24") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "allLeft" (formula "21") (inst "t=i_0_0"))
               (rule "eqSymm" (formula "21") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1,0"))
               (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1,0"))
               (rule "add_literals" (formula "21") (term "1,1,0,0,1,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,1,0"))
               (rule "add_literals" (formula "21") (term "0,0,1,0"))
               (rule "leq_literals" (formula "21") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "21") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "allLeft" (formula "23") (inst "t=i_0_0"))
               (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
               (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
               (rule "add_literals" (formula "23") (term "0,0,1"))
               (rule "leq_literals" (formula "23") (term "0,1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "1"))
               (rule "qeq_literals" (formula "23") (term "0,1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "notLeft" (formula "23"))
               (rule "allLeft" (formula "24") (inst "t=i_0_0"))
               (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "24") (term "1,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "24") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
               (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "24") (term "0,0,1"))
               (rule "leq_literals" (formula "24") (term "0,1"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "notLeft" (formula "24"))
               (rule "allLeft" (formula "26") (inst "t=j_1_0"))
               (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
               (rule "applyEq" (formula "26") (term "1,0,0") (ifseqformula "5"))
               (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
               (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "26") (term "0,0,1"))
               (rule "leq_literals" (formula "26") (term "0,1"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "3"))
               (rule "qeq_literals" (formula "26") (term "0,1"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "allLeft" (formula "27") (inst "t=i_0_0"))
               (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "27") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
               (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "27") (term "0,0,1"))
               (rule "leq_literals" (formula "27") (term "0,1"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "allLeft" (formula "24") (inst "t=j_1_0"))
               (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
               (rule "applyEq" (formula "24") (term "0,0,0,0") (ifseqformula "5"))
               (rule "replace_known_right" (formula "24") (term "0,0,0") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "allLeft" (formula "23") (inst "t=j_1_0"))
               (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "23") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
               (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "23") (term "0,0,1"))
               (rule "leq_literals" (formula "23") (term "0,1"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "notLeft" (formula "23"))
               (rule "allLeft" (formula "20") (inst "t=i_0_0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "20") (term "0,0"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "2"))
               (rule "andLeft" (formula "20"))
               (rule "inEqSimp_homoInEq1" (formula "20"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
               (rule "add_literals" (formula "20") (term "1,1,0"))
               (rule "times_zero_1" (formula "20") (term "1,0"))
               (rule "add_literals" (formula "20") (term "0"))
               (rule "leq_literals" (formula "20"))
               (rule "closeFalse" (formula "20"))
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "26") (inst "sk=i_0"))
            (rule "orRight" (formula "26"))
            (rule "orRight" (formula "26"))
            (rule "inEqSimp_geqRight" (formula "27"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "27"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
            (rule "cnf_rightDist" (formula "20") (term "0,1,1,0"))
            (rule "commute_or" (formula "20") (term "1,0,1,1,0"))
            (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
            (rule "cnf_rightDist" (formula "20") (term "0,0,1,1,0"))
            (rule "commute_or" (formula "20") (term "0,0,0,1,1,0"))
            (rule "commute_or" (formula "20") (term "1,0,0,1,1,0"))
            (rule "ex_pull_out1" (formula "20") (term "1,0"))
            (rule "all_pull_out0" (formula "20") (term "0,1,0"))
            (rule "shift_paren_and" (formula "20") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "20") (term "0,0,0,1,0"))
            (rule "ex_pull_out3" (formula "20") (term "0"))
            (rule "all_pull_out3" (formula "20") (term "0,0"))
            (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
            (rule "commute_or_2" (formula "20") (term "1,0,0,0"))
            (rule "commute_or" (formula "20") (term "0,1,0,0,0"))
            (rule "cnf_rightDist" (formula "20") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "20") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "20") (term "0,1,0,0,0,0"))
            (rule "cnf_rightDist" (formula "20") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "20") (term "1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "20") (term "0,1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0,0"))
            (rule "commute_or" (formula "20") (term "0,0,1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "20") (term "0,0,0,0,0,0,0,0,0"))
            (rule "applyEq_or_gen0" (formula "20") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "allLeft" (formula "18") (inst "t=i_0"))
            (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "18") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
            (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "18") (term "0,0,1"))
            (rule "leq_literals" (formula "18") (term "0,1"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "notLeft" (formula "18"))
            (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "notRight" (formula "29"))
            (rule "allLeft" (formula "22") (inst "t=i_0"))
            (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
            (rule "applyEq" (formula "22") (term "1,0,0") (ifseqformula "1"))
            (rule "inEqSimp_contradInEq1" (formula "22") (term "1,0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "22") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
            (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "22") (term "0,0,1"))
            (rule "leq_literals" (formula "22") (term "0,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "allLeft" (formula "18") (inst "t=i_0"))
            (rule "eqSymm" (formula "18") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_commuteGeq" (formula "18") (term "1,0"))
            (rule "applyEq" (formula "18") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
            (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1,0"))
            (rule "add_literals" (formula "18") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0,1,0"))
            (rule "add_literals" (formula "18") (term "0,0,1,0"))
            (rule "leq_literals" (formula "18") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "18") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
            (rule "true_left" (formula "18"))
            (rule "allLeft" (formula "20") (inst "t=i_0"))
            (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "20") (term "0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "3"))
            (rule "andLeft" (formula "20"))
            (rule "inEqSimp_homoInEq1" (formula "20"))
            (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
            (rule "add_literals" (formula "20") (term "1,1,0"))
            (rule "times_zero_1" (formula "20") (term "1,0"))
            (rule "add_literals" (formula "20") (term "0"))
            (rule "leq_literals" (formula "20"))
            (rule "closeFalse" (formula "20"))
         )
      )
      (branch "Case 2"
         (rule "allRight" (formula "26") (inst "sk=x_0"))
         (rule "orRight" (formula "26"))
         (rule "orRight" (formula "26"))
         (rule "eqSymm" (formula "28") (term "1,0,1"))
         (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "27"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "notRight" (formula "26"))
         (rule "equiv_right" (formula "28"))
         (branch "Case 1"
            (rule "nnf_ex2all" (formula "29"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "shift_paren_or" (formula "21") (term "0,0,0,1,0"))
            (rule "cnf_rightDist" (formula "21") (term "0,1,1,0"))
            (rule "commute_or" (formula "21") (term "1,0,1,1,0"))
            (rule "commute_or" (formula "21") (term "0,0,0,0,1,0"))
            (rule "cnf_rightDist" (formula "21") (term "0,0,1,1,0"))
            (rule "commute_or" (formula "21") (term "0,0,0,1,1,0"))
            (rule "commute_or" (formula "21") (term "1,0,0,1,1,0"))
            (rule "ex_pull_out1" (formula "21") (term "1,0"))
            (rule "all_pull_out0" (formula "21") (term "0,1,0"))
            (rule "shift_paren_and" (formula "21") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "21") (term "0,0,0,1,0"))
            (rule "ex_pull_out3" (formula "21") (term "0"))
            (rule "all_pull_out3" (formula "21") (term "0,0"))
            (rule "cnf_rightDist" (formula "21") (term "0,0,0"))
            (rule "commute_or_2" (formula "21") (term "1,0,0,0"))
            (rule "commute_or" (formula "21") (term "0,1,0,0,0"))
            (rule "cnf_rightDist" (formula "21") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "21") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "21") (term "0,1,0,0,0,0"))
            (rule "cnf_rightDist" (formula "21") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "21") (term "1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "21") (term "0,1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0,0"))
            (rule "commute_or" (formula "21") (term "0,0,1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "21") (term "0,0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "21") (term "0,0,0,0,0,0,0,0,0"))
            (rule "applyEq_or_gen0" (formula "21") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "allLeft" (formula "21") (inst "t=x_0"))
            (rule "exLeft" (formula "21") (inst "sk=j_0_0"))
            (rule "eqSymm" (formula "21") (term "0,1,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "21") (term "1,0,0,1,0,0,0"))
            (rule "replace_known_left" (formula "21") (term "1,0,0,0,0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "3")) (ifInst ""  (formula "30")) (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "30")) (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "30")) (ifInst ""  (formula "3")) (ifInst ""  (formula "2")))
            (rule "andLeft" (formula "21"))
            (rule "andLeft" (formula "21"))
            (rule "inEqSimp_homoInEq0" (formula "23"))
            (rule "polySimp_addComm1" (formula "23") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "23"))
            (rule "polySimp_mulComm0" (formula "23") (term "1"))
            (rule "polySimp_rightDist" (formula "23") (term "1"))
            (rule "mul_literals" (formula "23") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
            (rule "polySimp_elimOne" (formula "23") (term "1,1"))
            (rule "allLeft" (formula "1") (inst "t=j_0_0"))
            (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "24"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_literals" (formula "1") (term "0,0,1"))
            (rule "leq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "23"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Case 2"
            (rule "exLeft" (formula "1") (inst "sk=j_0_0"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
            (rule "shift_paren_or" (formula "22") (term "0,0,0,1,0"))
            (rule "cnf_rightDist" (formula "22") (term "0,1,1,0"))
            (rule "commute_or" (formula "22") (term "1,0,1,1,0"))
            (rule "commute_or" (formula "22") (term "0,0,0,0,1,0"))
            (rule "cnf_rightDist" (formula "22") (term "0,0,1,1,0"))
            (rule "commute_or" (formula "22") (term "0,0,0,1,1,0"))
            (rule "commute_or" (formula "22") (term "1,0,0,1,1,0"))
            (rule "ex_pull_out1" (formula "22") (term "1,0"))
            (rule "all_pull_out0" (formula "22") (term "0,1,0"))
            (rule "shift_paren_and" (formula "22") (term "0,0,1,0"))
            (rule "shift_paren_and" (formula "22") (term "0,0,0,1,0"))
            (rule "ex_pull_out3" (formula "22") (term "0"))
            (rule "all_pull_out3" (formula "22") (term "0,0"))
            (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
            (rule "commute_or_2" (formula "22") (term "1,0,0,0"))
            (rule "commute_or" (formula "22") (term "0,1,0,0,0"))
            (rule "cnf_rightDist" (formula "22") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "22") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "22") (term "0,1,0,0,0,0"))
            (rule "cnf_rightDist" (formula "22") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "22") (term "1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "22") (term "0,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "22") (term "0,1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "22") (term "0,0,0,0,0,0,0"))
            (rule "commute_or" (formula "22") (term "0,0,1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "22") (term "0,0,0,0,0,0,0,0"))
            (rule "commute_or_2" (formula "22") (term "0,0,0,0,0,0,0,0,0"))
            (rule "applyEq_or_gen0" (formula "22") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "allLeft" (formula "23") (inst "t=j_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
            (rule "applyEq" (formula "23") (term "1,0,0,0") (ifseqformula "3"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "23") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
            (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
            (rule "add_literals" (formula "23") (term "0,0,1"))
            (rule "leq_literals" (formula "23") (term "0,1"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "allLeft" (formula "20") (inst "t=j_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
            (rule "applyEq" (formula "20") (term "0,0,0,0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "20") (term "0,0,0") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "allLeft" (formula "19") (inst "t=j_0_0"))
            (rule "eqSymm" (formula "19") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0"))
            (rule "add_literals" (formula "19") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "19") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "19") (term "0,0,1,0"))
            (rule "leq_literals" (formula "19") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "19") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "allLeft" (formula "22") (inst "t=j_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "22") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "22") (term "0,0,1"))
            (rule "add_literals" (formula "22") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "22") (term "1,0,0,1"))
            (rule "add_literals" (formula "22") (term "0,0,1"))
            (rule "leq_literals" (formula "22") (term "0,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "inEqSimp_contradInEq1" (formula "22") (term "1") (ifseqformula "1"))
            (rule "qeq_literals" (formula "22") (term "0,1"))
             (builtin "One Step Simplification" (formula "22"))
            (rule "notLeft" (formula "22"))
            (rule "commute_and" (formula "23") (term "0,0,0,0,0"))
            (rule "allLeft" (formula "19") (inst "t=j_0_0"))
            (rule "eqSymm" (formula "19") (term "0,0,0"))
            (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
            (rule "applyEq" (formula "19") (term "1,0,0,0") (ifseqformula "3"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "19") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
            (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "19") (term "0,0,1"))
            (rule "leq_literals" (formula "19") (term "0,1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "notLeft" (formula "19"))
            (rule "notInDomain" (formula "35"))
            (rule "applyEq" (formula "25") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "1") (term "1") (ifseqformula "25"))
            (rule "commute_and_2" (formula "24") (term "0,0,0,0"))
            (rule "commute_and_2" (formula "24") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "24") (term "0,0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "distr_existsAnd1" (formula "24") (term "0"))
            (rule "distr_forallAnd" (formula "24"))
            (rule "andLeft" (formula "24"))
            (rule "swapQuantifiersAll" (formula "25"))
            (rule "commute_or_2" (formula "25") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "25") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "25") (term "0,0,0"))
            (rule "commute_or_2" (formula "25") (term "0,0"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "6"))
            (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
            (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "5"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "0") (ifseqformula "6"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "allLeft" (formula "12") (inst "t=j_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
            (rule "applyEq" (formula "12") (term "0,0,0,0") (ifseqformula "5"))
            (rule "replace_known_right" (formula "12") (term "0,0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "allLeft" (formula "26") (inst "t=j_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
            (rule "applyEq" (formula "26") (term "0,0,0,0,0") (ifseqformula "5"))
            (rule "replace_known_right" (formula "26") (term "0,0,0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "applyEq" (formula "26") (term "1,0,0,0,0,0") (ifseqformula "5"))
            (rule "replace_known_left" (formula "26") (term "0,0,0,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "applyEq" (formula "26") (term "1,0,0") (ifseqformula "5"))
            (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "26") (term "0,0"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "4"))
            (rule "andLeft" (formula "26"))
            (rule "inEqSimp_homoInEq1" (formula "26"))
            (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
            (rule "add_literals" (formula "26") (term "1,1,0"))
            (rule "times_zero_1" (formula "26") (term "1,0"))
            (rule "add_zero_right" (formula "26") (term "0"))
            (rule "leq_literals" (formula "26"))
            (rule "closeFalse" (formula "26"))
         )
      )
   )
   (branch "Case 2"
      (rule "allRight" (formula "26") (inst "sk=j_0"))
      (rule "orRight" (formula "26"))
      (rule "orRight" (formula "26"))
      (rule "inEqSimp_leqRight" (formula "26"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_geqRight" (formula "27"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "shift_paren_or" (formula "20") (term "0,0,0,1,0"))
      (rule "cnf_rightDist" (formula "20") (term "0,1,1,0"))
      (rule "commute_or" (formula "20") (term "1,0,1,1,0"))
      (rule "commute_or" (formula "20") (term "0,0,0,0,1,0"))
      (rule "cnf_rightDist" (formula "20") (term "0,0,1,1,0"))
      (rule "commute_or" (formula "20") (term "1,0,0,1,1,0"))
      (rule "commute_or" (formula "20") (term "0,0,0,1,1,0"))
      (rule "ex_pull_out1" (formula "20") (term "1,0"))
      (rule "allLeft" (formula "21") (inst "t=j_0"))
      (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "29"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
      (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "21") (term "0,0,1"))
      (rule "leq_literals" (formula "21") (term "0,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "2"))
      (rule "qeq_literals" (formula "21") (term "0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "closeFalse" (formula "21"))
   )
)
)
}
