\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Dec 16 14:08:32 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=1000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Mon Dec 16 14:08:32 CET 2019
contract=KIMapImpl[KIMapImpl\\:\\:compute(int)].JML model_behavior operation contract.0
name=KIMapImpl[KIMapImpl\\:\\:compute(int)].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "weigl" ) (keyVersion "5c71d010aea2ef9b4a159569bd7f9d3d7b0f4027"))

(autoModeTime "1419")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "i,self,result,exc,heapAtPre,heapBefore,o,f"))
(rule "translateJavaAddInt" (formula "1") (term "2,0,2,0,0,1,0,0,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "0,0,0,1,0,0"))
(rule "replace_known_left" (formula "9") (term "1") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "9"))
(rule "allRight" (formula "9") (inst "sk=j_0"))
(rule "impRight" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "polySimp_addComm0" (formula "11") (term "2,0,2,0,0"))
(rule "inEqSimp_ltToLeq" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "1"))
(rule "inEqSimp_sepNegMonomial0" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "polySimp_elimOne" (formula "2") (term "0"))
(rule "Contract_axiom_for_compute_in_KIMapImpl" (formula "11") (term "0,2,0,0") (inst "j=j"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "11")) (ifInst ""  (formula "10")))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1"))
(rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "8"))
(rule "leq_literals" (formula "1") (term "0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "nnf_imp2or" (formula "1") (term "0,1"))
(rule "nnf_notAnd" (formula "1") (term "0,0,1"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,1"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "1") (term "0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,0,0,0,1"))
(rule "Definition_axiom_for_compute_in_KIMapImpl" (formula "12") (term "0,2,0,0") (ifseqformula "6"))
(rule "translateJavaAddInt" (formula "12") (term "2,0,2,0,2,0,0"))
(rule "eqSymm" (formula "12") (term "0,0,2,0,0"))
(rule "polySimp_addComm1" (formula "12") (term "2,0,2,0,2,0,0"))
(rule "add_literals" (formula "12") (term "0,2,0,2,0,2,0,0"))
(rule "Class_invariant_axiom_for_KIMapImpl" (formula "10") (inst "j=j") (inst "i=i_1") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "12"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "10"))
(rule "notLeft" (formula "10"))
(rule "eqSymm" (formula "13") (term "0,1,0,0"))
(rule "eqSymm" (formula "16"))
(rule "eqSymm" (formula "10"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0,0"))
(rule "polySimp_addComm1" (formula "13") (term "0,1,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "12"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "12") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "13") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "0,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "13") (term "0,1,0,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "12"))
(rule "polySimp_mulLiterals" (formula "12") (term "0"))
(rule "polySimp_elimOne" (formula "12") (term "0"))
(rule "nnf_imp2or" (formula "13") (term "0,0"))
(rule "nnf_notAnd" (formula "13") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
(rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0,0"))
(rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
(rule "mul_literals" (formula "13") (term "1,0,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0"))
(rule "Contract_axiom_for_compute_in_KIMapImpl" (formula "1") (term "0,0,1,0,1") (inst "j=j"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "18")))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,1"))
(rule "inEqSimp_subsumption1" (formula "1") (term "0,0,0") (ifseqformula "9"))
(rule "leq_literals" (formula "1") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "nnf_imp2or" (formula "1") (term "0,0,1"))
(rule "nnf_notAnd" (formula "1") (term "0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "1") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1"))
(rule "limit_KIMapImpl_computeint" (formula "2") (term "0,0,1,0,1"))
(rule "commute_or_2" (formula "3") (term "0,1"))
(rule "Contract_axiom_for_compute_in_KIMapImpl" (formula "1") (term "0,0,1,0,0,1") (inst "j=j"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "20")))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,1"))
(rule "inEqSimp_subsumption1" (formula "1") (term "0,0,0") (ifseqformula "11"))
(rule "leq_literals" (formula "1") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "nnf_imp2or" (formula "1") (term "0,0,1"))
(rule "nnf_notAnd" (formula "1") (term "0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "1") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1"))
(rule "Contract_axiom_for_compute_in_KIMapImpl" (formula "2") (term "1") (inst "j=j"))
 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "20")))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "0,0,0"))
(rule "mul_literals" (formula "2") (term "1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0,1"))
(rule "inEqSimp_subsumption1" (formula "2") (term "0,0,0") (ifseqformula "11"))
(rule "leq_literals" (formula "2") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "2"))
(rule "nnf_imp2or" (formula "2") (term "0,0,1"))
(rule "nnf_notAnd" (formula "2") (term "0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0,0,0,1"))
(rule "add_literals" (formula "2") (term "0,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "2") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,1"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,1"))
(rule "Contract_axiom_for_compute_in_KIMapImpl" (formula "3") (term "0,0,1,0,0,1") (inst "j=j"))
 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "20")))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "3") (term "0,0,0"))
(rule "mul_literals" (formula "3") (term "1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "3") (term "0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0,1"))
(rule "inEqSimp_subsumption1" (formula "3") (term "0,0,0") (ifseqformula "11"))
(rule "leq_literals" (formula "3") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "3"))
(rule "nnf_imp2or" (formula "3") (term "0,0,1"))
(rule "nnf_notAnd" (formula "3") (term "0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0,1"))
(rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "3") (term "1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "3") (term "0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "3") (term "0,0,0,0,0,0,1"))
(rule "add_literals" (formula "3") (term "0,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "3") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "3") (term "1,0,0,0,0,1"))
(rule "Class_invariant_axiom_for_KIMapImpl" (formula "1") (term "1,0") (inst "j=j") (inst "i=i_1") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "16")))
(rule "eqSymm" (formula "1") (term "0,1,0,0,1,1,0"))
(rule "eqSymm" (formula "1") (term "0,1,0,0,1,0"))
(rule "eqSymm" (formula "1") (term "0,0,0,1,0"))
(rule "replace_known_left" (formula "1") (term "0,0,0,1,0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,1,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0,1,1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0,0,1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,0,1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,1,0"))
(rule "replace_known_left" (formula "1") (term "0,0,1,0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,1,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,1,1,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0,0,0,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,0,0,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,1,0"))
(rule "replace_known_left" (formula "1") (term "0,1,0") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "1"))
(rule "nnf_imp2or" (formula "1") (term "0,0,1,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,1,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,1,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,1,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0,1,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,1,0"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,1,0"))
(rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,1,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,1,0"))
(rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "15"))
 (builtin "One Step Simplification" (formula "1"))
(rule "commute_or_2" (formula "15") (term "0,0,0"))
(rule "Definition_axiom_for_compute_in_KIMapImpl" (formula "2") (term "1") (ifseqformula "8"))
(rule "translateJavaAddInt" (formula "2") (term "2,0,2,1"))
(rule "eqSymm" (formula "2") (term "0,1"))
(rule "eqSymm" (formula "2"))
(rule "polySimp_addComm1" (formula "2") (term "2,0,2,0"))
(rule "add_literals" (formula "2") (term "0,2,0,2,0"))
(rule "applyEq" (formula "20") (term "0,2,0,0") (ifseqformula "2"))
(rule "Definition_axiom_for_compute_in_KIMapImpl" (formula "3") (term "0,0,1,0,0,1") (ifseqformula "8"))
(rule "translateJavaAddInt" (formula "3") (term "2,0,2,0,0,1,0,0,1"))
(rule "eqSymm" (formula "3") (term "0,0,0,1,0,0,1"))
(rule "polySimp_addComm1" (formula "3") (term "2,0,2,0,0,1,0,0,1"))
(rule "add_literals" (formula "3") (term "0,2,0,2,0,0,1,0,0,1"))
(rule "applyEq" (formula "3") (term "0,0,1,0,0,1") (ifseqformula "2"))
(rule "Contract_axiom_for_compute_in_KIMapImpl" (formula "1") (term "0,0,1,0,0,1") (inst "j=j"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "20")))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,1"))
(rule "inEqSimp_subsumption1" (formula "1") (term "0,0,0") (ifseqformula "11"))
(rule "leq_literals" (formula "1") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "nnf_imp2or" (formula "1") (term "0,0,1"))
(rule "nnf_notAnd" (formula "1") (term "0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "1") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1"))
(rule "Definition_axiom_for_compute_in_KIMapImpl" (formula "2") (term "0,0,1,0,0,1") (ifseqformula "9"))
(rule "translateJavaAddInt" (formula "2") (term "2,0,2,0,0,1,0,0,1"))
(rule "eqSymm" (formula "2") (term "0,0,0,1,0,0,1"))
(rule "polySimp_addComm1" (formula "2") (term "2,0,2,0,0,1,0,0,1"))
(rule "add_literals" (formula "2") (term "0,2,0,2,0,0,1,0,0,1"))
(rule "applyEq" (formula "2") (term "0,0,1,0,0,1") (ifseqformula "3"))
(rule "Class_invariant_axiom_for_KIMapImpl" (formula "2") (term "1,1") (inst "j=j") (inst "i=i_1") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "18")) (ifInst ""  (formula "17")))
(rule "eqSymm" (formula "2") (term "0,0,0,1,1"))
(rule "eqSymm" (formula "2") (term "0,1,0,0,1,1"))
(rule "eqSymm" (formula "2") (term "0,1,0,0,1,1,1"))
(rule "replace_known_left" (formula "2") (term "0,0,0,1,1") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "19")))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,1,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,1,1"))
(rule "polySimp_addComm1" (formula "2") (term "0,1,0,1,1"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,0,1,1,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0,0,1,1,1"))
(rule "polySimp_addComm1" (formula "2") (term "0,1,0,0,0,0,1,1,1"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0,1,1,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0,1,1,1"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0,0,0,1,1,1"))
(rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,1,1"))
(rule "replace_known_left" (formula "2") (term "0,0,1,1") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0,1,1,1"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0,1,1,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0,1,1,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0,1,1,1"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,0,1,1,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0,1,1,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "1,0,0,0,0,1,1,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,1,0,0,0,0,1,1,1"))
(rule "polySimp_elimOne" (formula "2") (term "0,1,0,0,0,0,1,1,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1"))
(rule "polySimp_elimOne" (formula "2") (term "0,0,1,1"))
(rule "replace_known_left" (formula "2") (term "0,1,1") (ifseqformula "15"))
 (builtin "One Step Simplification" (formula "2"))
(rule "nnf_imp2or" (formula "2") (term "0,0,1,1"))
(rule "nnf_notAnd" (formula "2") (term "0,0,0,1,1"))
(rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0,1,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,1,1"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0,1,1"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,1,1"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0,1,1"))
(rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,1,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,1,1"))
(rule "nnf_notAnd" (formula "2") (term "0,0,0,0,1,1"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0,0,1,1"))
(rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0,0,1,1"))
(rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,0,1,1"))
(rule "mul_literals" (formula "2") (term "1,0,0,0,0,0,1,1"))
(rule "inEqSimp_notGeq" (formula "2") (term "1,0,0,0,0,1,1"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,0,1,1"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0,0,1,1"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,0,1,1"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0,0,1,1"))
(rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0,0,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0,0,1,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0,1,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0,1,1"))
(rule "Contract_axiom_for_compute_in_KIMapImpl" (formula "1") (term "0,0,1,0,0,1") (inst "j=j"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "21")))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,1"))
(rule "inEqSimp_subsumption1" (formula "1") (term "0,0,0") (ifseqformula "12"))
(rule "leq_literals" (formula "1") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "nnf_imp2or" (formula "1") (term "0,0,1"))
(rule "nnf_notAnd" (formula "1") (term "0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "1") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,1"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1"))
(rule "cut_direct" (formula "4") (term "0"))
(branch "CUT: self.count >= 1 + i TRUE"
    (builtin "One Step Simplification" (formula "5"))
   (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "4"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_contradEq7" (formula "23") (term "0,0,0") (ifseqformula "5"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "23") (term "1,1,0,0,0,0,0"))
   (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "23") (term "0,0,0,0,0"))
   (rule "leq_literals" (formula "23") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "inEqSimp_subsumption1" (formula "14") (ifseqformula "5"))
   (rule "inEqSimp_homoInEq0" (formula "14") (term "0"))
   (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
   (rule "add_literals" (formula "14") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "14") (term "1,0,0"))
   (rule "add_zero_right" (formula "14") (term "0,0"))
   (rule "qeq_literals" (formula "14") (term "0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "getOfMapUpdate" (formula "22") (term "0"))
   (rule "arrayLengthNotNegative" (formula "14") (term "0"))
   (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
   (rule "arrayLengthIsAnInt" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "true_left" (formula "15"))
   (rule "arrayLengthIsAnInt" (formula "15") (term "0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "true_left" (formula "15"))
   (rule "arrayLengthNotNegative" (formula "15") (term "1"))
   (rule "Contract_axiom_for_compute_in_KIMapImpl" (formula "1") (term "0,0,1,0,0,1") (inst "j=j"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "11")) (ifInst ""  (formula "23")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0,0"))
   (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,1"))
   (rule "inEqSimp_subsumption1" (formula "1") (term "0,0") (ifseqformula "14"))
   (rule "leq_literals" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,1"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "1") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,0,0,0,0,1"))
   (rule "commute_or_2" (formula "2") (term "0"))
   (rule "Class_invariant_axiom_for_KIMapImpl" (formula "1") (term "0") (inst "j=j") (inst "i=i_1") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
   (rule "eqSymm" (formula "1") (term "0,1,0,0,1,0"))
   (rule "eqSymm" (formula "1") (term "0,0,0,0"))
   (rule "eqSymm" (formula "1") (term "0,1,0,0,0"))
   (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0"))
   (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0,0"))
   (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "16"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1,0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0"))
   (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "commute_or" (formula "6") (term "0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
   (rule "ifthenelse_split" (formula "3") (term "0"))
   (branch "self.count = 1 + i TRUE"
      (rule "eqSymm" (formula "4"))
      (rule "applyEq" (formula "1") (term "1,1,0,0") (ifseqformula "3"))
      (rule "applyEq" (formula "23") (term "0,2,0") (ifseqformula "4"))
      (rule "getOfMapEmpty" (formula "23") (term "2,0"))
      (rule "applyEq" (formula "18") (term "1,1,0,0,0,0") (ifseqformula "3"))
      (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "3"))
      (rule "applyEq" (formula "6") (term "0,0,0,0,0") (ifseqformula "4"))
      (rule "getOfMapEmpty" (formula "6") (term "0,0,0,0"))
      (rule "eqSymm" (formula "6") (term "0,0,0"))
      (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "3"))
      (rule "polySimp_addAssoc" (formula "17") (term "1"))
      (rule "add_literals" (formula "17") (term "0,1"))
      (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "5"))
      (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
      (rule "add_literals" (formula "5") (term "1,0"))
      (rule "times_zero_1" (formula "5") (term "0"))
      (rule "leq_literals" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "applyEq" (formula "15") (term "0") (ifseqformula "3"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "3"))
      (rule "inEqSimp_homoInEq1" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15"))
      (rule "mul_literals" (formula "15") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1"))
      (rule "polySimp_elimOne" (formula "7") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "12"))
      (rule "leq_literals" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "7"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
      (rule "inEqSimp_homoInEq1" (formula "7"))
      (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
      (rule "add_literals" (formula "7") (term "1,0"))
      (rule "times_zero_1" (formula "7") (term "0"))
      (rule "leq_literals" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
      (rule "inEqSimp_homoInEq0" (formula "7"))
      (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
      (rule "add_literals" (formula "7") (term "1,0"))
      (rule "times_zero_1" (formula "7") (term "0"))
      (rule "qeq_literals" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "applyEq" (formula "20") (term "0,2,0,0,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "eqSymm" (formula "20"))
      (rule "applyEq" (formula "20") (term "0,2,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "closeTrue" (formula "20"))
   )
   (branch "self.count = 1 + i FALSE"
      (rule "inEqSimp_strengthen1" (formula "4") (ifseqformula "18"))
      (rule "polySimp_addAssoc" (formula "4") (term "1"))
      (rule "add_literals" (formula "4") (term "0,1"))
      (rule "inEqSimp_contradEq7" (formula "18") (ifseqformula "4"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
      (rule "mul_literals" (formula "18") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
      (rule "polySimp_addComm1" (formula "18") (term "0,0,0"))
      (rule "add_literals" (formula "18") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
      (rule "add_literals" (formula "18") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "18") (term "1,0,0"))
      (rule "add_zero_right" (formula "18") (term "0,0"))
      (rule "leq_literals" (formula "18") (term "0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "false_right" (formula "18"))
      (rule "Contract_axiom_for_compute_in_KIMapImpl" (formula "1") (term "0,0,1,0") (inst "j=j"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "22")) (ifInst ""  (formula "3")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "1") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,1"))
      (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,1"))
      (rule "mul_literals" (formula "1") (term "0,1,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,1"))
      (rule "inEqSimp_subsumption1" (formula "1") (term "1,0") (ifseqformula "5"))
      (rule "inEqSimp_homoInEq0" (formula "1") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
      (rule "qeq_literals" (formula "1") (term "0,1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_subsumption1" (formula "1") (term "0") (ifseqformula "13"))
      (rule "leq_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "nnf_imp2or" (formula "1") (term "0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,0,0,0"))
      (rule "Definition_axiom_for_compute_in_KIMapImpl" (formula "1") (term "0,0,1,0") (ifseqformula "10"))
      (rule "translateJavaAddInt" (formula "1") (term "2,0,2,0,0,1,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "2,0,2,0,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,2,0,2,0,0,1,0"))
      (rule "applyEq" (formula "1") (term "2,0,0,1,0") (ifseqformula "3"))
      (rule "inEqSimp_contradEq7" (formula "1") (term "0,0,0,1,0") (ifseqformula "4"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,0,0,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,0,0,0,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0,0,0,1,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,0,0,0,1,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,1,0"))
      (rule "leq_literals" (formula "1") (term "0,0,0,0,1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "Class_invariant_axiom_for_KIMapImpl" (formula "2") (inst "j=j") (inst "i=i_1") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "4"))
      (rule "notLeft" (formula "3"))
      (rule "eqSymm" (formula "5") (term "0,1,0,0"))
      (rule "eqSymm" (formula "2"))
      (rule "eqSymm" (formula "20"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "4") (term "0,1,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "2"))
      (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "3") (term "0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "3") (term "0,1,0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "nnf_imp2or" (formula "2") (term "0,0"))
      (rule "nnf_notAnd" (formula "2") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "2") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "2") (term "1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0,0,0"))
      (rule "add_literals" (formula "2") (term "0,0,0,1,0,0,0,0"))
      (rule "add_zero_left" (formula "2") (term "0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "2") (term "0,0,0,0,0"))
      (rule "times_zero_1" (formula "2") (term "1,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "2") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0,0,0"))
      (rule "mul_literals" (formula "2") (term "1,0,0,0,0,0"))
      (rule "commute_or_2" (formula "1") (term "0"))
      (rule "ifthenelse_split" (formula "22") (term "0"))
      (branch "self.keys[j_0] = self.keys[i] TRUE"
         (rule "eqSymm" (formula "23"))
         (rule "commute_or" (formula "2") (term "0,0"))
         (rule "commute_or_2" (formula "2") (term "0,0,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "7"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1") (ifseqformula "8"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "allLeft" (formula "6") (inst "t=add(Z(1(#)), i)"))
         (rule "inEqSimp_commuteGeq" (formula "6") (term "1"))
         (rule "inEqSimp_homoInEq0" (formula "6") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,1,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,1,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,1,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "6") (term "0,0,1,0"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,1,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,1,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,1,0"))
         (rule "qeq_literals" (formula "6") (term "1,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_contradInEq1" (formula "6") (term "1") (ifseqformula "5"))
         (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "6") (term "0,0,0,1"))
         (rule "add_literals" (formula "6") (term "0,0,0,0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
         (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "6") (term "0,0,1"))
         (rule "leq_literals" (formula "6") (term "0,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "allLeft" (formula "19") (inst "t=add(Z(1(#)), i)"))
         (rule "eqSymm" (formula "19") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0"))
         (rule "inEqSimp_commuteGeq" (formula "19") (term "1,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0,0,0") (ifseqformula "5"))
         (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "19") (term "0,0,0,1,0,0,0"))
         (rule "add_literals" (formula "19") (term "0,0,0,0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "19") (term "1,1,0,0,1,0,0,0"))
         (rule "times_zero_1" (formula "19") (term "1,0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "19") (term "0,0,1,0,0,0"))
         (rule "leq_literals" (formula "19") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "allLeft" (formula "20") (inst "t=j_0"))
         (rule "eqSymm" (formula "20") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "20") (term "1,0,0"))
         (rule "inEqSimp_commuteGeq" (formula "20") (term "1,0,0,0"))
         (rule "applyEq" (formula "20") (term "1,0,1,0") (ifseqformula "3"))
         (rule "inEqSimp_contradInEq1" (formula "20") (term "1,0,0,0") (ifseqformula "9"))
         (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "20") (term "1,1,0,0,1,0,0,0"))
         (rule "times_zero_1" (formula "20") (term "1,0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,1,0,0,0"))
         (rule "leq_literals" (formula "20") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "allLeft" (formula "20") (inst "t=i"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "14"))
         (rule "qeq_literals" (formula "20") (term "0,0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_antiSymm" (formula "8") (ifseqformula "20"))
         (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "8"))
         (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
         (rule "inEqSimp_homoInEq1" (formula "9"))
         (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
         (rule "add_literals" (formula "9") (term "1,0"))
         (rule "times_zero_1" (formula "9") (term "0"))
         (rule "leq_literals" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "applyEq" (formula "20") (term "0") (ifseqformula "8"))
         (rule "inEqSimp_homoInEq0" (formula "20"))
         (rule "polySimp_pullOutFactor1" (formula "20") (term "0"))
         (rule "add_literals" (formula "20") (term "1,0"))
         (rule "times_zero_1" (formula "20") (term "0"))
         (rule "qeq_literals" (formula "20"))
         (rule "true_left" (formula "20"))
         (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "8"))
         (rule "applyEq" (formula "26") (term "0,2,0") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "closeTrue" (formula "26"))
      )
      (branch "self.keys[j_0] = self.keys[i] FALSE"
         (rule "commute_or" (formula "1") (term "0,0"))
         (rule "commute_or_2" (formula "1") (term "0,0,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0") (ifseqformula "6"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0") (ifseqformula "7"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "allLeft" (formula "17") (inst "t=add(Z(1(#)), i)"))
         (rule "eqSymm" (formula "17") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0"))
         (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0"))
         (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "17") (term "0,0,0,1,0,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0"))
         (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0"))
         (rule "leq_literals" (formula "17") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "allLeft" (formula "5") (inst "t=j_0"))
         (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "25"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "8"))
         (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
         (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "5") (term "0,0,1"))
         (rule "leq_literals" (formula "5") (term "0,1"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "5"))
         (rule "applyEq" (formula "25") (term "0,2,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "closeTrue" (formula "25"))
      )
   )
)
(branch "CUT: self.count >= 1 + i FALSE"
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "16"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "inEqSimp_geqRight" (formula "14"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
   (rule "polySimp_elimOne" (formula "1") (term "1"))
   (rule "inEqSimp_contradEq3" (formula "2") (term "0,0") (ifseqformula "1"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0,0,0,0"))
   (rule "polySimp_addComm0" (formula "2") (term "0,0,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,0,0"))
   (rule "add_literals" (formula "2") (term "1,1,0,0,0,0"))
   (rule "times_zero_1" (formula "2") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "2") (term "0,0,0,0"))
   (rule "qeq_literals" (formula "2") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
   (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "getOfMapEmpty" (formula "20") (term "0"))
   (rule "applyEq" (formula "4") (term "0") (ifseqformula "10"))
   (rule "inEqSimp_homoInEq1" (formula "4"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
   (rule "inEqSimp_homoInEq0" (formula "1"))
   (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,0"))
   (rule "times_zero_1" (formula "1") (term "0"))
   (rule "qeq_literals" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "9"))
   (rule "applyEq" (formula "12") (term "0") (ifseqformula "9"))
   (rule "applyEq" (formula "10") (term "0") (ifseqformula "9"))
   (rule "inEqSimp_homoInEq1" (formula "10"))
   (rule "polySimp_pullOutFactor1" (formula "10") (term "0"))
   (rule "add_literals" (formula "10") (term "1,0"))
   (rule "times_zero_1" (formula "10") (term "0"))
   (rule "leq_literals" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "applyEq" (formula "12") (term "1,1,0,0,0,0") (ifseqformula "9"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1"))
   (rule "polySimp_rightDist" (formula "3") (term "1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
   (rule "mul_literals" (formula "3") (term "0,1"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1"))
   (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "3"))
   (rule "andLeft" (formula "2"))
   (rule "inEqSimp_homoInEq1" (formula "2"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "polySimp_rightDist" (formula "2") (term "1,0"))
   (rule "mul_literals" (formula "2") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "2") (term "0"))
   (rule "polySimp_addComm0" (formula "2") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
   (rule "add_literals" (formula "2") (term "1,1,0"))
   (rule "times_zero_1" (formula "2") (term "1,0"))
   (rule "add_zero_right" (formula "2") (term "0"))
   (rule "leq_literals" (formula "2"))
   (rule "closeFalse" (formula "2"))
)
)
}
