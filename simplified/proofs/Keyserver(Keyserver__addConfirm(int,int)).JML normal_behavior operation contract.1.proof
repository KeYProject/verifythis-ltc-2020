\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Feb 25 12:01:41 CET 2020
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_OFF
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "..";

\proofObligation "#Proof Obligation Settings
#Tue Feb 25 12:01:41 CET 2020
contract=Keyserver[Keyserver\\:\\:addConfirm(int,int)].JML normal_behavior operation contract.1
name=Keyserver[Keyserver\\:\\:addConfirm(int,int)].JML normal_behavior operation contract.1
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "sdg" ) (keyVersion "5c71d010aea2ef9b4a159569bd7f9d3d7b0f4027"))

(autoModeTime "4299")

(branch "dummy ID"
(rule "insert_constant_value" (formula "1") (term "1,1,1,0,0,1,0,1,0") (newnames "id,code,self,result,exc,heapAtPre,o,f"))
(rule "expand_inInt" (formula "1") (term "0,1,0,0,0"))
(rule "expand_inInt" (formula "1") (term "1,0,0,0,1,0,1,0"))
(rule "expand_inInt" (formula "1") (term "1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,0,1,0,0,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,0,0,0,1,0,1,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,0,0,0,1,0,1,0"))
(rule "replace_int_MIN" (formula "1") (term "0,1,1,1,0,0,0"))
(rule "replace_int_MAX" (formula "1") (term "1,0,1,1,0,0,0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "12") (term "0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "12") (term "1"))
(rule "sequentialToParallel2" (formula "12"))
(rule "simplifyUpdate3" (formula "12") (term "1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,0,1"))
(rule "Class_invariant_axiom_for_Keyserver" (formula "10") (inst "j=j") (inst "i=i") (ifseqformula "3"))
(rule "expand_inInt" (formula "10") (term "1,0,0,0,1"))
(rule "expand_inInt" (formula "10") (term "1,0,0,0,0,1"))
(rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,0,1"))
(rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,0,1"))
(rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,0,0,1"))
(rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,0,0,1"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "12"))
(rule "notLeft" (formula "14"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "13"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "notLeft" (formula "13"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "12"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "13"))
(rule "notLeft" (formula "12"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "12"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "13"))
(rule "notLeft" (formula "12"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "10"))
(rule "eqSymm" (formula "17") (term "0,1,0,0"))
(rule "eqSymm" (formula "26"))
(rule "eqSymm" (formula "25"))
(rule "eqSymm" (formula "24"))
(rule "eqSymm" (formula "23"))
(rule "eqSymm" (formula "22"))
(rule "eqSymm" (formula "20"))
(rule "eqSymm" (formula "18"))
(rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0,0,0"))
(rule "polySimp_addComm1" (formula "17") (term "0,1,0,0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "15"))
(rule "inEqSimp_sepNegMonomial0" (formula "17") (term "1,0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "17") (term "0,1,0,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "17") (term "0,1,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,0,0"))
(rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,0,0"))
(rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "16"))
(rule "mul_literals" (formula "15") (term "0,0"))
(rule "add_zero_left" (formula "15") (term "0"))
(rule "nnf_imp2or" (formula "18") (term "0,0"))
(rule "nnf_notAnd" (formula "18") (term "0,0,0"))
(rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
(rule "nnf_notAnd" (formula "18") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "18") (term "0,1,0,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,0,0"))
(rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,1,0,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,1,0,0,0"))
(rule "inEqSimp_notGeq" (formula "18") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,0,1,1,0,0,0"))
(rule "add_literals" (formula "18") (term "0,0,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "18") (term "1,1,1,0,0,0"))
(rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0"))
(rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0"))
(rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0"))
(rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
(rule "nnf_notAnd" (formula "18") (term "1,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "18") (term "0,1,0,0,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,0,0,0"))
(rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,1,0,0,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,1,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "18") (term "1,1,0,0,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,0,1,1,0,0,0,0"))
(rule "add_literals" (formula "18") (term "0,0,1,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,0,0,0,0"))
(rule "mul_literals" (formula "18") (term "1,1,1,0,0,0,0"))
(rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0,0"))
(rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0,0"))
(rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0,0"))
(rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0,0"))
(rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0,0"))
(rule "commute_and" (formula "9") (term "0,1,0,0,1"))
(rule "commute_and_2" (formula "9") (term "0,0,0,1"))
(rule "methodBodyExpand" (formula "35") (term "1") (newnames "heapBefore_addConfirm,savedHeapBefore_addConfirm"))
(rule "simplifyUpdate2" (formula "35") (term "1"))
(rule "variableDeclarationAssign" (formula "35") (term "1"))
(rule "variableDeclaration" (formula "35") (term "1") (newnames "pos"))
(rule "commute_or" (formula "18") (term "1,0,0,0"))
(rule "commute_or_2" (formula "18") (term "0,0,0,0"))
(rule "commute_or_2" (formula "18") (term "0,0,0,0,0"))
(rule "shift_paren_or" (formula "18") (term "0,0,0,0,0,0"))
(rule "commute_or_2" (formula "18") (term "0,0,0"))
(rule "commute_or_2" (formula "18") (term "0,0,0,0"))
(rule "shift_paren_or" (formula "18") (term "0,0,0,0,0"))
(rule "commute_or_2" (formula "18") (term "0,0,0"))
(rule "commute_or_2" (formula "18") (term "0,0,0,0,0,0,0"))
(rule "commute_and" (formula "9") (term "1,0,0,0,0,1"))
(rule "commute_or" (formula "18") (term "0,0,0,0,0,0,0,0"))
(rule "inEqSimp_or_subsumption0" (formula "18") (term "0,0,0,0,0,0,0,0"))
(rule "qeq_literals" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
(rule "concrete_and_2" (formula "18") (term "0,0,0,0,0,0,0,0,0"))
(rule "concrete_or_2" (formula "18") (term "0,0,0,0,0,0,0,0"))
(rule "shift_paren_and" (formula "9") (term "0,0,0,0,1"))
(rule "shift_paren_and" (formula "9") (term "0,0,1"))
(rule "shift_paren_and" (formula "9") (term "0,0,0,1"))
(rule "commute_and" (formula "9") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_and_subsumption2" (formula "9") (term "0,0,0,0,0,0,0,1"))
(rule "leq_literals" (formula "9") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "concrete_or_1" (formula "9") (term "0,0,0,0,0,0,0,0,1"))
(rule "concrete_and_1" (formula "9") (term "0,0,0,0,0,0,0,1"))
(rule "arrayLengthNotNegative" (formula "14") (term "0"))
(rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
(rule "arrayLengthIsAnInt" (formula "14") (term "0"))
(rule "expand_inInt" (formula "14"))
(rule "replace_int_MIN" (formula "14") (term "0,1"))
(rule "replace_int_MAX" (formula "14") (term "1,0"))
(rule "andLeft" (formula "14"))
(rule "inEqSimp_commuteLeq" (formula "15"))
(rule "applyEq" (formula "14") (term "0") (ifseqformula "16"))
(rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
(rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "17"))
(rule "leq_literals" (formula "15") (term "0"))
(rule "concrete_or_1" (formula "15"))
(rule "true_left" (formula "15"))
(rule "arrayLengthIsAnInt" (formula "13") (term "0"))
(rule "expand_inInt" (formula "13"))
(rule "replace_int_MIN" (formula "13") (term "0,1"))
(rule "replace_int_MAX" (formula "13") (term "1,0"))
(rule "andLeft" (formula "13"))
(rule "inEqSimp_commuteLeq" (formula "14"))
(rule "applyEq" (formula "13") (term "0") (ifseqformula "15"))
(rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
(rule "inEqSimp_subsumption1" (formula "13") (ifseqformula "17"))
(rule "leq_literals" (formula "13") (term "0"))
(rule "concrete_or_1" (formula "13"))
(rule "true_left" (formula "13"))
(rule "arrayLengthNotNegative" (formula "12") (term "0"))
(rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
(rule "arrayLengthIsAnInt" (formula "12") (term "0"))
(rule "expand_inInt" (formula "12"))
(rule "replace_int_MIN" (formula "12") (term "0,1"))
(rule "replace_int_MAX" (formula "12") (term "1,0"))
(rule "andLeft" (formula "12"))
(rule "inEqSimp_commuteLeq" (formula "13"))
(rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
(rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
(rule "inEqSimp_subsumption1" (formula "12") (ifseqformula "17"))
(rule "leq_literals" (formula "12") (term "0"))
(rule "concrete_or_1" (formula "12"))
(rule "true_left" (formula "12"))
(rule "arrayLengthNotNegative" (formula "13") (term "0"))
(rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
(rule "arrayLengthNotNegative" (formula "11") (term "0"))
(rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
(rule "arrayLengthIsAnInt" (formula "11") (term "0"))
(rule "expand_inInt" (formula "11"))
(rule "replace_int_MIN" (formula "11") (term "0,1"))
(rule "replace_int_MAX" (formula "11") (term "1,0"))
(rule "andLeft" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
(rule "applyEq" (formula "11") (term "0") (ifseqformula "13"))
(rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "17"))
(rule "leq_literals" (formula "11") (term "0"))
(rule "concrete_or_1" (formula "11"))
(rule "true_left" (formula "11"))
(rule "arrayLengthNotNegative" (formula "10") (term "0"))
(rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
(rule "arrayLengthIsAnInt" (formula "10") (term "0"))
(rule "expand_inInt" (formula "10"))
(rule "replace_int_MIN" (formula "10") (term "0,1"))
(rule "replace_int_MAX" (formula "10") (term "1,0"))
(rule "andLeft" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
(rule "applyEq" (formula "10") (term "0") (ifseqformula "12"))
(rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "17"))
(rule "leq_literals" (formula "10") (term "0"))
(rule "concrete_or_1" (formula "10"))
(rule "true_left" (formula "10"))
 (builtin "Use Operation Contract" (formula "36") (newnames "heapBefore_posOfId,result_0,exc_0") (contract "Keyserver[Keyserver::posOfId(int)].JML normal_behavior operation contract.0"))
(branch "Post (posOfId)"
   (rule "expand_inInt" (formula "20") (term "1,0,1,1"))
   (rule "expand_inInt" (formula "20") (term "1,0,0,1,0,1,0,1,1,1"))
   (rule "simplifyUpdate2" (formula "37"))
   (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,1,1"))
   (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,1,1"))
   (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1,0,1,0,1,1,1"))
   (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1,0,1,0,1,1,1"))
   (rule "simplifyUpdate2" (formula "20"))
   (rule "simplifyUpdate2" (formula "20") (term "1"))
   (rule "andLeft" (formula "20"))
   (rule "simplifyUpdate2" (formula "20"))
   (rule "andLeft" (formula "21"))
   (rule "simplifyUpdate2" (formula "22"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "21"))
   (rule "simplifyUpdate2" (formula "21"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "24"))
   (rule "simplifyUpdate2" (formula "25"))
   (rule "applyOnRigidFormula" (formula "23"))
   (rule "simplifyUpdate2" (formula "23") (term "0"))
   (rule "applyOnRigidFormula" (formula "24"))
   (rule "simplifyUpdate2" (formula "24") (term "0"))
   (rule "applyOnRigidFormula" (formula "23") (term "1"))
   (rule "applyOnRigidFormula" (formula "24") (term "1"))
   (rule "simplifyUpdate2" (formula "24") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1"))
   (rule "simplifyUpdate2" (formula "23") (term "0,0,1"))
   (rule "applyOnRigidFormula" (formula "24") (term "0,1"))
   (rule "simplifyUpdate1" (formula "24") (term "0,0,1"))
   (rule "applyOnPV" (formula "24") (term "1,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "1,0,1"))
   (rule "applyOnRigidFormula" (formula "23") (term "0,1,0,1"))
   (rule "applyOnPV" (formula "23") (term "1,0,1,0,1"))
   (rule "simplifyUpdate1" (formula "23") (term "0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1"))
   (rule "polySimp_addComm1" (formula "24") (term "0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "21"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0,1"))
   (rule "assignment" (formula "43") (term "1"))
   (rule "sequentialToParallel2" (formula "43"))
   (rule "simplifyUpdate3" (formula "43") (term "1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1,1"))
   (rule "polySimp_mulLiterals" (formula "24") (term "0,1,1"))
   (rule "polySimp_elimOne" (formula "24") (term "0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,1"))
   (rule "inEqSimp_subsumption1" (formula "21") (ifseqformula "22"))
   (rule "leq_literals" (formula "21") (term "0"))
   (rule "concrete_or_1" (formula "21"))
   (rule "true_left" (formula "21"))
   (rule "nnf_imp2or" (formula "22") (term "0,1"))
   (rule "nnf_notAnd" (formula "22") (term "0,0,1"))
   (rule "nnf_notAnd" (formula "22") (term "0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,1"))
   (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,1"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,1"))
   (rule "nnf_notAnd" (formula "22") (term "1,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "22") (term "0,1,0,0,1"))
   (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0,1"))
   (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,1,0,0,1"))
   (rule "mul_literals" (formula "22") (term "1,0,1,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "22") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0,1"))
   (rule "add_literals" (formula "22") (term "0,0,1,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "22") (term "1,1,1,0,0,1"))
   (rule "Class_invariant_axiom_for_Keyserver" (formula "24") (inst "j=j") (inst "i=i") (ifseqformula "3"))
   (rule "expand_inInt" (formula "24") (term "1,0,0,0,1"))
   (rule "expand_inInt" (formula "24") (term "1,0,0,0,0,1"))
   (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,0,1"))
   (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,0,1"))
   (rule "replace_int_MIN" (formula "24") (term "0,1,1,0,0,0,0,1"))
   (rule "replace_int_MAX" (formula "24") (term "1,0,1,0,0,0,0,1"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "24"))
   (rule "notLeft" (formula "27"))
   (rule "notLeft" (formula "26"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "26"))
   (rule "notLeft" (formula "28"))
   (rule "notLeft" (formula "25"))
   (rule "andLeft" (formula "24"))
   (rule "notLeft" (formula "27"))
   (rule "notLeft" (formula "26"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "26"))
   (rule "notLeft" (formula "25"))
   (rule "andLeft" (formula "24"))
   (rule "notLeft" (formula "27"))
   (rule "notLeft" (formula "26"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "24"))
   (rule "notLeft" (formula "27"))
   (rule "notLeft" (formula "26"))
   (rule "andLeft" (formula "24"))
   (rule "notLeft" (formula "26"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "24"))
   (rule "notLeft" (formula "27"))
   (rule "andLeft" (formula "26"))
   (rule "andLeft" (formula "24"))
   (rule "notLeft" (formula "26"))
   (rule "notLeft" (formula "27"))
   (rule "notLeft" (formula "26"))
   (rule "notLeft" (formula "25"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "24"))
   (rule "notLeft" (formula "26"))
   (rule "notLeft" (formula "24"))
   (rule "notLeft" (formula "24"))
   (rule "eqSymm" (formula "25") (term "0,1,0,0"))
   (rule "eqSymm" (formula "33"))
   (rule "eqSymm" (formula "32"))
   (rule "eqSymm" (formula "31"))
   (rule "eqSymm" (formula "30"))
   (rule "eqSymm" (formula "29"))
   (rule "eqSymm" (formula "28"))
   (rule "eqSymm" (formula "27"))
   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "25") (term "0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "24"))
   (rule "inEqSimp_sepNegMonomial0" (formula "24") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "24") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,1,0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "24") (term "0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,1,1,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "0,1,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,1,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "1,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "1,1,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,1,1,0,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,1,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,1,1,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "0,1,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,1,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "24") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "24") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "0,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "24") (term "0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "24") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "24") (term "0,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "24") (term "0,0,1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "24") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "24") (term "0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0,0"))
   (rule "commute_and" (formula "23") (term "1"))
   (rule "commute_or_2" (formula "22") (term "0,0,1"))
   (rule "commute_or" (formula "24") (term "1,0,0,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "40"))
   (rule "concrete_or_2" (formula "15"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "13") (term "0,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "42"))
   (rule "concrete_or_2" (formula "13"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "40"))
   (rule "concrete_or_2" (formula "12"))
   (rule "commute_or" (formula "27") (term "1,0,0,0,0"))
   (rule "ifElseUnfold" (formula "45") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "45") (term "1") (newnames "x"))
   (rule "commute_or_2" (formula "27") (term "0,0,0,0"))
   (rule "commute_or" (formula "25") (term "1,0,0,0,1"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "40"))
   (rule "concrete_or_2" (formula "11"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "40"))
   (rule "concrete_or_2" (formula "10"))
   (rule "commute_or_2" (formula "29") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "27") (term "0,0,0,1"))
   (rule "commute_or" (formula "27") (term "0,0,0,0,1"))
   (rule "inEqSimp_or_subsumption0" (formula "27") (term "0,0,0,0,1"))
   (rule "qeq_literals" (formula "27") (term "0,0,0,0,0,0,1"))
   (rule "concrete_and_2" (formula "27") (term "0,0,0,0,0,1"))
   (rule "concrete_or_2" (formula "27") (term "0,0,0,0,1"))
   (rule "shift_paren_or" (formula "29") (term "0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "29") (term "0,0,0"))
   (rule "commute_or_2" (formula "29") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "29") (term "0,0,0,0,0"))
   (rule "commute_or_2" (formula "29") (term "0,0,0"))
   (rule "commute_or" (formula "29") (term "0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_or_subsumption0" (formula "29") (term "0,0,0,0,0,0,0,0"))
   (rule "qeq_literals" (formula "29") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_2" (formula "29") (term "0,0,0,0,0,0,0,0,0"))
   (rule "concrete_or_2" (formula "29") (term "0,0,0,0,0,0,0,0"))
   (rule "compound_assignment_3_nonsimple" (formula "46") (term "1"))
   (rule "ifElseUnfold" (formula "46") (term "1") (inst "#boolv=x_1"))
   (rule "variableDeclaration" (formula "46") (term "1") (newnames "x_1"))
   (rule "compound_assignment_2" (formula "46") (term "1") (inst "#v=x_2"))
   (rule "variableDeclarationAssign" (formula "46") (term "1"))
   (rule "variableDeclaration" (formula "46") (term "1") (newnames "x_2"))
   (rule "compound_assignment_3_nonsimple" (formula "46") (term "1"))
   (rule "ifElseUnfold" (formula "46") (term "1") (inst "#boolv=x_3"))
   (rule "variableDeclaration" (formula "46") (term "1") (newnames "x_3"))
   (rule "compound_assignment_2" (formula "46") (term "1") (inst "#v=x_4"))
   (rule "variableDeclarationAssign" (formula "46") (term "1"))
   (rule "variableDeclaration" (formula "46") (term "1") (newnames "x_4"))
   (rule "compound_assignment_3_nonsimple" (formula "46") (term "1"))
   (rule "ifElseUnfold" (formula "46") (term "1") (inst "#boolv=x_5"))
   (rule "variableDeclaration" (formula "46") (term "1") (newnames "x_5"))
   (rule "compound_assignment_2" (formula "46") (term "1") (inst "#v=x_6"))
   (rule "variableDeclarationAssign" (formula "46") (term "1"))
   (rule "variableDeclaration" (formula "46") (term "1") (newnames "x_6"))
   (rule "greater_equal_than_comparison_simple" (formula "46") (term "1"))
   (rule "sequentialToParallel2" (formula "46"))
   (rule "simplifyUpdate3" (formula "46") (term "1,0"))
   (rule "applyOnElementary" (formula "46") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "46") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "46") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "46") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "46") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "46") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "46") (term "0,0,0,1,0"))
   (rule "compound_assignment_1_new" (formula "46") (term "1"))
   (rule "sequentialToParallel2" (formula "46"))
   (rule "simplifyUpdate2" (formula "46"))
   (rule "simplifyUpdate3" (formula "46") (term "1,0"))
   (rule "applyOnElementary" (formula "46") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "46") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "46") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "46") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "46") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "46") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "46") (term "1,0,0,1,0"))
   (rule "ifthenelse_concrete3" (formula "46") (term "0,0,1,0"))
   (rule "boolean_not_equal_2" (formula "46") (term "1,0,0,1,0"))
   (rule "concrete_or_4" (formula "46") (term "0,0,1,0"))
   (rule "ifElseSplit" (formula "46"))
   (branch "if x_5 true"
      (rule "simplifyUpdate2" (formula "47"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "ifthenelse_concrete4" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "30"))
      (rule "concrete_impl_2" (formula "28"))
      (rule "true_left" (formula "28"))
      (rule "inEqSimp_geqRight" (formula "29"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "assignment" (formula "46") (term "1"))
      (rule "sequentialToParallel2" (formula "46"))
      (rule "simplifyUpdate3" (formula "46") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_subsumption0" (formula "26") (ifseqformula "1"))
      (rule "leq_literals" (formula "26") (term "0"))
      (rule "concrete_or_1" (formula "26"))
      (rule "true_left" (formula "26"))
      (rule "inEqSimp_antiSymm" (formula "26") (ifseqformula "1"))
      (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "26"))
      (rule "concrete_impl_1" (formula "28"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "26"))
      (rule "leq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
      (rule "qeq_literals" (formula "26"))
      (rule "true_left" (formula "26"))
      (rule "applyEq" (formula "44") (term "0,1,0,0") (ifseqformula "25"))
      (rule "compound_assignment_1_new" (formula "44") (term "1"))
      (rule "sequentialToParallel2" (formula "44"))
      (rule "simplifyUpdate2" (formula "44"))
      (rule "simplifyUpdate3" (formula "44") (term "1,0"))
      (rule "applyOnElementary" (formula "44") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "44") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "44") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "44") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "44") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "44") (term "0,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "44") (term "1,0,0,1,0"))
      (rule "boolean_not_equal_2" (formula "44") (term "0,0,1,0"))
      (rule "ifthenelse_false" (formula "44") (term "0,1,0"))
      (rule "ifElseSplit" (formula "44"))
      (branch "if x_3 true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "45"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "boolean_equal" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "assignment" (formula "44") (term "1"))
         (rule "sequentialToParallel2" (formula "44"))
         (rule "simplifyUpdate3" (formula "44") (term "1,0"))
         (rule "compound_assignment_1_new" (formula "44") (term "1"))
         (rule "sequentialToParallel2" (formula "44"))
         (rule "simplifyUpdate2" (formula "44"))
         (rule "simplifyUpdate3" (formula "44") (term "1,0"))
         (rule "applyOnElementary" (formula "44") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "44") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "44") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "44") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "44") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "44") (term "0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "44") (term "1,0,0,1,0"))
         (rule "boolean_not_equal_2" (formula "44") (term "0,0,1,0"))
         (rule "ifthenelse_false" (formula "44") (term "0,1,0"))
         (rule "ifElseSplit" (formula "44"))
         (branch "if x_1 true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "45"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifElseSkipThen" (formula "44") (term "1"))
            (rule "assignment" (formula "44") (term "1"))
            (rule "simplifyUpdate2" (formula "44") (term "1"))
            (rule "assignment" (formula "44") (term "1"))
            (rule "sequentialToParallel2" (formula "44"))
            (rule "simplifyUpdate2" (formula "44"))
            (rule "simplifyUpdate3" (formula "44") (term "1,0"))
            (rule "blockEmpty" (formula "44") (term "1"))
            (rule "methodCallReturn" (formula "44") (term "1"))
            (rule "assignment" (formula "44") (term "1"))
            (rule "sequentialToParallel2" (formula "44"))
            (rule "simplifyUpdate2" (formula "44"))
            (rule "simplifyUpdate3" (formula "44") (term "1,0"))
            (rule "applyOnElementary" (formula "44") (term "1,0"))
            (rule "applyOnPV" (formula "44") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "44") (term "1"))
            (rule "tryEmpty" (formula "44") (term "1"))
            (rule "emptyModality" (formula "44") (term "1"))
            (rule "applyOnRigidFormula" (formula "44"))
            (rule "simplifyUpdate2" (formula "44") (term "1"))
            (rule "simplifyUpdate2" (formula "44") (term "0"))
            (rule "applyOnRigidFormula" (formula "44") (term "1"))
            (rule "applyOnRigidFormula" (formula "44") (term "0"))
            (rule "simplifyUpdate2" (formula "44") (term "1,0"))
            (rule "simplifyUpdate2" (formula "44") (term "0,0"))
            (rule "applyOnRigidFormula" (formula "44") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "44") (term "1,0"))
            (rule "simplifyUpdate1" (formula "44") (term "1,1,0"))
            (rule "applyOnPV" (formula "44") (term "0,1,0"))
            (rule "eqClose" (formula "44") (term "1,0"))
            (rule "concrete_and_3" (formula "44") (term "0"))
            (rule "applyOnRigidFormula" (formula "44") (term "0,0,1"))
            (rule "simplifyUpdate1" (formula "44") (term "1,0,0,1"))
            (rule "applyOnRigidFormula" (formula "44") (term "0"))
            (rule "simplifyUpdate2" (formula "44") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "44") (term "0,0,0,1"))
            (rule "applyOnPV" (formula "44") (term "0,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "44") (term "1,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "44") (term "2,0,0,0,1"))
            (rule "eqClose" (formula "44") (term "0,0,1"))
            (rule "applyOnRigidFormula" (formula "44") (term "0,0"))
            (rule "simplifyUpdate1" (formula "44") (term "1,0,0"))
            (rule "applyOnPV" (formula "44") (term "0,0,0"))
            (rule "eqClose" (formula "44") (term "0,0"))
            (rule "concrete_and_1" (formula "44") (term "0"))
            (rule "all_unused" (formula "44") (term "0,1"))
            (rule "all_unused" (formula "44") (term "1"))
            (rule "concrete_and_3" (formula "44"))
            (rule "Class_invariant_axiom_for_Keyserver" (formula "44") (inst "j=j") (inst "i=i") (ifseqformula "3"))
            (rule "expand_inInt" (formula "44") (term "1,0,0,0,1"))
            (rule "expand_inInt" (formula "44") (term "1,0,0,0,0,1"))
            (rule "replace_int_MAX" (formula "44") (term "1,0,1,0,0,0,1"))
            (rule "replace_int_MIN" (formula "44") (term "0,1,1,0,0,0,1"))
            (rule "replace_int_MAX" (formula "44") (term "1,0,1,0,0,0,0,1"))
            (rule "replace_int_MIN" (formula "44") (term "0,1,1,0,0,0,0,1"))
            (rule "eqSymm" (formula "44") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "44") (term "0,1,0,0,1"))
            (rule "eqSymm" (formula "44") (term "0,1,1,0,0,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "44") (term "0,1,0,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "44") (term "0,0,1,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "44") (term "0,1,1,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "44") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "44") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_left" (formula "44") (term "0,1,0,0,0,0") (ifseqformula "11"))
            (rule "concrete_and_1" (formula "44") (term "1,0,0,0,0"))
            (rule "replace_known_left" (formula "44") (term "1,0,0,0,0") (ifseqformula "13"))
            (rule "concrete_and_3" (formula "44") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "37"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "38"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "39"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "42"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "41"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,1,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "30"))
            (rule "concrete_not_2" (formula "44") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_3" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "28"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "29"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "33"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "31"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "32"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "34"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "35"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0,0") (ifseqformula "36"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0,0") (ifseqformula "40"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,1,0,0,0,0,0") (ifseqformula "39"))
            (rule "concrete_not_2" (formula "44") (term "1,0,0,0,0,0"))
            (rule "concrete_and_3" (formula "44") (term "0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,1,0,0,0,0,0") (ifseqformula "38"))
            (rule "concrete_not_2" (formula "44") (term "1,0,0,0,0,0"))
            (rule "concrete_and_3" (formula "44") (term "0,0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0") (ifseqformula "37"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0,0") (ifseqformula "42"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "44") (term "0,0,0,0,0") (ifseqformula "41"))
            (rule "concrete_not_2" (formula "44") (term "0,0,0,0"))
            (rule "concrete_and_1" (formula "44") (term "0,0,0"))
            (rule "replace_known_left" (formula "44") (term "1,0,0,0") (ifseqformula "17"))
            (rule "concrete_and_3" (formula "44") (term "0,0,0"))
            (rule "replace_known_left" (formula "44") (term "0,0,0") (ifseqformula "15"))
            (rule "concrete_and_1" (formula "44") (term "0,0"))
            (rule "replace_known_left" (formula "44") (term "0,0") (ifseqformula "20"))
            (rule "concrete_and_1" (formula "44") (term "0"))
            (rule "replace_known_left" (formula "44") (term "1,0") (ifseqformula "23"))
            (rule "concrete_and_3" (formula "44") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,0,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "44") (term "0,1,0,0,0,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "44") (term "1,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "44") (term "1,1,0,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "44") (term "0"))
            (rule "replace_known_left" (formula "44") (term "0") (ifseqformula "22"))
            (rule "concrete_and_1" (formula "44"))
            (rule "allRight" (formula "44") (inst "sk=j_0"))
            (rule "allRight" (formula "44") (inst "sk=i_0"))
            (rule "impRight" (formula "44"))
            (rule "andLeft" (formula "1"))
            (rule "notRight" (formula "46"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "2"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
            (rule "leq_literals" (formula "6") (term "0"))
            (rule "concrete_or_1" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "30"))
            (rule "polySimp_rightDist" (formula "4") (term "0,0"))
            (rule "mul_literals" (formula "4") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "4"))
            (rule "polySimp_mulComm0" (formula "4") (term "1"))
            (rule "polySimp_rightDist" (formula "4") (term "1"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
            (rule "mul_literals" (formula "4") (term "0,1"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "7"))
            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
            (rule "mul_literals" (formula "3") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "3"))
            (rule "leq_literals" (formula "7") (term "0"))
            (rule "concrete_or_1" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "26"))
            (rule "polySimp_rightDist" (formula "5") (term "0,0"))
            (rule "mul_literals" (formula "5") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "add_literals" (formula "5") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "polySimp_elimOne" (formula "5") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "5"))
            (rule "leq_literals" (formula "8") (term "0"))
            (rule "concrete_or_1" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
            (rule "polySimp_rightDist" (formula "4") (term "0,0"))
            (rule "mul_literals" (formula "4") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "add_literals" (formula "4") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
            (rule "leq_literals" (formula "3") (term "0"))
            (rule "concrete_or_1" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "allLeft" (formula "32") (inst "t=j_0"))
            (rule "eqSymm" (formula "32") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
            (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0,0,0"))
            (rule "applyEq" (formula "32") (term "1,0,1,0") (ifseqformula "1"))
            (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "7"))
            (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
            (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "32") (term "0,0,1,0,0,0"))
            (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
            (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "32") (term "0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0,0") (ifseqformula "8"))
            (rule "qeq_literals" (formula "32") (term "0,1,0,0,0,0"))
            (rule "concrete_and_2" (formula "32") (term "1,0,0,0,0"))
            (rule "concrete_or_4" (formula "32") (term "0,0,0,0"))
            (rule "inEqSimp_contradInEq0" (formula "32") (term "1,0,0,0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "32") (term "0,1,0,0,0"))
            (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "32") (term "0,0,0"))
            (rule "cut_direct" (formula "17") (term "0"))
            (branch "CUT: code <= 0 TRUE"
               (rule "concrete_or_1" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "17"))
               (rule "leq_literals" (formula "14") (term "0"))
               (rule "concrete_or_1" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "allLeft" (formula "31") (inst "t=i_0"))
               (rule "eqClose" (formula "31") (term "0,1"))
               (rule "concrete_not_1" (formula "31") (term "1"))
               (rule "concrete_or_4" (formula "31"))
               (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "31") (term "1,0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "31") (term "0,1,0"))
               (rule "concrete_and_2" (formula "31") (term "1,0"))
               (rule "concrete_or_4" (formula "31") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
               (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "31") (term "0,0,1"))
               (rule "leq_literals" (formula "31") (term "0,1"))
               (rule "concrete_and_2" (formula "31") (term "1"))
               (rule "concrete_or_4" (formula "31"))
               (rule "inEqSimp_contradInEq1" (formula "31") (ifseqformula "2"))
               (rule "qeq_literals" (formula "31") (term "0"))
               (rule "concrete_and_2" (formula "31"))
               (rule "closeFalse" (formula "31"))
            )
            (branch "CUT: code <= 0 FALSE"
               (rule "concrete_or_2" (formula "17"))
               (rule "notLeft" (formula "17"))
               (rule "inEqSimp_leqRight" (formula "37"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "1"))
               (rule "leq_literals" (formula "16") (term "0"))
               (rule "concrete_or_1" (formula "16"))
               (rule "true_left" (formula "16"))
               (rule "nnf_ex2all" (formula "36"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0"))
               (rule "allLeft" (formula "32") (inst "t=i_0"))
               (rule "eqClose" (formula "32") (term "0,1"))
               (rule "concrete_not_1" (formula "32") (term "1"))
               (rule "concrete_or_4" (formula "32"))
               (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "32") (term "0,0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "32") (term "0,0,0"))
               (rule "concrete_and_2" (formula "32") (term "0,0"))
               (rule "concrete_or_2" (formula "32") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
               (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "32") (term "0,0,1"))
               (rule "leq_literals" (formula "32") (term "0,1"))
               (rule "concrete_and_2" (formula "32") (term "1"))
               (rule "concrete_or_4" (formula "32"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "32"))
               (rule "leq_literals" (formula "4") (term "0"))
               (rule "concrete_or_1" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "31"))
               (rule "qeq_literals" (formula "4") (term "0"))
               (rule "concrete_and_2" (formula "4"))
               (rule "closeFalse" (formula "4"))
            )
         )
         (branch "if x_1 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "45"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "28"))
            (rule "applyOnPV" (formula "28") (term "0"))
            (rule "simplifyUpdate1" (formula "28") (term "1"))
            (rule "boolean_equal" (formula "28"))
            (rule "closeTrue" (formula "28"))
         )
      )
      (branch "if x_3 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "45"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "28"))
         (rule "applyOnPV" (formula "28") (term "0"))
         (rule "simplifyUpdate1" (formula "28") (term "1"))
         (rule "boolean_equal" (formula "28"))
         (rule "closeTrue" (formula "28"))
      )
   )
   (branch "if x_5 false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "47"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "30"))
      (rule "simplifyUpdate1" (formula "30") (term "1"))
      (rule "applyOnPV" (formula "30") (term "0"))
      (rule "ifthenelse_concrete4" (formula "30"))
      (rule "boolean_not_equal_2" (formula "30") (term "1"))
      (rule "concrete_or_4" (formula "30"))
      (rule "notRight" (formula "30"))
      (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
      (rule "concrete_impl_1" (formula "29"))
      (rule "andLeft" (formula "29"))
      (rule "inEqSimp_contradEq7" (formula "28") (term "0") (ifseqformula "1"))
      (rule "add_zero_left" (formula "28") (term "0,0,0"))
      (rule "mul_literals" (formula "28") (term "0,0,0"))
      (rule "leq_literals" (formula "28") (term "0,0"))
      (rule "concrete_and_2" (formula "28") (term "0"))
      (rule "concrete_impl_2" (formula "28"))
      (rule "true_left" (formula "28"))
      (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "1"))
      (rule "leq_literals" (formula "27") (term "0"))
      (rule "concrete_or_1" (formula "27"))
      (rule "true_left" (formula "27"))
      (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "24"))
      (rule "polySimp_rightDist" (formula "27") (term "0,0"))
      (rule "mul_literals" (formula "27") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "27"))
      (rule "polySimp_mulComm0" (formula "27") (term "1"))
      (rule "polySimp_rightDist" (formula "27") (term "1"))
      (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
      (rule "mul_literals" (formula "27") (term "0,1"))
      (rule "polySimp_elimOne" (formula "27") (term "1,1"))
      (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "19"))
      (rule "polySimp_rightDist" (formula "27") (term "0,0"))
      (rule "mul_literals" (formula "27") (term "0,0,0"))
      (rule "polySimp_addComm1" (formula "27") (term "0"))
      (rule "add_literals" (formula "27") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "27"))
      (rule "polySimp_mulLiterals" (formula "27") (term "0"))
      (rule "polySimp_elimOne" (formula "27") (term "0"))
      (rule "inEqSimp_subsumption0" (formula "26") (ifseqformula "27"))
      (rule "leq_literals" (formula "26") (term "0"))
      (rule "concrete_or_1" (formula "26"))
      (rule "true_left" (formula "26"))
      (rule "greater_than_comparison_simple" (formula "47") (term "1"))
      (rule "sequentialToParallel2" (formula "47"))
      (rule "simplifyUpdate3" (formula "47") (term "1,0"))
      (rule "applyOnElementary" (formula "47") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "47") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "47") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "47") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "47") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "47") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "47") (term "0,0,0,1,0"))
      (rule "inEqSimp_gtToGeq" (formula "47") (term "0,0,1,0"))
      (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "47") (term "0,0,0,0,1,0"))
      (rule "blockEmpty" (formula "47") (term "1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,0,1,0"))
      (rule "mul_literals" (formula "47") (term "1,0,0,1,0"))
      (rule "compound_assignment_1_new" (formula "47") (term "1"))
      (rule "sequentialToParallel2" (formula "47"))
      (rule "simplifyUpdate2" (formula "47"))
      (rule "simplifyUpdate3" (formula "47") (term "1,0"))
      (rule "applyOnElementary" (formula "47") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "47") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "47") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "47") (term "2,0,1,0"))
      (rule "applyOnRigidFormula" (formula "47") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "47") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "47") (term "0,0,0,1,0"))
      (rule "ifthenelse_concrete3" (formula "47") (term "0,0,1,0"))
      (rule "boolean_not_equal_2" (formula "47") (term "1,0,0,1,0"))
      (rule "concrete_or_4" (formula "47") (term "0,0,1,0"))
      (rule "ifElseSplit" (formula "47"))
      (branch "if x_3 true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "48"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "ifthenelse_concrete4" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_geqRight" (formula "31"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "1"))
         (rule "concrete_or_1" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "assignment" (formula "47") (term "1"))
         (rule "sequentialToParallel2" (formula "47"))
         (rule "simplifyUpdate3" (formula "47") (term "1,0"))
         (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "1"))
         (rule "leq_literals" (formula "8") (term "0"))
         (rule "concrete_or_1" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "compound_assignment_1_new" (formula "46") (term "1"))
         (rule "sequentialToParallel2" (formula "46"))
         (rule "simplifyUpdate2" (formula "46"))
         (rule "simplifyUpdate3" (formula "46") (term "1,0"))
         (rule "applyOnElementary" (formula "46") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "46") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "46") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "46") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "46") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "46") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "46") (term "0,0,0,1,0"))
         (rule "boolean_not_equal_2" (formula "46") (term "0,0,1,0"))
         (rule "ifthenelse_false" (formula "46") (term "0,1,0"))
         (rule "ifElseSplit" (formula "46"))
         (branch "if x_1 true"
            (rule "simplifyUpdate2" (formula "47"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "ifElseSkipThen" (formula "47") (term "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "46") (term "1"))
            (rule "simplifyUpdate2" (formula "46") (term "1"))
            (rule "assignment" (formula "46") (term "1"))
            (rule "sequentialToParallel2" (formula "46"))
            (rule "simplifyUpdate2" (formula "46"))
            (rule "simplifyUpdate3" (formula "46") (term "1,0"))
            (rule "blockEmpty" (formula "46") (term "1"))
            (rule "methodCallReturn" (formula "46") (term "1"))
            (rule "assignment" (formula "46") (term "1"))
            (rule "sequentialToParallel2" (formula "46"))
            (rule "simplifyUpdate2" (formula "46"))
            (rule "simplifyUpdate3" (formula "46") (term "1,0"))
            (rule "applyOnElementary" (formula "46") (term "1,0"))
            (rule "applyOnPV" (formula "46") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "46") (term "1"))
            (rule "tryEmpty" (formula "46") (term "1"))
            (rule "emptyModality" (formula "46") (term "1"))
            (rule "applyOnRigidFormula" (formula "46"))
            (rule "simplifyUpdate2" (formula "46") (term "0"))
            (rule "simplifyUpdate2" (formula "46") (term "1"))
            (rule "applyOnRigidFormula" (formula "46") (term "0"))
            (rule "simplifyUpdate2" (formula "46") (term "0,0"))
            (rule "simplifyUpdate2" (formula "46") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "46") (term "1"))
            (rule "applyOnRigidFormula" (formula "46") (term "0,0"))
            (rule "simplifyUpdate2" (formula "46") (term "1,0,0"))
            (rule "applyOnRigidFormula" (formula "46") (term "1,0"))
            (rule "applyOnPV" (formula "46") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "46") (term "1,1,0"))
            (rule "eqClose" (formula "46") (term "1,0"))
            (rule "concrete_and_3" (formula "46") (term "0"))
            (rule "applyOnRigidFormula" (formula "46") (term "0,1"))
            (rule "applyOnRigidFormula" (formula "46") (term "0,0"))
            (rule "applyOnPV" (formula "46") (term "0,0,0"))
            (rule "simplifyUpdate1" (formula "46") (term "1,0,0"))
            (rule "eqClose" (formula "46") (term "0,0"))
            (rule "concrete_and_1" (formula "46") (term "0"))
            (rule "applyOnRigidFormula" (formula "46") (term "0,0,1"))
            (rule "simplifyUpdate1" (formula "46") (term "1,0,0,1"))
            (rule "applyOnRigidTerm" (formula "46") (term "0,0,0,1"))
            (rule "simplifyUpdate1" (formula "46") (term "1,0,0,0,1"))
            (rule "simplifyUpdate1" (formula "46") (term "2,0,0,0,1"))
            (rule "applyOnPV" (formula "46") (term "0,0,0,0,1"))
            (rule "eqClose" (formula "46") (term "0,0,1"))
            (rule "all_unused" (formula "46") (term "1"))
            (rule "all_unused" (formula "46") (term "1"))
            (rule "concrete_and_3" (formula "46"))
            (rule "Class_invariant_axiom_for_Keyserver" (formula "46") (inst "j=j") (inst "i=i") (ifseqformula "5"))
            (rule "expand_inInt" (formula "46") (term "1,0,0,0,1"))
            (rule "expand_inInt" (formula "46") (term "1,0,0,0,0,1"))
            (rule "replace_int_MAX" (formula "46") (term "1,0,1,0,0,0,1"))
            (rule "replace_int_MIN" (formula "46") (term "0,1,1,0,0,0,1"))
            (rule "replace_int_MAX" (formula "46") (term "1,0,1,0,0,0,0,1"))
            (rule "replace_int_MIN" (formula "46") (term "0,1,1,0,0,0,0,1"))
            (rule "eqSymm" (formula "46") (term "0,1,1,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "46") (term "0,1,0,0,1"))
            (rule "eqSymm" (formula "46") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "46") (term "0,0,1,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "46") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "46") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "46") (term "0,1,1,0,0,0,0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "46") (term "0,1,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_left" (formula "46") (term "1,1,0,0,0") (ifseqformula "17"))
            (rule "concrete_and_3" (formula "46") (term "1,0,0,0"))
            (rule "replace_known_left" (formula "46") (term "1,0,0,0") (ifseqformula "15"))
            (rule "concrete_and_3" (formula "46") (term "0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,1,1,0,0,0,0") (ifseqformula "43"))
            (rule "concrete_not_2" (formula "46") (term "1,1,0,0,0,0"))
            (rule "concrete_and_3" (formula "46") (term "1,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,1,0,0,0,0") (ifseqformula "44"))
            (rule "concrete_not_2" (formula "46") (term "1,0,0,0,0"))
            (rule "concrete_and_3" (formula "46") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,1,0,1,0,0,0,0") (ifseqformula "40"))
            (rule "concrete_not_2" (formula "46") (term "1,0,1,0,0,0,0"))
            (rule "concrete_and_3" (formula "46") (term "0,1,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,1,0,0,0,0") (ifseqformula "39"))
            (rule "concrete_not_2" (formula "46") (term "0,1,0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "1,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,1,0,0,0,0") (ifseqformula "41"))
            (rule "concrete_not_2" (formula "46") (term "1,0,0,0,0"))
            (rule "concrete_and_3" (formula "46") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "40"))
            (rule "concrete_not_2" (formula "46") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_3" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "39"))
            (rule "concrete_not_2" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "41"))
            (rule "concrete_not_2" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "44"))
            (rule "concrete_not_2" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "43"))
            (rule "concrete_not_2" (formula "46") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "31"))
            (rule "concrete_not_2" (formula "46") (term "1,0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_3" (formula "46") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "30"))
            (rule "concrete_not_2" (formula "46") (term "0,0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "0,0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "32"))
            (rule "concrete_not_2" (formula "46") (term "0,0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "0,0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "35"))
            (rule "concrete_not_2" (formula "46") (term "0,0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "34"))
            (rule "concrete_not_2" (formula "46") (term "1,0,0,0,0,0,0,0"))
            (rule "concrete_and_3" (formula "46") (term "0,0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,0,0,0,0,0,0") (ifseqformula "33"))
            (rule "concrete_not_2" (formula "46") (term "0,0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,0,0,0,0,0") (ifseqformula "36"))
            (rule "concrete_not_2" (formula "46") (term "0,0,0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,1,0,0,0,0,0") (ifseqformula "38"))
            (rule "concrete_not_2" (formula "46") (term "1,0,0,0,0,0"))
            (rule "concrete_and_3" (formula "46") (term "0,0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,0,0,0,0") (ifseqformula "37"))
            (rule "concrete_not_2" (formula "46") (term "0,0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "46") (term "0,0,0,0,0") (ifseqformula "42"))
            (rule "concrete_not_2" (formula "46") (term "0,0,0,0"))
            (rule "concrete_and_1" (formula "46") (term "0,0,0"))
            (rule "replace_known_left" (formula "46") (term "1,0,0,0") (ifseqformula "13"))
            (rule "concrete_and_3" (formula "46") (term "0,0,0"))
            (rule "replace_known_left" (formula "46") (term "0,0,0") (ifseqformula "11"))
            (rule "concrete_and_1" (formula "46") (term "0,0"))
            (rule "replace_known_left" (formula "46") (term "0,0") (ifseqformula "20"))
            (rule "concrete_and_1" (formula "46") (term "0"))
            (rule "replace_known_left" (formula "46") (term "1,0") (ifseqformula "23"))
            (rule "concrete_and_3" (formula "46") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0,0,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "46") (term "1,0,0,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,1,0,0,0,0,0,1"))
            (rule "polySimp_addComm1" (formula "46") (term "0,1,0,0,0,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "46") (term "0,0,0,0,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "46") (term "1,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "46") (term "1,1,0,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "46") (term "0"))
            (rule "replace_known_left" (formula "46") (term "0") (ifseqformula "22"))
            (rule "concrete_and_1" (formula "46"))
            (rule "allRight" (formula "46") (inst "sk=j_0"))
            (rule "allRight" (formula "46") (inst "sk=i_0"))
            (rule "impRight" (formula "46"))
            (rule "andLeft" (formula "1"))
            (rule "notRight" (formula "48"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "2"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
            (rule "leq_literals" (formula "6") (term "0"))
            (rule "concrete_or_1" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "6"))
            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
            (rule "mul_literals" (formula "3") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "3"))
            (rule "leq_literals" (formula "6") (term "0"))
            (rule "concrete_or_1" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "30"))
            (rule "polySimp_rightDist" (formula "5") (term "0,0"))
            (rule "mul_literals" (formula "5") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5"))
            (rule "polySimp_mulComm0" (formula "5") (term "1"))
            (rule "polySimp_rightDist" (formula "5") (term "1"))
            (rule "mul_literals" (formula "5") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "26"))
            (rule "polySimp_rightDist" (formula "5") (term "0,0"))
            (rule "mul_literals" (formula "5") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "5") (term "0"))
            (rule "add_literals" (formula "5") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "5"))
            (rule "polySimp_mulLiterals" (formula "5") (term "0"))
            (rule "polySimp_elimOne" (formula "5") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "5"))
            (rule "leq_literals" (formula "8") (term "0"))
            (rule "concrete_or_1" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
            (rule "polySimp_rightDist" (formula "4") (term "0,0"))
            (rule "mul_literals" (formula "4") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "4") (term "0"))
            (rule "add_literals" (formula "4") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
            (rule "leq_literals" (formula "3") (term "0"))
            (rule "concrete_or_1" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "allLeft" (formula "32") (inst "t=j_0"))
            (rule "eqSymm" (formula "32") (term "0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "32") (term "1,0,0"))
            (rule "inEqSimp_commuteGeq" (formula "32") (term "1,0,0,0"))
            (rule "applyEq" (formula "32") (term "1,0,1,0") (ifseqformula "1"))
            (rule "inEqSimp_contradInEq0" (formula "32") (term "1,0,0,0,0") (ifseqformula "5"))
            (rule "qeq_literals" (formula "32") (term "0,1,0,0,0,0"))
            (rule "concrete_and_2" (formula "32") (term "1,0,0,0,0"))
            (rule "concrete_or_4" (formula "32") (term "0,0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "7"))
            (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1,0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "32") (term "1,1,0,0,1,0,0,0"))
            (rule "times_zero_1" (formula "32") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "32") (term "0,0,1,0,0,0"))
            (rule "leq_literals" (formula "32") (term "0,1,0,0,0"))
            (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "32") (term "0,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "32") (term "1,0,0,0") (ifseqformula "8"))
            (rule "qeq_literals" (formula "32") (term "0,1,0,0,0"))
            (rule "concrete_and_2" (formula "32") (term "1,0,0,0"))
            (rule "concrete_or_4" (formula "32") (term "0,0,0"))
            (rule "allLeft" (formula "32") (inst "t=i_0"))
            (rule "eqClose" (formula "32") (term "0,1"))
            (rule "concrete_not_1" (formula "32") (term "1"))
            (rule "concrete_or_4" (formula "32"))
            (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "32") (term "1,0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "32") (term "0,1,0"))
            (rule "concrete_and_2" (formula "32") (term "1,0"))
            (rule "concrete_or_4" (formula "32") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "4"))
            (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
            (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "32") (term "0,0,1"))
            (rule "leq_literals" (formula "32") (term "0,1"))
            (rule "concrete_and_2" (formula "32") (term "1"))
            (rule "concrete_or_4" (formula "32"))
            (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "2"))
            (rule "qeq_literals" (formula "32") (term "0"))
            (rule "concrete_and_2" (formula "32"))
            (rule "closeFalse" (formula "32"))
         )
         (branch "if x_1 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "47"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "30"))
            (rule "applyOnPV" (formula "30") (term "0"))
            (rule "simplifyUpdate1" (formula "30") (term "1"))
            (rule "boolean_equal" (formula "30"))
            (rule "closeTrue" (formula "30"))
         )
      )
      (branch "if x_3 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "48"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "31"))
         (rule "simplifyUpdate1" (formula "31") (term "1"))
         (rule "applyOnPV" (formula "31") (term "0"))
         (rule "ifthenelse_concrete4" (formula "31"))
         (rule "boolean_not_equal_2" (formula "31") (term "1"))
         (rule "concrete_or_4" (formula "31"))
         (rule "notRight" (formula "31"))
         (rule "inEqSimp_contradInEq1" (formula "11") (term "0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "11") (term "0,0"))
         (rule "concrete_and_2" (formula "11") (term "0"))
         (rule "concrete_or_2" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "1"))
         (rule "leq_literals" (formula "9") (term "0"))
         (rule "concrete_or_1" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "nnf_ex2all" (formula "30"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0"))
         (rule "compound_equality_comparison_2" (formula "47") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
         (rule "variableDeclarationAssign" (formula "47") (term "1"))
         (rule "variableDeclaration" (formula "47") (term "1") (newnames "x_7"))
         (rule "assignment" (formula "47") (term "1"))
         (rule "sequentialToParallel2" (formula "47"))
         (rule "simplifyUpdate2" (formula "47"))
         (rule "simplifyUpdate3" (formula "47") (term "1,0"))
         (rule "applyOnElementary" (formula "47") (term "1,0"))
         (rule "applyOnPV" (formula "47") (term "0,1,0"))
         (rule "variableDeclarationAssign" (formula "47") (term "1"))
         (rule "variableDeclaration" (formula "47") (term "1") (newnames "x_8"))
         (rule "eval_order_array_access4" (formula "47") (term "1") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "47") (term "1"))
         (rule "variableDeclaration" (formula "47") (term "1") (newnames "x_arr"))
         (rule "assignment_read_attribute_this" (formula "47"))
         (rule "sequentialToParallel2" (formula "47"))
         (rule "simplifyUpdate3" (formula "47") (term "1,0"))
         (rule "assignment_array2" (formula "47"))
         (branch "Normal Execution (x_arr != null)"
            (rule "sequentialToParallel2" (formula "47"))
            (rule "simplifyUpdate2" (formula "47"))
            (rule "simplifyUpdate3" (formula "47") (term "1,0"))
            (rule "applyOnElementary" (formula "47") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "47") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "47") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "47") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "47") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "47") (term "1,0,1,0"))
            (rule "applyOnRigidTerm" (formula "47") (term "2,0,1,0"))
            (rule "applyOnPV" (formula "47") (term "0,2,0,1,0"))
            (rule "equality_comparison_simple" (formula "47") (term "1"))
            (rule "eqSymm" (formula "47") (term "0,0,0,1"))
            (rule "sequentialToParallel2" (formula "47"))
            (rule "simplifyUpdate2" (formula "47"))
            (rule "simplifyUpdate3" (formula "47") (term "1,0"))
            (rule "applyOnElementary" (formula "47") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "47") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "47") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "47") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "47") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "47") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "47") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "47") (term "0,0,0,1,0"))
            (rule "applyOnPV" (formula "47") (term "1,0,0,1,0"))
            (rule "blockEmpty" (formula "47") (term "1"))
            (rule "compound_assignment_1_new" (formula "47") (term "1"))
            (rule "sequentialToParallel2" (formula "47"))
            (rule "simplifyUpdate2" (formula "47"))
            (rule "simplifyUpdate3" (formula "47") (term "1,0"))
            (rule "applyOnElementary" (formula "47") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "47") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "47") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "47") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "47") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "47") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "47") (term "1,0,0,1,0"))
            (rule "ifthenelse_concrete3" (formula "47") (term "0,0,1,0"))
            (rule "boolean_not_equal_2" (formula "47") (term "1,0,0,1,0"))
            (rule "concrete_or_4" (formula "47") (term "0,0,1,0"))
            (rule "ifElseSplit" (formula "47"))
            (branch "if x_1 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "48"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "ifthenelse_concrete4" (formula "1"))
               (rule "boolean_not_equal_2" (formula "1") (term "1"))
               (rule "concrete_or_4" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "ifElseSkipThen" (formula "48") (term "1"))
               (rule "assignment" (formula "48") (term "1"))
               (rule "simplifyUpdate2" (formula "48") (term "1"))
               (rule "assignment" (formula "48") (term "1"))
               (rule "sequentialToParallel2" (formula "48"))
               (rule "simplifyUpdate2" (formula "48"))
               (rule "simplifyUpdate3" (formula "48") (term "1,0"))
               (rule "blockEmpty" (formula "48") (term "1"))
               (rule "methodCallReturn" (formula "48") (term "1"))
               (rule "assignment" (formula "48") (term "1"))
               (rule "sequentialToParallel2" (formula "48"))
               (rule "simplifyUpdate2" (formula "48"))
               (rule "simplifyUpdate3" (formula "48") (term "1,0"))
               (rule "applyOnElementary" (formula "48") (term "1,0"))
               (rule "applyOnPV" (formula "48") (term "0,1,0"))
               (rule "methodCallEmpty" (formula "48") (term "1"))
               (rule "tryEmpty" (formula "48") (term "1"))
               (rule "emptyModality" (formula "48") (term "1"))
               (rule "applyOnRigidFormula" (formula "48"))
               (rule "simplifyUpdate2" (formula "48") (term "0"))
               (rule "simplifyUpdate2" (formula "48") (term "1"))
               (rule "applyOnRigidFormula" (formula "48") (term "0"))
               (rule "simplifyUpdate2" (formula "48") (term "0,0"))
               (rule "simplifyUpdate2" (formula "48") (term "1,0"))
               (rule "applyOnRigidFormula" (formula "48") (term "1"))
               (rule "applyOnRigidFormula" (formula "48") (term "0,0"))
               (rule "simplifyUpdate2" (formula "48") (term "1,0,0"))
               (rule "applyOnRigidFormula" (formula "48") (term "1,0"))
               (rule "simplifyUpdate1" (formula "48") (term "1,1,0"))
               (rule "applyOnPV" (formula "48") (term "0,1,0"))
               (rule "eqClose" (formula "48") (term "1,0"))
               (rule "concrete_and_3" (formula "48") (term "0"))
               (rule "applyOnRigidFormula" (formula "48") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "48") (term "0,0"))
               (rule "applyOnPV" (formula "48") (term "0,0,0"))
               (rule "simplifyUpdate1" (formula "48") (term "1,0,0"))
               (rule "eqClose" (formula "48") (term "0,0"))
               (rule "concrete_and_1" (formula "48") (term "0"))
               (rule "applyOnRigidFormula" (formula "48") (term "0,0,1"))
               (rule "simplifyUpdate1" (formula "48") (term "1,0,0,1"))
               (rule "applyOnRigidTerm" (formula "48") (term "0,0,0,1"))
               (rule "simplifyUpdate1" (formula "48") (term "1,0,0,0,1"))
               (rule "applyOnPV" (formula "48") (term "0,0,0,0,1"))
               (rule "simplifyUpdate1" (formula "48") (term "2,0,0,0,1"))
               (rule "eqClose" (formula "48") (term "0,0,1"))
               (rule "all_unused" (formula "48") (term "0,1"))
               (rule "all_unused" (formula "48") (term "1"))
               (rule "concrete_and_3" (formula "48"))
               (rule "Class_invariant_axiom_for_Keyserver" (formula "48") (inst "j=j") (inst "i=i") (ifseqformula "6"))
               (rule "expand_inInt" (formula "48") (term "1,0,0,0,1"))
               (rule "expand_inInt" (formula "48") (term "1,0,0,0,0,1"))
               (rule "replace_int_MAX" (formula "48") (term "1,0,1,0,0,0,1"))
               (rule "replace_int_MIN" (formula "48") (term "0,1,1,0,0,0,1"))
               (rule "replace_int_MAX" (formula "48") (term "1,0,1,0,0,0,0,1"))
               (rule "replace_int_MIN" (formula "48") (term "0,1,1,0,0,0,0,1"))
               (rule "eqSymm" (formula "48") (term "0,1,0,0,1"))
               (rule "eqSymm" (formula "48") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "48") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "48") (term "0,1,0,0,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "48") (term "0,1,1,0,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "48") (term "0,1,1,0,0,0,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "48") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "48") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "replace_known_left" (formula "48") (term "0,1,0,0,0,0") (ifseqformula "12"))
               (rule "concrete_and_1" (formula "48") (term "1,0,0,0,0"))
               (rule "replace_known_left" (formula "48") (term "1,0,0,0,0") (ifseqformula "14"))
               (rule "concrete_and_3" (formula "48") (term "0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "43"))
               (rule "concrete_not_2" (formula "48") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "concrete_and_3" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "42"))
               (rule "concrete_not_2" (formula "48") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "concrete_and_3" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "41"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "46"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "45"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "33"))
               (rule "concrete_not_2" (formula "48") (term "1,0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "concrete_and_3" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "32"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "34"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "37"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0,0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,1,0,0,0,0,0,0,0,0,0") (ifseqformula "36"))
               (rule "concrete_not_2" (formula "48") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "concrete_and_3" (formula "48") (term "0,0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "35"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "38"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "40"))
               (rule "concrete_not_2" (formula "48") (term "1,0,0,0,0,0,0,0"))
               (rule "concrete_and_3" (formula "48") (term "0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0,0") (ifseqformula "39"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0") (ifseqformula "44"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,1,0,0,0,0,0") (ifseqformula "43"))
               (rule "concrete_not_2" (formula "48") (term "1,0,0,0,0,0"))
               (rule "concrete_and_3" (formula "48") (term "0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0,0") (ifseqformula "41"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0") (ifseqformula "42"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0,0") (ifseqformula "46"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0,0"))
               (rule "replace_known_right" (formula "48") (term "0,0,0,0,0") (ifseqformula "45"))
               (rule "concrete_not_2" (formula "48") (term "0,0,0,0"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0"))
               (rule "replace_known_left" (formula "48") (term "0,0,0,0") (ifseqformula "16"))
               (rule "concrete_and_1" (formula "48") (term "0,0,0"))
               (rule "replace_known_left" (formula "48") (term "0,0,0") (ifseqformula "18"))
               (rule "concrete_and_1" (formula "48") (term "0,0"))
               (rule "replace_known_left" (formula "48") (term "0,0") (ifseqformula "21"))
               (rule "concrete_and_1" (formula "48") (term "0"))
               (rule "replace_known_left" (formula "48") (term "1,0") (ifseqformula "24"))
               (rule "concrete_and_3" (formula "48") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,0,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,0,0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,0,0,0,1"))
               (rule "polySimp_addComm1" (formula "48") (term "0,1,0,0,0,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0,0,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "48") (term "1,1,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "48") (term "1,1,0,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "48") (term "0"))
               (rule "replace_known_left" (formula "48") (term "0") (ifseqformula "23"))
               (rule "concrete_and_1" (formula "48"))
               (rule "allRight" (formula "48") (inst "sk=j_0"))
               (rule "allRight" (formula "48") (inst "sk=i_0"))
               (rule "impRight" (formula "48"))
               (rule "andLeft" (formula "1"))
               (rule "notRight" (formula "50"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "4"))
               (rule "andLeft" (formula "2"))
               (rule "andLeft" (formula "4"))
               (rule "andLeft" (formula "2"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
               (rule "leq_literals" (formula "6") (term "0"))
               (rule "concrete_or_1" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "31"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0"))
               (rule "mul_literals" (formula "4") (term "0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (rule "polySimp_rightDist" (formula "4") (term "1"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
               (rule "mul_literals" (formula "4") (term "0,1"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1"))
               (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "7"))
               (rule "polySimp_rightDist" (formula "3") (term "0,0"))
               (rule "mul_literals" (formula "3") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "3"))
               (rule "leq_literals" (formula "7") (term "0"))
               (rule "concrete_or_1" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "27"))
               (rule "polySimp_rightDist" (formula "5") (term "0,0"))
               (rule "mul_literals" (formula "5") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "5") (term "0"))
               (rule "add_literals" (formula "5") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "5"))
               (rule "polySimp_mulLiterals" (formula "5") (term "0"))
               (rule "polySimp_elimOne" (formula "5") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "5"))
               (rule "leq_literals" (formula "8") (term "0"))
               (rule "concrete_or_1" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
               (rule "polySimp_rightDist" (formula "4") (term "0,0"))
               (rule "mul_literals" (formula "4") (term "0,0,0"))
               (rule "polySimp_addComm1" (formula "4") (term "0"))
               (rule "add_literals" (formula "4") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
               (rule "leq_literals" (formula "3") (term "0"))
               (rule "concrete_or_1" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "allLeft" (formula "33") (inst "t=j_0"))
               (rule "eqSymm" (formula "33") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "33") (term "1,0,0"))
               (rule "inEqSimp_commuteGeq" (formula "33") (term "1,0,0,0"))
               (rule "applyEq" (formula "33") (term "1,0,1,0") (ifseqformula "1"))
               (rule "inEqSimp_contradInEq0" (formula "33") (term "1,0,0,0,0") (ifseqformula "5"))
               (rule "qeq_literals" (formula "33") (term "0,1,0,0,0,0"))
               (rule "concrete_and_2" (formula "33") (term "1,0,0,0,0"))
               (rule "concrete_or_4" (formula "33") (term "0,0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "7"))
               (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "33") (term "1,1,0,0,1,0,0,0"))
               (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "33") (term "0,0,1,0,0,0"))
               (rule "leq_literals" (formula "33") (term "0,1,0,0,0"))
               (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
               (rule "concrete_or_4" (formula "33") (term "0,0,0"))
               (rule "inEqSimp_contradInEq1" (formula "33") (term "1,0,0,0") (ifseqformula "8"))
               (rule "qeq_literals" (formula "33") (term "0,1,0,0,0"))
               (rule "concrete_and_2" (formula "33") (term "1,0,0,0"))
               (rule "concrete_or_4" (formula "33") (term "0,0,0"))
               (rule "allLeft" (formula "33") (inst "t=i_0"))
               (rule "eqClose" (formula "33") (term "0,1"))
               (rule "concrete_not_1" (formula "33") (term "1"))
               (rule "concrete_or_4" (formula "33"))
               (rule "inEqSimp_commuteGeq" (formula "33") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "33") (term "0,0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "33") (term "0,0,0"))
               (rule "concrete_and_2" (formula "33") (term "0,0"))
               (rule "concrete_or_2" (formula "33") (term "0"))
               (rule "inEqSimp_contradInEq1" (formula "33") (term "1") (ifseqformula "4"))
               (rule "inEqSimp_homoInEq1" (formula "33") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0,1"))
               (rule "add_literals" (formula "33") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "33") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "33") (term "0,0,1"))
               (rule "leq_literals" (formula "33") (term "0,1"))
               (rule "concrete_and_2" (formula "33") (term "1"))
               (rule "concrete_or_4" (formula "33"))
               (rule "inEqSimp_contradInEq0" (formula "33") (ifseqformula "3"))
               (rule "qeq_literals" (formula "33") (term "0"))
               (rule "concrete_and_2" (formula "33"))
               (rule "closeFalse" (formula "33"))
            )
            (branch "if x_1 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "48"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "31"))
               (rule "applyOnPV" (formula "31") (term "0"))
               (rule "simplifyUpdate1" (formula "31") (term "1"))
               (rule "ifthenelse_concrete4" (formula "31"))
               (rule "boolean_not_equal_2" (formula "31") (term "1"))
               (rule "concrete_or_4" (formula "31"))
               (rule "notRight" (formula "31"))
               (rule "compound_equality_comparison_1" (formula "48") (term "1") (inst "#v0=x_1"))
               (rule "variableDeclarationAssign" (formula "48") (term "1"))
               (rule "variableDeclaration" (formula "48") (term "1") (newnames "x_9"))
               (rule "eval_order_array_access4" (formula "48") (term "1") (inst "#v0=x_arr"))
               (rule "variableDeclarationAssign" (formula "48") (term "1"))
               (rule "variableDeclaration" (formula "48") (term "1") (newnames "x_arr_1"))
               (rule "assignment_read_attribute_this" (formula "48"))
               (rule "sequentialToParallel2" (formula "48"))
               (rule "simplifyUpdate3" (formula "48") (term "1,0"))
               (rule "assignment_array2" (formula "48"))
               (branch "Normal Execution (x_arr_1 != null)"
                  (rule "sequentialToParallel2" (formula "48"))
                  (rule "simplifyUpdate2" (formula "48"))
                  (rule "simplifyUpdate3" (formula "48") (term "1,0"))
                  (rule "applyOnElementary" (formula "48") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "48") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "48") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "48") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "48") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "48") (term "1,0,1,0"))
                  (rule "applyOnRigidTerm" (formula "48") (term "2,0,1,0"))
                  (rule "applyOnPV" (formula "48") (term "0,2,0,1,0"))
                  (rule "equality_comparison_simple" (formula "48") (term "1"))
                  (rule "insert_constant_value" (formula "48") (term "1,0,0,0,1"))
                  (rule "sequentialToParallel2" (formula "48"))
                  (rule "simplifyUpdate2" (formula "48"))
                  (rule "simplifyUpdate3" (formula "48") (term "1,0"))
                  (rule "applyOnElementary" (formula "48") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "48") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "48") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "48") (term "1,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "48") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "48") (term "0,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "48") (term "1,0,0,1,0"))
                  (rule "blockEmpty" (formula "48") (term "1"))
                  (rule "allLeft" (formula "2") (inst "t=result_0"))
                  (rule "replace_known_left" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "concrete_not_1" (formula "2") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "2") (term "0,0"))
                  (rule "replace_known_left" (formula "2") (term "0,1,0") (ifseqformula "31"))
                  (rule "concrete_not_1" (formula "2") (term "1,0"))
                  (rule "concrete_or_4" (formula "2") (term "0"))
                  (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
                  (rule "inEqSimp_contradInEq0" (formula "2") (term "1,0,0") (ifseqformula "28"))
                  (rule "qeq_literals" (formula "2") (term "0,1,0,0"))
                  (rule "concrete_and_2" (formula "2") (term "1,0,0"))
                  (rule "concrete_or_4" (formula "2") (term "0,0"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (term "1,0") (ifseqformula "30"))
                  (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0,1,0"))
                  (rule "add_literals" (formula "2") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "2") (term "0,1,0"))
                  (rule "concrete_and_2" (formula "2") (term "1,0"))
                  (rule "concrete_or_4" (formula "2") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "2") (term "0,0"))
                  (rule "concrete_and_2" (formula "2") (term "0"))
                  (rule "concrete_or_2" (formula "2"))
                  (rule "notLeft" (formula "2"))
                  (rule "replace_known_right" (formula "49") (term "0,0,1,0") (ifseqformula "32"))
                  (rule "ifthenelse_false" (formula "49") (term "0,1,0"))
                  (rule "ifElseSplit" (formula "49"))
                  (branch "if x true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "50"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "boolean_not_equal_2" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if x false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "50"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "32"))
                     (rule "simplifyUpdate1" (formula "32") (term "1"))
                     (rule "applyOnPV" (formula "32") (term "0"))
                     (rule "boolean_not_equal_2" (formula "32"))
                     (rule "false_right" (formula "32"))
                     (rule "assignment" (formula "49") (term "1"))
                     (rule "sequentialToParallel2" (formula "49"))
                     (rule "simplifyUpdate2" (formula "49"))
                     (rule "simplifyUpdate3" (formula "49") (term "1,0"))
                     (rule "blockEmpty" (formula "49") (term "1"))
                     (rule "methodCallReturn" (formula "49") (term "1"))
                     (rule "assignment" (formula "49") (term "1"))
                     (rule "sequentialToParallel2" (formula "49"))
                     (rule "simplifyUpdate2" (formula "49"))
                     (rule "simplifyUpdate3" (formula "49") (term "1,0"))
                     (rule "applyOnElementary" (formula "49") (term "1,0"))
                     (rule "applyOnPV" (formula "49") (term "0,1,0"))
                     (rule "methodCallEmpty" (formula "49") (term "1"))
                     (rule "tryEmpty" (formula "49") (term "1"))
                     (rule "emptyModality" (formula "49") (term "1"))
                     (rule "applyOnRigidFormula" (formula "49"))
                     (rule "simplifyUpdate2" (formula "49") (term "0"))
                     (rule "simplifyUpdate2" (formula "49") (term "1"))
                     (rule "applyOnRigidFormula" (formula "49") (term "0"))
                     (rule "simplifyUpdate2" (formula "49") (term "0,0"))
                     (rule "simplifyUpdate2" (formula "49") (term "1,0"))
                     (rule "applyOnRigidFormula" (formula "49") (term "1"))
                     (rule "applyOnRigidFormula" (formula "49") (term "0,0"))
                     (rule "simplifyUpdate2" (formula "49") (term "1,0,0"))
                     (rule "applyOnRigidFormula" (formula "49") (term "1,0"))
                     (rule "applyOnPV" (formula "49") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "49") (term "1,1,0"))
                     (rule "eqClose" (formula "49") (term "1,0"))
                     (rule "concrete_and_3" (formula "49") (term "0"))
                     (rule "applyOnRigidFormula" (formula "49") (term "0,1"))
                     (rule "applyOnRigidFormula" (formula "49") (term "0,0"))
                     (rule "applyOnPV" (formula "49") (term "0,0,0"))
                     (rule "simplifyUpdate1" (formula "49") (term "1,0,0"))
                     (rule "eqClose" (formula "49") (term "0,0"))
                     (rule "concrete_and_1" (formula "49") (term "0"))
                     (rule "applyOnRigidFormula" (formula "49") (term "0,0,1"))
                     (rule "simplifyUpdate1" (formula "49") (term "1,0,0,1"))
                     (rule "applyOnRigidTerm" (formula "49") (term "0,0,0,1"))
                     (rule "simplifyUpdate1" (formula "49") (term "2,0,0,0,1"))
                     (rule "simplifyUpdate1" (formula "49") (term "1,0,0,0,1"))
                     (rule "applyOnPV" (formula "49") (term "0,0,0,0,1"))
                     (rule "eqClose" (formula "49") (term "0,0,1"))
                     (rule "all_unused" (formula "49") (term "0,1"))
                     (rule "all_unused" (formula "49") (term "1"))
                     (rule "concrete_and_3" (formula "49"))
                     (rule "Class_invariant_axiom_for_Keyserver" (formula "49") (inst "j=j") (inst "i=i") (ifseqformula "7"))
                     (rule "expand_inInt" (formula "49") (term "1,0,0,0,1"))
                     (rule "expand_inInt" (formula "49") (term "1,0,0,0,0,1"))
                     (rule "replace_int_MAX" (formula "49") (term "1,0,1,0,0,0,1"))
                     (rule "replace_int_MIN" (formula "49") (term "0,1,1,0,0,0,1"))
                     (rule "replace_int_MAX" (formula "49") (term "1,0,1,0,0,0,0,1"))
                     (rule "replace_int_MIN" (formula "49") (term "0,1,1,0,0,0,0,1"))
                     (rule "eqSymm" (formula "49") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "49") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "49") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "49") (term "0,1,0,0,1"))
                     (rule "eqSymm" (formula "49") (term "0,0,1,0,0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "49") (term "0,1,1,0,0,0,0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "49") (term "0,1,0,0,0,0,0,0,0,0,0"))
                     (rule "eqSymm" (formula "49") (term "0,1,1,0,0,0,0,0,0,0,0"))
                     (rule "replace_known_left" (formula "49") (term "0,1,0,0,0") (ifseqformula "17"))
                     (rule "concrete_and_1" (formula "49") (term "1,0,0,0"))
                     (rule "replace_known_left" (formula "49") (term "1,0,0,0") (ifseqformula "19"))
                     (rule "concrete_and_3" (formula "49") (term "0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "40"))
                     (rule "concrete_not_2" (formula "49") (term "0,1,0,0,0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "1,0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "41"))
                     (rule "concrete_not_2" (formula "49") (term "1,0,0,0,0,0,0,0"))
                     (rule "concrete_and_3" (formula "49") (term "0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "39"))
                     (rule "concrete_not_2" (formula "49") (term "1,0,0,0,0,0,0,0"))
                     (rule "concrete_and_3" (formula "49") (term "0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "36"))
                     (rule "concrete_not_2" (formula "49") (term "0,1,0,0,0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "1,0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "37"))
                     (rule "concrete_not_2" (formula "49") (term "1,0,0,0,0,0,0,0"))
                     (rule "concrete_and_3" (formula "49") (term "0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "38"))
                     (rule "concrete_not_2" (formula "49") (term "1,0,0,0,0,0,0,0"))
                     (rule "concrete_and_3" (formula "49") (term "0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,1,1,0,0,0,0,0,0,0") (ifseqformula "35"))
                     (rule "concrete_not_2" (formula "49") (term "1,1,0,0,0,0,0,0,0"))
                     (rule "concrete_and_3" (formula "49") (term "1,0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "33"))
                     (rule "concrete_not_2" (formula "49") (term "0,1,0,0,0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "1,0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "34"))
                     (rule "concrete_not_2" (formula "49") (term "1,0,0,0,0,0,0,0"))
                     (rule "concrete_and_3" (formula "49") (term "0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "43"))
                     (rule "concrete_not_2" (formula "49") (term "1,0,0,0,0,0,0,0,0,0,0"))
                     (rule "concrete_and_3" (formula "49") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "42"))
                     (rule "concrete_not_2" (formula "49") (term "0,0,0,0,0,0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "44"))
                     (rule "concrete_not_2" (formula "49") (term "0,0,0,0,0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "0,0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "47"))
                     (rule "concrete_not_2" (formula "49") (term "0,0,0,0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "0,0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,0,0,0,0,0,0") (ifseqformula "46"))
                     (rule "concrete_not_2" (formula "49") (term "0,0,0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "0,0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,0,0,0,0,0") (ifseqformula "45"))
                     (rule "concrete_not_2" (formula "49") (term "0,0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,1,0,0,0,0,0") (ifseqformula "44"))
                     (rule "concrete_not_2" (formula "49") (term "1,0,0,0,0,0"))
                     (rule "concrete_and_3" (formula "49") (term "0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,0,0,0,0,0") (ifseqformula "42"))
                     (rule "concrete_not_2" (formula "49") (term "0,0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "0,0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,0,0,0,0") (ifseqformula "43"))
                     (rule "concrete_not_2" (formula "49") (term "0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,0,0,0,0") (ifseqformula "47"))
                     (rule "concrete_not_2" (formula "49") (term "0,0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "49") (term "0,0,0,0,0") (ifseqformula "46"))
                     (rule "concrete_not_2" (formula "49") (term "0,0,0,0"))
                     (rule "concrete_and_1" (formula "49") (term "0,0,0"))
                     (rule "replace_known_left" (formula "49") (term "1,0,0,0") (ifseqformula "15"))
                     (rule "concrete_and_3" (formula "49") (term "0,0,0"))
                     (rule "replace_known_left" (formula "49") (term "0,0,0") (ifseqformula "13"))
                     (rule "concrete_and_1" (formula "49") (term "0,0"))
                     (rule "replace_known_left" (formula "49") (term "0,0") (ifseqformula "22"))
                     (rule "concrete_and_1" (formula "49") (term "0"))
                     (rule "replace_known_left" (formula "49") (term "1,0") (ifseqformula "25"))
                     (rule "concrete_and_3" (formula "49") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,0,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "49") (term "1,0,0,0,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,1,0,0,0,0,0,0,1"))
                     (rule "polySimp_addComm1" (formula "49") (term "0,1,0,0,0,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "49") (term "0,0,0,0,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "49") (term "1,1,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "49") (term "1,1,0,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "49") (term "0"))
                     (rule "replace_known_left" (formula "49") (term "0") (ifseqformula "24"))
                     (rule "concrete_and_1" (formula "49"))
                     (rule "allRight" (formula "49") (inst "sk=j_0"))
                     (rule "allRight" (formula "49") (inst "sk=i_0"))
                     (rule "impRight" (formula "49"))
                     (rule "andLeft" (formula "1"))
                     (rule "notRight" (formula "51"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "4"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "4"))
                     (rule "andLeft" (formula "2"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
                     (rule "leq_literals" (formula "6") (term "0"))
                     (rule "concrete_or_1" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "32"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                     (rule "mul_literals" (formula "4") (term "0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "polySimp_mulComm0" (formula "4") (term "1"))
                     (rule "polySimp_rightDist" (formula "4") (term "1"))
                     (rule "mul_literals" (formula "4") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "7"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                     (rule "mul_literals" (formula "3") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "add_literals" (formula "3") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                     (rule "polySimp_elimOne" (formula "3") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "3"))
                     (rule "leq_literals" (formula "7") (term "0"))
                     (rule "concrete_or_1" (formula "7"))
                     (rule "true_left" (formula "7"))
                     (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "28"))
                     (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                     (rule "mul_literals" (formula "5") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "5") (term "0"))
                     (rule "add_literals" (formula "5") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                     (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                     (rule "polySimp_elimOne" (formula "5") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "5"))
                     (rule "leq_literals" (formula "8") (term "0"))
                     (rule "concrete_or_1" (formula "8"))
                     (rule "true_left" (formula "8"))
                     (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
                     (rule "polySimp_rightDist" (formula "4") (term "0,0"))
                     (rule "mul_literals" (formula "4") (term "0,0,0"))
                     (rule "polySimp_addComm1" (formula "4") (term "0"))
                     (rule "add_literals" (formula "4") (term "0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "4"))
                     (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                     (rule "polySimp_elimOne" (formula "4") (term "0"))
                     (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
                     (rule "leq_literals" (formula "3") (term "0"))
                     (rule "concrete_or_1" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "allLeft" (formula "34") (inst "t=j_0"))
                     (rule "eqSymm" (formula "34") (term "0,1,0"))
                     (rule "inEqSimp_commuteGeq" (formula "34") (term "1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "34") (term "1,0,0"))
                     (rule "applyEq" (formula "34") (term "1,0,1,0") (ifseqformula "1"))
                     (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0,0,0,0") (ifseqformula "8"))
                     (rule "qeq_literals" (formula "34") (term "0,1,0,0,0,0,0"))
                     (rule "concrete_and_2" (formula "34") (term "1,0,0,0,0,0"))
                     (rule "concrete_or_4" (formula "34") (term "0,0,0,0,0"))
                     (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0,0,0") (ifseqformula "7"))
                     (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1,0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0,1,0,0,0"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "34") (term "0,0,1,0,0,0"))
                     (rule "leq_literals" (formula "34") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "34") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "34") (term "0,0,0"))
                     (rule "inEqSimp_contradInEq0" (formula "34") (term "1,0,0,0") (ifseqformula "5"))
                     (rule "qeq_literals" (formula "34") (term "0,1,0,0,0"))
                     (rule "concrete_and_2" (formula "34") (term "1,0,0,0"))
                     (rule "concrete_or_4" (formula "34") (term "0,0,0"))
                     (rule "allLeft" (formula "34") (inst "t=i_0"))
                     (rule "eqClose" (formula "34") (term "0,1"))
                     (rule "concrete_not_1" (formula "34") (term "1"))
                     (rule "concrete_or_4" (formula "34"))
                     (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                     (rule "inEqSimp_contradInEq0" (formula "34") (term "1,0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "34") (term "0,1,0"))
                     (rule "concrete_and_2" (formula "34") (term "1,0"))
                     (rule "concrete_or_4" (formula "34") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "4"))
                     (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                     (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "34") (term "0,0,1"))
                     (rule "leq_literals" (formula "34") (term "0,1"))
                     (rule "concrete_and_2" (formula "34") (term "1"))
                     (rule "concrete_or_4" (formula "34"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "34"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (rule "concrete_and_2" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch "Null Reference (x_arr_1 = null)"
                  (rule "false_right" (formula "49"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "close" (formula "46") (ifseqformula "1"))
               )
               (branch "Index Out of Bounds (x_arr_1 != null, but pos Out of Bounds!)"
                  (rule "false_right" (formula "49"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "simplifyUpdate2" (formula "1") (term "1"))
                  (rule "applyOnRigidFormula" (formula "33"))
                  (rule "applyOnPV" (formula "33") (term "0"))
                  (rule "simplifyUpdate1" (formula "33") (term "1"))
                  (rule "applyOnRigidFormula" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1,0"))
                  (rule "simplifyUpdate1" (formula "1") (term "0,0"))
                  (rule "applyOnPV" (formula "1") (term "1,0"))
                  (rule "applyOnRigidFormula" (formula "1") (term "1"))
                  (rule "applyOnPV" (formula "1") (term "0,1"))
                  (rule "simplifyUpdate1" (formula "1") (term "1,1"))
                  (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
                  (rule "applyOnPV" (formula "1") (term "0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "23"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "29"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                  (rule "concrete_and_2" (formula "1") (term "0"))
                  (rule "concrete_or_2" (formula "1"))
                  (rule "inEqSimp_subsumption0" (formula "28") (ifseqformula "1"))
                  (rule "leq_literals" (formula "28") (term "0"))
                  (rule "concrete_or_1" (formula "28"))
                  (rule "true_left" (formula "28"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (rule "concrete_and_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "Null Reference (x_arr = null)"
            (rule "false_right" (formula "48"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "close" (formula "43") (ifseqformula "1"))
         )
         (branch "Index Out of Bounds (x_arr != null, but pos Out of Bounds!)"
            (rule "false_right" (formula "48"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate2" (formula "1") (term "1"))
            (rule "applyOnRigidFormula" (formula "32"))
            (rule "simplifyUpdate1" (formula "32") (term "1"))
            (rule "applyOnPV" (formula "32") (term "0"))
            (rule "applyOnRigidFormula" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "0,0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0"))
            (rule "applyOnPV" (formula "1") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "1") (term "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1,1"))
            (rule "applyOnPV" (formula "1") (term "0,1"))
            (rule "applyOnRigidTerm" (formula "1") (term "0,0"))
            (rule "applyOnPV" (formula "1") (term "0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "17"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "28"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0"))
            (rule "concrete_and_2" (formula "1") (term "0"))
            (rule "concrete_or_2" (formula "1"))
            (rule "inEqSimp_subsumption0" (formula "27") (ifseqformula "1"))
            (rule "leq_literals" (formula "27") (term "0"))
            (rule "concrete_or_1" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
            (rule "qeq_literals" (formula "4") (term "0"))
            (rule "concrete_and_2" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
      )
   )
)
(branch "Exceptional Post (posOfId)"
   (rule "expand_inInt" (formula "20") (term "1,0,0,1,0,1,0,1,1,1"))
   (rule "simplifyUpdate2" (formula "37"))
   (rule "simplifyUpdate2" (formula "20"))
   (rule "replace_int_MIN" (formula "20") (term "0,1,1,0,0,1,0,1,0,1,1,1"))
   (rule "replace_int_MAX" (formula "20") (term "1,0,1,0,0,1,0,1,0,1,1,1"))
   (rule "simplifyUpdate2" (formula "20") (term "1"))
   (rule "andLeft" (formula "20"))
   (rule "simplifyUpdate2" (formula "20"))
   (rule "andLeft" (formula "21"))
   (rule "simplifyUpdate2" (formula "22"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "22"))
   (rule "simplifyUpdate2" (formula "22"))
   (rule "notLeft" (formula "20"))
   (rule "close" (formula "24") (ifseqformula "23"))
)
(branch "Pre (posOfId)"
   (rule "simplifyUpdate2" (formula "36"))
   (rule "expand_inInt" (formula "36") (term "1,1,1,1"))
   (rule "replace_int_MIN" (formula "36") (term "0,1,1,1,1,1"))
   (rule "replace_int_MAX" (formula "36") (term "1,0,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "36") (term "1"))
   (rule "applyOnRigidFormula" (formula "36"))
   (rule "simplifyUpdate2" (formula "36") (term "0"))
   (rule "applyOnRigidFormula" (formula "36") (term "1"))
   (rule "simplifyUpdate2" (formula "36") (term "0,1"))
   (rule "replace_known_left" (formula "36") (term "0,1") (ifseqformula "1"))
   (rule "concrete_and_1" (formula "36") (term "1"))
   (rule "applyOnRigidFormula" (formula "36") (term "1"))
   (rule "applyOnRigidFormula" (formula "36") (term "1,1"))
   (rule "simplifyUpdate1" (formula "36") (term "0,1,1"))
   (rule "applyOnPV" (formula "36") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "36") (term "0,1"))
   (rule "simplifyUpdate1" (formula "36") (term "1,0,1"))
   (rule "applyOnPV" (formula "36") (term "0,0,1"))
   (rule "replace_known_left" (formula "36") (term "0,1") (ifseqformula "4"))
   (rule "concrete_and_1" (formula "36") (term "1"))
   (rule "inEqSimp_commuteLeq" (formula "36") (term "1"))
   (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "5"))
   (rule "concrete_and_3" (formula "36"))
   (rule "Class_invariant_axiom_for_Keyserver" (formula "36") (inst "j=j") (inst "i=i") (ifseqformula "3"))
   (rule "expand_inInt" (formula "36") (term "1,0,0,0,1"))
   (rule "expand_inInt" (formula "36") (term "1,0,0,0,0,1"))
   (rule "replace_int_MIN" (formula "36") (term "0,1,1,0,0,0,1"))
   (rule "replace_int_MAX" (formula "36") (term "1,0,1,0,0,0,1"))
   (rule "replace_int_MAX" (formula "36") (term "1,0,1,0,0,0,0,1"))
   (rule "replace_int_MIN" (formula "36") (term "0,1,1,0,0,0,0,1"))
   (rule "eqSymm" (formula "36") (term "0,0,1,0,0,0,0,0,0,0,0"))
   (rule "eqSymm" (formula "36") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "eqSymm" (formula "36") (term "0,1,1,0,0,0,0,0,0,0,0"))
   (rule "eqSymm" (formula "36") (term "0,1,0,0,1"))
   (rule "eqSymm" (formula "36") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "eqSymm" (formula "36") (term "0,1,0,0,0,0,0,0,0,0,0"))
   (rule "eqSymm" (formula "36") (term "0,1,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "eqSymm" (formula "36") (term "0,1,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "23"))
   (rule "concrete_not_2" (formula "36") (term "0,1,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "1,0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,1,0,0,0,0,0,0,0,0,0,0") (ifseqformula "24"))
   (rule "concrete_not_2" (formula "36") (term "1,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_3" (formula "36") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "30"))
   (rule "concrete_not_2" (formula "36") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_3" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "29"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "31"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "34"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "33"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "20"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "21"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "22"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "25"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "26"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "27"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "28"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0") (ifseqformula "32"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "29"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0,0") (ifseqformula "30"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0,0") (ifseqformula "31"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,1,0,0,0,0,0") (ifseqformula "33"))
   (rule "concrete_not_2" (formula "36") (term "1,0,0,0,0,0"))
   (rule "concrete_and_3" (formula "36") (term "0,0,0,0,0"))
   (rule "replace_known_right" (formula "36") (term "0,0,0,0,0,0") (ifseqformula "34"))
   (rule "concrete_not_2" (formula "36") (term "0,0,0,0,0"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0,0"))
   (rule "replace_known_left" (formula "36") (term "1,0,0,0,0") (ifseqformula "11"))
   (rule "concrete_and_3" (formula "36") (term "0,0,0,0"))
   (rule "replace_known_left" (formula "36") (term "0,0,0,0") (ifseqformula "10"))
   (rule "concrete_and_1" (formula "36") (term "0,0,0"))
   (rule "replace_known_left" (formula "36") (term "1,0,0,0") (ifseqformula "13"))
   (rule "concrete_and_3" (formula "36") (term "0,0,0"))
   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "12"))
   (rule "concrete_and_1" (formula "36") (term "0,0"))
   (rule "replace_known_left" (formula "36") (term "0,0") (ifseqformula "15"))
   (rule "concrete_and_1" (formula "36") (term "0"))
   (rule "replace_known_left" (formula "36") (term "1,0") (ifseqformula "18"))
   (rule "concrete_and_3" (formula "36") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "36") (term "0,1,0,0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "36") (term "1,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "36") (term "1,1,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "36") (term "0"))
   (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "17"))
   (rule "concrete_and_1" (formula "36"))
   (rule "allRight" (formula "36") (inst "sk=j_0"))
   (rule "allRight" (formula "36") (inst "sk=i_0"))
   (rule "impRight" (formula "36"))
   (rule "andLeft" (formula "1"))
   (rule "notRight" (formula "38"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "2"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
   (rule "polySimp_elimOne" (formula "4") (term "0"))
   (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
   (rule "leq_literals" (formula "6") (term "0"))
   (rule "concrete_or_1" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "25"))
   (rule "polySimp_rightDist" (formula "4") (term "0,0"))
   (rule "mul_literals" (formula "4") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
   (rule "polySimp_mulComm0" (formula "4") (term "1"))
   (rule "polySimp_rightDist" (formula "4") (term "1"))
   (rule "mul_literals" (formula "4") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "7"))
   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "3"))
   (rule "leq_literals" (formula "7") (term "0"))
   (rule "concrete_or_1" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "22"))
   (rule "polySimp_rightDist" (formula "5") (term "0,0"))
   (rule "mul_literals" (formula "5") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "5") (term "0"))
   (rule "add_literals" (formula "5") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "5"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0"))
   (rule "polySimp_elimOne" (formula "5") (term "0"))
   (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "5"))
   (rule "leq_literals" (formula "8") (term "0"))
   (rule "concrete_or_1" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
   (rule "polySimp_rightDist" (formula "4") (term "0,0"))
   (rule "mul_literals" (formula "4") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "4") (term "0"))
   (rule "add_literals" (formula "4") (term "0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
   (rule "polySimp_elimOne" (formula "4") (term "0"))
   (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "4"))
   (rule "leq_literals" (formula "3") (term "0"))
   (rule "concrete_or_1" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "allLeft" (formula "27") (inst "t=j_0"))
   (rule "eqSymm" (formula "27") (term "0,1,0"))
   (rule "inEqSimp_commuteGeq" (formula "27") (term "1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "27") (term "1,0,0"))
   (rule "applyEq" (formula "27") (term "1,0,1,0") (ifseqformula "1"))
   (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0,0,0,0") (ifseqformula "8"))
   (rule "qeq_literals" (formula "27") (term "0,1,0,0,0,0,0"))
   (rule "concrete_and_2" (formula "27") (term "1,0,0,0,0,0"))
   (rule "concrete_or_4" (formula "27") (term "0,0,0,0,0"))
   (rule "inEqSimp_contradInEq0" (formula "27") (term "1,0,0,0,0") (ifseqformula "5"))
   (rule "qeq_literals" (formula "27") (term "0,1,0,0,0,0"))
   (rule "concrete_and_2" (formula "27") (term "1,0,0,0,0"))
   (rule "concrete_or_4" (formula "27") (term "0,0,0,0"))
   (rule "inEqSimp_contradInEq1" (formula "27") (term "1,0,0,0") (ifseqformula "7"))
   (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1,0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "27") (term "1,1,0,0,1,0,0,0"))
   (rule "times_zero_1" (formula "27") (term "1,0,0,1,0,0,0"))
   (rule "add_zero_right" (formula "27") (term "0,0,1,0,0,0"))
   (rule "leq_literals" (formula "27") (term "0,1,0,0,0"))
   (rule "concrete_and_2" (formula "27") (term "1,0,0,0"))
   (rule "concrete_or_4" (formula "27") (term "0,0,0"))
   (rule "cut_direct" (formula "17") (term "0"))
   (branch "CUT: code <= 0 TRUE"
      (rule "concrete_or_1" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "inEqSimp_subsumption0" (formula "14") (ifseqformula "17"))
      (rule "leq_literals" (formula "14") (term "0"))
      (rule "concrete_or_1" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0,0") (ifseqformula "9"))
      (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "42"))
      (rule "concrete_or_2" (formula "22"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0,0") (ifseqformula "9"))
      (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "41"))
      (rule "concrete_or_2" (formula "19"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0") (ifseqformula "9"))
      (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "45"))
      (rule "concrete_or_2" (formula "21"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0,0") (ifseqformula "9"))
      (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "41"))
      (rule "concrete_or_2" (formula "17"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0,0") (ifseqformula "9"))
      (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "43"))
      (rule "concrete_or_2" (formula "19"))
      (rule "allLeft" (formula "31") (inst "t=i_0"))
      (rule "eqClose" (formula "31") (term "0,1"))
      (rule "concrete_not_1" (formula "31") (term "1"))
      (rule "concrete_or_4" (formula "31"))
      (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "31") (term "1") (ifseqformula "4"))
      (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1"))
      (rule "add_literals" (formula "31") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "31") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "31") (term "0,0,1"))
      (rule "leq_literals" (formula "31") (term "0,1"))
      (rule "concrete_and_2" (formula "31") (term "1"))
      (rule "concrete_or_4" (formula "31"))
      (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "2"))
      (rule "qeq_literals" (formula "31") (term "0,0"))
      (rule "concrete_and_2" (formula "31") (term "0"))
      (rule "concrete_or_2" (formula "31"))
      (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "31"))
      (rule "leq_literals" (formula "2") (term "0"))
      (rule "concrete_or_1" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "30"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (rule "concrete_and_2" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "CUT: code <= 0 FALSE"
      (rule "concrete_or_2" (formula "17"))
      (rule "notLeft" (formula "17"))
      (rule "inEqSimp_leqRight" (formula "29"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "1"))
      (rule "leq_literals" (formula "16") (term "0"))
      (rule "concrete_or_1" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "nnf_ex2all" (formula "28"))
      (rule "nnf_notAnd" (formula "1") (term "0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0,0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0,0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,1,0,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,1,0,0,0,0,0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0,0") (ifseqformula "11"))
      (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "43"))
      (rule "concrete_or_2" (formula "23"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,0") (ifseqformula "11"))
      (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "45"))
      (rule "concrete_or_2" (formula "21"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "11"))
      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "43"))
      (rule "concrete_or_2" (formula "20"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,0") (ifseqformula "11"))
      (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "42"))
      (rule "concrete_or_2" (formula "18"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0,0") (ifseqformula "11"))
      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "44"))
      (rule "concrete_or_2" (formula "20"))
      (rule "allLeft" (formula "32") (inst "t=i_0"))
      (rule "eqClose" (formula "32") (term "0,1"))
      (rule "concrete_not_1" (formula "32") (term "1"))
      (rule "concrete_or_4" (formula "32"))
      (rule "inEqSimp_commuteGeq" (formula "32") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "32") (term "1,0") (ifseqformula "5"))
      (rule "qeq_literals" (formula "32") (term "0,1,0"))
      (rule "concrete_and_2" (formula "32") (term "1,0"))
      (rule "concrete_or_4" (formula "32") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "32") (term "1") (ifseqformula "6"))
      (rule "inEqSimp_homoInEq1" (formula "32") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0,1"))
      (rule "add_literals" (formula "32") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "32") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "32") (term "0,0,1"))
      (rule "leq_literals" (formula "32") (term "0,1"))
      (rule "concrete_and_2" (formula "32") (term "1"))
      (rule "concrete_or_4" (formula "32"))
      (rule "inEqSimp_contradInEq1" (formula "32") (ifseqformula "4"))
      (rule "qeq_literals" (formula "32") (term "0"))
      (rule "concrete_and_2" (formula "32"))
      (rule "closeFalse" (formula "32"))
   )
)
)
}
