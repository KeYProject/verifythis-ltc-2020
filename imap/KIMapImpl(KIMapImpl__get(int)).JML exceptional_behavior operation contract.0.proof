\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jan 30 22:14:45 CET 2020
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=3000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Thu Jan 30 22:14:45 CET 2020
contract=KIMapImpl[KIMapImpl\\:\\:get(int)].JML exceptional_behavior operation contract.0
name=KIMapImpl[KIMapImpl\\:\\:get(int)].JML exceptional_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "49ea85945cd6c693d72d27b4476aa0916bad8383"))

(autoModeTime "2703")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "id,self,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "5") (term "0"))
(rule "nnf_notAnd" (formula "5") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0"))
(rule "Class_invariant_axiom_for_KIMapImpl" (formula "6") (inst "j=j") (inst "x=x") (inst "j_0=j_0") (inst "j_1=j_1") (inst "i=i") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "eqSymm" (formula "11") (term "1,0,1,0"))
(rule "eqSymm" (formula "10") (term "0,1,0,0"))
(rule "eqSymm" (formula "16"))
(rule "eqSymm" (formula "7"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0,0"))
(rule "polySimp_addComm1" (formula "10") (term "0,1,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_gtToGeq" (formula "6"))
(rule "times_zero_1" (formula "6") (term "1,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,0,0"))
(rule "mul_literals" (formula "12") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,1,0"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "10") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "0,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6"))
(rule "mul_literals" (formula "6") (term "1"))
(rule "commuteUnion" (formula "13") (term "1,1"))
(rule "nnf_imp2or" (formula "12") (term "0"))
(rule "nnf_imp2or" (formula "10") (term "0,0"))
(rule "nnf_notAnd" (formula "12") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "12") (term "0,0,0"))
(rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "12") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
(rule "mul_literals" (formula "12") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "12") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "12") (term "0,0,1,0,0"))
(rule "add_literals" (formula "12") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "12") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "10") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
(rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0,0"))
(rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,0,0"))
(rule "commute_or_2" (formula "12") (term "0"))
(rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_get,savedHeapBefore_get"))
 (builtin "One Step Simplification" (formula "18"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "pos"))
(rule "commute_or" (formula "12") (term "0,0"))
(rule "commute_or_2" (formula "10") (term "0,0,0"))
(rule "cnf_eqv" (formula "11") (term "0"))
(rule "nnf_notEx" (formula "11") (term "1,0,0"))
(rule "nnf_notAnd" (formula "11") (term "0,1,0,0"))
(rule "nnf_notAnd" (formula "11") (term "0,0,1,0,0"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,1,0,0"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,1,0,0"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,1,0,0"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,1,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,1,0,0"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,1,0,0"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1,0,0"))
(rule "distr_forallAnd" (formula "11"))
(rule "andLeft" (formula "11"))
(rule "associativeLawUnion" (formula "14") (term "1"))
 (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_posOfId,result_0,exc_0") (contract "KIMapImpl[KIMapImpl::posOfId(int)].JML normal_behavior operation contract.0"))
(branch "Post (posOfId)"
    (builtin "One Step Simplification" (formula "20"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "18"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "17") (term "0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1"))
   (rule "polySimp_addComm1" (formula "18") (term "0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,1"))
   (rule "assignment" (formula "24") (term "1"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0"))
   (rule "mul_literals" (formula "17") (term "1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,1"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,1,1"))
   (rule "polySimp_elimOne" (formula "18") (term "0,1,1"))
   (rule "nnf_imp2or" (formula "17") (term "0,1"))
   (rule "nnf_notAnd" (formula "17") (term "0,0,1"))
   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,1"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,1"))
   (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
   (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "true_left" (formula "17"))
   (rule "Class_invariant_axiom_for_KIMapImpl" (formula "18") (inst "j=j") (inst "x=x") (inst "j_0=j_0") (inst "j_1=j_1") (inst "i=i") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "notLeft" (formula "20"))
   (rule "eqSymm" (formula "23") (term "1,0,1,0"))
   (rule "eqSymm" (formula "22") (term "0,1,0,0"))
   (rule "eqSymm" (formula "19"))
   (rule "eqSymm" (formula "25"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "18"))
   (rule "times_zero_1" (formula "18") (term "1,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20"))
   (rule "inEqSimp_commuteLeq" (formula "19"))
   (rule "applyEq" (formula "14") (term "0") (ifseqformula "22"))
   (rule "applyEq" (formula "22") (term "1") (ifseqformula "14"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18"))
   (rule "mul_literals" (formula "18") (term "1"))
   (rule "commuteUnion" (formula "14") (term "1,0"))
   (rule "eqSymm" (formula "14"))
   (rule "applyEq" (formula "21") (term "1") (ifseqformula "14"))
   (rule "nnf_imp2or" (formula "20") (term "0"))
   (rule "nnf_imp2or" (formula "18") (term "0,0"))
   (rule "nnf_notAnd" (formula "20") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
   (rule "mul_literals" (formula "20") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
   (rule "mul_literals" (formula "20") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0"))
   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0"))
   (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
   (rule "commute_and" (formula "17") (term "1"))
   (rule "commute_or_2" (formula "20") (term "0"))
   (rule "commute_or" (formula "20") (term "0,0"))
   (rule "ex_pull_out3" (formula "12") (term "0"))
   (rule "commute_or_2" (formula "18") (term "0,0,0"))
   (rule "cnf_eqv" (formula "18") (term "0"))
   (rule "nnf_notEx" (formula "18") (term "1,0,0"))
   (rule "nnf_notAnd" (formula "18") (term "0,1,0,0"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0,0"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,0,0"))
   (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,0,0"))
   (rule "distr_forallAnd" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "associativeLawUnion" (formula "14") (term "1"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "true_left" (formula "14"))
   (rule "associativeLawUnion" (formula "18") (term "1"))
   (rule "all_pull_out3" (formula "11") (term "0"))
   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
   (rule "applyEq" (formula "7") (term "0") (ifseqformula "8"))
   (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
   (rule "leq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "arrayLengthNotNegative" (formula "7") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "6"))
   (rule "leq_literals" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "arrayLengthIsAnInt" (formula "7") (term "1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "true_left" (formula "7"))
   (rule "shift_paren_or" (formula "11") (term "0,0"))
   (rule "cnf_rightDist" (formula "12") (term "0,0"))
   (rule "commute_or" (formula "12") (term "1,0,0"))
   (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "x"))
   (rule "shift_paren_or" (formula "11") (term "0,0,0"))
   (rule "swapQuantifiersAll" (formula "11"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
   (rule "commute_or" (formula "12") (term "1,0,0,0"))
   (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "1,0,0,1,0") (ifseqformula "1"))
   (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "21"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "greater_equal_than_comparison_simple" (formula "24") (term "1"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "ex_pull_out3" (formula "18") (term "0"))
   (rule "cnf_rightDist" (formula "18") (term "0,0"))
   (rule "commute_or" (formula "18") (term "1,0,0"))
   (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
   (rule "commute_or" (formula "18") (term "1,0,0,0"))
   (rule "ifElseSplit" (formula "23"))
   (branch "if x true"
       (builtin "One Step Simplification" (formula "24"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "1"))
      (rule "leq_literals" (formula "17") (term "0"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "true_left" (formula "17"))
      (rule "returnUnfold" (formula "24") (term "1") (inst "#v0=x"))
      (rule "variableDeclarationAssign" (formula "24") (term "1"))
      (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_1"))
      (rule "eval_order_array_access4" (formula "24") (term "1") (inst "#v0=x_arr"))
      (rule "variableDeclarationAssign" (formula "24") (term "1"))
      (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_arr"))
      (rule "assignment_read_attribute_this" (formula "24"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "assignment_array2" (formula "24"))
      (branch "Normal Execution (x_arr != null)"
          (builtin "One Step Simplification" (formula "24"))
         (rule "methodCallReturn" (formula "24") (term "1"))
         (rule "assignment" (formula "24") (term "1"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "methodCallEmpty" (formula "24") (term "1"))
         (rule "tryEmpty" (formula "24") (term "1"))
         (rule "emptyModality" (formula "24") (term "1"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "false_right" (formula "24"))
         (rule "allLeft" (formula "7") (inst "t=result_0"))
         (rule "replace_known_left" (formula "7") (term "0,1") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_commuteGeq" (formula "7") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "7") (term "1") (ifseqformula "18"))
         (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1"))
         (rule "add_literals" (formula "7") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "7") (term "0,0,1"))
         (rule "leq_literals" (formula "7") (term "0,1"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_contradInEq1" (formula "7") (ifseqformula "1"))
         (rule "qeq_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "closeFalse" (formula "7"))
      )
      (branch "Null Reference (x_arr = null)"
          (builtin "One Step Simplification" (formula "25"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (x_arr != null, but pos Out of Bounds!)"
         (rule "false_right" (formula "25"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "10"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0,1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
         (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
         (rule "polySimp_addComm0" (formula "12") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "12"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0"))
         (rule "polySimp_elimOne" (formula "12") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "19"))
         (rule "andLeft" (formula "12"))
         (rule "inEqSimp_homoInEq1" (formula "12"))
         (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
         (rule "add_literals" (formula "12") (term "1,1,0"))
         (rule "times_zero_1" (formula "12") (term "1,0"))
         (rule "add_zero_right" (formula "12") (term "0"))
         (rule "leq_literals" (formula "12"))
         (rule "closeFalse" (formula "12"))
      )
   )
   (branch "if x false"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "notLeft" (formula "1"))
      (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "true_left" (formula "17"))
      (rule "inEqSimp_geqRight" (formula "18"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "blockThrow" (formula "23") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "1"))
      (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
      (rule "qeq_literals" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "17"))
      (rule "leq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "throwUnfold" (formula "22") (term "1") (inst "#v0=i"))
      (rule "variableDeclarationAssign" (formula "22") (term "1"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "i"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,0") (ifseqformula "1"))
      (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "instanceCreationAssignment" (formula "23") (term "1") (inst "#v0=i_1"))
      (rule "variableDeclarationAssign" (formula "23") (term "1"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "i_1"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "23") (term "1") (inst "#v0=i_2"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "i_2"))
      (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "__NEW__"))
      (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "23") (term "1") (inst "#v0=i_3"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "i_3"))
      (rule "allocateInstance" (formula "23"))
       (builtin "One Step Simplification" (formula "24"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "2"))
      (rule "notLeft" (formula "1"))
      (rule "blockEmpty" (formula "26") (term "1"))
      (rule "assignment" (formula "26") (term "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "assignment_write_attribute_this" (formula "26"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallWithinClass" (formula "26") (term "1"))
      (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallSuper" (formula "26") (term "1"))
      (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallSuper" (formula "26") (term "1"))
      (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallSuper" (formula "26") (term "1"))
      (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallSuper" (formula "26") (term "1"))
      (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "blockEmpty" (formula "26") (term "1"))
      (rule "assignment_write_attribute_this" (formula "26"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "assignment_write_attribute_this" (formula "26"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "blockEmpty" (formula "26") (term "1"))
      (rule "methodCallReturnIgnoreResult" (formula "26") (term "1"))
      (rule "methodCallReturn" (formula "26") (term "1"))
      (rule "assignment" (formula "26") (term "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "blockEmpty" (formula "26") (term "1"))
      (rule "assignment" (formula "26") (term "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallSuper" (formula "26") (term "1"))
      (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallSuper" (formula "26") (term "1"))
      (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallSuper" (formula "26") (term "1"))
      (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallSuper" (formula "26") (term "1"))
      (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "blockEmpty" (formula "26") (term "1"))
      (rule "assignment_write_attribute_this" (formula "26"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "assignment_write_attribute_this" (formula "26"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "blockEmpty" (formula "26") (term "1"))
      (rule "assignment_write_attribute" (formula "26"))
      (branch "Normal Execution (i_1 != null)"
          (builtin "One Step Simplification" (formula "26"))
         (rule "assignment" (formula "26") (term "1"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "methodCallParamThrow" (formula "26") (term "1"))
         (rule "tryCatchThrow" (formula "26") (term "1"))
         (rule "ifElseUnfold" (formula "26") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_1"))
         (rule "equality_comparison_simple" (formula "26") (term "1"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "replace_known_right" (formula "26") (term "0,0,1,0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "ifElseSplit" (formula "26"))
         (branch "if x_1 true"
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_1 false"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "1"))
            (rule "ifElseSplit" (formula "26"))
            (branch "if i instanceof java.lang.Throwable true"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
               (rule "true_left" (formula "1"))
               (rule "variableDeclaration" (formula "26") (term "1") (newnames "e"))
               (rule "delete_unnecessary_cast" (formula "26") (term "1"))
                (builtin "One Step Simplification" (formula "27"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "26") (term "1"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "emptyModality" (formula "26") (term "1"))
                (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
               (rule "eqSymm" (formula "26") (term "1,0,0,1"))
               (rule "Class_invariant_axiom_for_KIMapImpl" (formula "26") (term "0") (inst "j=j") (inst "x=x_2") (inst "j_0=j_0") (inst "j_1=j_1") (inst "i=i_4") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "eqSymm" (formula "26") (term "0,1,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "26") (term "1,0,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "26") (term "0,1,0,0,1,0,0,0,0"))
               (rule "eqSymm" (formula "26") (term "1,0,1,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,1,1,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,1,1,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,0,1,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,1,1,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,1,1,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,0,1,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,0,1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "26") (term "0,1,0,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,1,0,1,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,1,1,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,1,1,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,0,1,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,1,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,1,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,0,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,0,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,1,0,1,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,1,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,0,1,0,0,0,0"))
               (rule "inEqSimp_gtToGeq" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "0,0,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "26") (term "1,0,0,1,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,1,0,0,1,0,1,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,0,1,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,0,0,1,0,0,1,0,0,0,0"))
               (rule "dismissNonSelectedField" (formula "26") (term "1,1,1,0,1,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "0,1,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "26") (term "1,0,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "0,1,0,0,0,0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "0,1,0,0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,1,0,0,0,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "26") (term "1,1,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,1,0,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,1,0,0,1,0,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,1,0,0,1,0,1,0,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,1,0,0,1,0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,1,0,0,1,0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,1,0,0,1,0,1,0,0,0"))
               (rule "pullOutSelect" (formula "26") (term "0,0,1,1,1,0") (inst "selectSK=KIMapImpl_values_0"))
               (rule "applyEq" (formula "27") (term "0,0,1,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "1,1,1,0,1,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
               (rule "applyEqReverse" (formula "27") (term "0,0,1,1,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "0,0,1,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "1,1,1,0,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "eqSymm" (formula "26") (term "0,1,0,0,0,0,0,0"))
               (rule "eqSymm" (formula "26") (term "1,0,0,0,0,0,0,0"))
               (rule "replace_known_right" (formula "26") (term "0,1,0,0,0,0,0,0,0,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "applyEq" (formula "26") (term "1,1,0,0,0,0,0,0,0") (ifseqformula "10"))
               (rule "pullOutSelect" (formula "26") (term "0,0,0,0,0,0,0,0,0,0,0") (inst "selectSK=KIMapImpl_keys_0"))
               (rule "applyEq" (formula "27") (term "1,1,0,1,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "1,1,0,1,0,1,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "0,1,1,1,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "1,1,1,0,1,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "1,0,0,1,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "0,0,1,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
               (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "1,1,0,1,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "1,1,0,1,0,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "0,1,1,1,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "1,1,1,0,1,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "1,0,0,1,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "24")))
               (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "0,0,1,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "eqSymm" (formula "26") (term "0,1,0,0,0,0,0,0"))
               (rule "replace_known_left" (formula "26") (term "0,0,0,0,0,0,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
               (rule "inEqSimp_commuteGeq" (formula "26") (term "1,0,0,0,0,0"))
               (rule "pullOutSelect" (formula "26") (term "0,0,0,1,0,0,0") (inst "selectSK=KIMap_m_0"))
               (rule "applyEq" (formula "27") (term "0,0,1,0,1,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
               (rule "applyEqReverse" (formula "27") (term "0,0,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "0,0,1,0,1,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "26") (term "0,0,0,0,0,0,0") (inst "selectSK=KIMapImpl_count_0"))
               (rule "applyEq" (formula "27") (term "1,1,1,0,0,1,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "1,1,1,0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "27") (term "0,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
               (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "1,1,1,0,0,1,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "1,1,1,0,0,0,1,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "27") (term "0,1,0,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_left" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0,0,0"))
               (rule "replace_known_left" (formula "26") (term "0,0,0,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "pullOutSelect" (formula "26") (term "0,1,0") (inst "selectSK=KIMap_footprint_0"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
               (rule "applyEqReverse" (formula "27") (term "0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "applyEq" (formula "26") (term "0,1,0") (ifseqformula "19"))
               (rule "eqSymm" (formula "26") (term "1,0"))
               (rule "commuteUnion" (formula "26") (term "1,0,1,0"))
               (rule "eqSymm" (formula "26") (term "1,0"))
               (rule "nnf_imp2or" (formula "26") (term "0,1,0,0"))
               (rule "nnf_imp2or" (formula "26") (term "0,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "26") (term "0,0,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,1,0,0"))
               (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,0,0,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1,0,0"))
               (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,1,0,0"))
               (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,0,0"))
               (rule "nnf_notAnd" (formula "26") (term "0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "add_literals" (formula "26") (term "0,0,0,1,0,0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "26") (term "0,0,1,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0,0,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "26") (term "0,0,0,0,0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "26") (term "1,0,0,0,0,0,0,0,0,0"))
               (rule "associativeLawUnion" (formula "26") (term "1,1,0"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "andRight" (formula "26"))
               (branch "Case 1"
                  (rule "andRight" (formula "26"))
                  (branch "Case 1"
                     (rule "andRight" (formula "26"))
                     (branch "Case 1"
                        (rule "allRight" (formula "26") (inst "sk=j_1_0"))
                        (rule "allRight" (formula "26") (inst "sk=i_4_0"))
                        (rule "orRight" (formula "26"))
                        (rule "orRight" (formula "26"))
                        (rule "notRight" (formula "28"))
                        (rule "orRight" (formula "27"))
                        (rule "inEqSimp_geqRight" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "29"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_leqRight" (formula "29"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1"))
                        (rule "polySimp_rightDist" (formula "2") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                        (rule "mul_literals" (formula "2") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "25")))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "4"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfCreate" (formula "4"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "25")))
                        (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "4"))
                        (rule "allLeft" (formula "17") (inst "t=j_1_0"))
                        (rule "eqSymm" (formula "17") (term "0,1,0"))
                        (rule "inEqSimp_commuteGeq" (formula "17") (term "1,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "17") (term "1,0,0"))
                        (rule "applyEq" (formula "17") (term "1,0,1,0") (ifseqformula "4"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (term "1,0,0,0") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1,0,0,0"))
                        (rule "add_literals" (formula "17") (term "1,1,0,0,1,0,0,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0,0"))
                        (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0"))
                        (rule "leq_literals" (formula "17") (term "0,1,0,0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "allLeft" (formula "17") (inst "t=i_4_0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "17") (term "0,0"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "2"))
                        (rule "andLeft" (formula "17"))
                        (rule "inEqSimp_homoInEq1" (formula "17"))
                        (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                        (rule "add_literals" (formula "17") (term "1,1,0"))
                        (rule "times_zero_1" (formula "17") (term "1,0"))
                        (rule "add_zero_right" (formula "17") (term "0"))
                        (rule "leq_literals" (formula "17"))
                        (rule "closeFalse" (formula "17"))
                     )
                     (branch "Case 2"
                        (rule "allRight" (formula "26") (inst "sk=x_2_0"))
                        (rule "eqSymm" (formula "26") (term "1,0,1"))
                        (rule "equiv_right" (formula "26"))
                        (branch "Case 1"
                           (rule "nnf_ex2all" (formula "27"))
                           (rule "nnf_notAnd" (formula "1") (term "0"))
                           (rule "nnf_notAnd" (formula "1") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                           (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                           (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                           (rule "allLeft" (formula "17") (inst "t=x_2_0"))
                           (rule "exLeft" (formula "17") (inst "sk=j_0_0"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "eqSymm" (formula "19") (term "1"))
                           (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "inEqSimp_homoInEq0" (formula "18"))
                           (rule "polySimp_addComm1" (formula "18") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                           (rule "mul_literals" (formula "18") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                           (rule "allLeft" (formula "21") (inst "t=j_0_0"))
                           (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                           (rule "applyEq" (formula "21") (term "1,0,0,0") (ifseqformula "19"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "18"))
                           (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                           (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "21") (term "0,0,1"))
                           (rule "leq_literals" (formula "21") (term "0,1"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "17"))
                           (rule "qeq_literals" (formula "21") (term "0,1"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "allLeft" (formula "16") (inst "t=j_0_0"))
                           (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                           (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "20"))
                           (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "allLeft" (formula "1") (inst "t=j_0_0"))
                           (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "18"))
                           (rule "qeq_literals" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "19"))
                           (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                           (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "1") (term "0,0,0"))
                           (rule "leq_literals" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfCreate" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                           (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "1"))
                           (rule "close" (formula "27") (ifseqformula "20"))
                        )
                        (branch "Case 2"
                           (rule "exLeft" (formula "1") (inst "sk=j_0_0"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfCreate" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "24")))
                           (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "allLeft" (formula "17") (inst "t=j_0_0"))
                           (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                           (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "3"))
                           (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                           (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "17") (term "0,0,1"))
                           (rule "leq_literals" (formula "17") (term "0,1"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "17") (term "0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "closeFalse" (formula "17"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "allRight" (formula "26") (inst "sk=j_0"))
                     (rule "orRight" (formula "26"))
                     (rule "orRight" (formula "26"))
                     (rule "inEqSimp_leqRight" (formula "26"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "27"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "28") (term "1") (inst "selectSK=arr_0"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                     (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "pullOutSelect" (formula "28") (term "1,0") (inst "selectSK=arr_1"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                     (rule "applyEqReverse" (formula "29") (term "1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "allLeft" (formula "18") (inst "t=j_0"))
                     (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "2"))
                     (rule "qeq_literals" (formula "18") (term "0,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "18"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Case 2"
                  (rule "allRight" (formula "26") (inst "sk=f_0"))
                  (rule "allRight" (formula "26") (inst "sk=o_0"))
                  (rule "orRight" (formula "26"))
                  (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "28"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                  (rule "simplifySelectOfStore" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0"))
                  (rule "eqSymm" (formula "1") (term "1,0,0"))
                  (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                  (rule "simplifySelectOfCreate" (formula "1"))
                  (rule "castDel" (formula "1") (term "1,0"))
                  (rule "eqSymm" (formula "1") (term "0,0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commute_and" (formula "4") (term "0,0"))
                  (rule "commute_and" (formula "3") (term "0,0"))
                  (rule "commute_and" (formula "2") (term "0,0"))
                  (rule "commute_and" (formula "1") (term "0,0"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch "f_0 = java.lang.Object::<created> & o_0 = i_3 TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "applyEq" (formula "3") (term "0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "2"))
                     (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "notRight" (formula "28"))
                     (rule "applyEqRigid" (formula "29") (term "2,0") (ifseqformula "2"))
                     (rule "narrowSelectType" (formula "29") (term "0") (ifseqformula "5"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                     (rule "close" (formula "24") (ifseqformula "1"))
                  )
                  (branch "f_0 = java.lang.Object::<created> & o_0 = i_3 FALSE"
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "f_0 = java.lang.Throwable::$cause & o_0 = i_3 TRUE"
                        (rule "andLeft" (formula "1"))
                        (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")))
                        (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "applyEq" (formula "22") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "false_right" (formula "22"))
                        (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "notRight" (formula "28"))
                        (rule "applyEqRigid" (formula "29") (term "2,0") (ifseqformula "2"))
                        (rule "narrowSelectType" (formula "29") (term "0") (ifseqformula "5"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "24") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.lang.Throwable::$cause & o_0 = i_3 FALSE"
                        (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "f_0 = java.lang.Throwable::$message & o_0 = i_3 TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "false_right" (formula "23"))
                           (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "false_right" (formula "23"))
                           (rule "applyEqRigid" (formula "3") (term "0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "applyEqRigid" (formula "29") (term "2,0") (ifseqformula "1"))
                           (rule "narrowSelectType" (formula "29") (term "0") (ifseqformula "4"))
                           (rule "applyEq" (formula "28") (term "0,0,0") (ifseqformula "2"))
                           (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "notRight" (formula "28"))
                           (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                           (rule "close" (formula "24") (ifseqformula "1"))
                        )
                        (branch "f_0 = java.lang.Throwable::$message & o_0 = i_3 FALSE"
                           (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "f_0 = java.lang.Object::<initialized> & o_0 = i_3 TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "33") (term "1") (ifseqformula "3"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "applyEq" (formula "31") (term "1,0,0,1") (ifseqformula "2"))
                              (rule "replace_known_right" (formula "31") (term "0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "notRight" (formula "31"))
                              (rule "applyEqRigid" (formula "32") (term "2,0") (ifseqformula "2"))
                              (rule "narrowSelectType" (formula "32") (term "0") (ifseqformula "5"))
                              (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "false_right" (formula "25"))
                              (rule "applyEqRigid" (formula "24") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "false_right" (formula "24"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "false_right" (formula "23"))
                              (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "1"))
                              (rule "eqSymm" (formula "3"))
                              (rule "close" (formula "23") (ifseqformula "3"))
                           )
                           (branch "f_0 = java.lang.Object::<initialized> & o_0 = i_3 FALSE"
                              (rule "close" (formula "32") (ifseqformula "1"))
                           )
                        )
                     )
                  )
               )
            )
            (branch "if i instanceof java.lang.Throwable false"
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (i_1 = null)"
         (rule "false_right" (formula "27"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Exceptional Post (posOfId)"
    (builtin "One Step Simplification" (formula "15"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "15"))
   (rule "close" (formula "18") (ifseqformula "17"))
)
(branch "Pre (posOfId)"
    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
   (rule "Class_invariant_axiom_for_KIMapImpl" (formula "19") (inst "j=j") (inst "x=x") (inst "j_0=j_0") (inst "j_1=j_1") (inst "i=i") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
   (rule "eqSymm" (formula "19") (term "1,0,1,0,1,0,0"))
   (rule "eqSymm" (formula "19") (term "0,1,0,0,0,0,0"))
   (rule "eqSymm" (formula "19") (term "0,1,0,0,1,0,0,0"))
   (rule "eqSymm" (formula "19") (term "1,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "19") (term "0,1,0,0,0,0,0") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "7")))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,0,1,0,0,0"))
   (rule "polySimp_addComm1" (formula "19") (term "0,1,0,0,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0,0,1,0,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "19") (term "0,0,0,0,0"))
   (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "0,1,0,0,0,0"))
   (rule "replace_known_left" (formula "19") (term "0,1,0,0,0,0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "inEqSimp_commuteLeq" (formula "19") (term "1,0,0,0,0"))
   (rule "replace_known_left" (formula "19") (term "1,0,0,0,0") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "applyEq" (formula "19") (term "0,1") (ifseqformula "14"))
   (rule "eqSymm" (formula "19") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0,1,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0,1,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "1,0,0,0,0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,0,0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0,0"))
   (rule "mul_literals" (formula "19") (term "1,0,0,0,0"))
   (rule "replace_known_left" (formula "19") (term "0,0,0,0") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,1,0"))
   (rule "commuteUnion" (formula "19") (term "1,0,1"))
   (rule "eqSymm" (formula "19") (term "1"))
   (rule "nnf_imp2or" (formula "19") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,1,0"))
   (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "1,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1,0"))
   (rule "nnf_imp2or" (formula "19") (term "0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "19") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "19") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0,0,0,0,0,0"))
   (rule "add_literals" (formula "19") (term "0,0,0,1,0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "19") (term "0,0,1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "19") (term "0,0,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "19") (term "1,0,0,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "19") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "19") (term "1,0,0,0,0,0,0,0,0"))
   (rule "associativeLawUnion" (formula "19") (term "1,1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "andRight" (formula "19"))
   (branch "Case 1"
      (rule "andRight" (formula "19"))
      (branch "Case 1"
         (rule "allRight" (formula "19") (inst "sk=j_1_0"))
         (rule "allRight" (formula "19") (inst "sk=i_0"))
         (rule "orRight" (formula "19"))
         (rule "orRight" (formula "19"))
         (rule "notRight" (formula "21"))
         (rule "orRight" (formula "20"))
         (rule "inEqSimp_geqRight" (formula "22"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "21"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "22"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "ex_pull_out3" (formula "16") (term "0"))
         (rule "cnf_rightDist" (formula "16") (term "0,0"))
         (rule "commute_or" (formula "16") (term "1,0,0"))
         (rule "all_pull_out3" (formula "15") (term "0"))
         (rule "shift_paren_or" (formula "15") (term "0,0"))
         (rule "shift_paren_or" (formula "15") (term "0,0,0"))
         (rule "swapQuantifiersAll" (formula "15"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "arrayLengthNotNegative" (formula "11") (term "0"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
         (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "10"))
         (rule "leq_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "arrayLengthIsAnInt" (formula "11") (term "1"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "arrayLengthIsAnInt" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "arrayLengthNotNegative" (formula "11") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "10"))
         (rule "leq_literals" (formula "11") (term "0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "true_left" (formula "11"))
         (rule "cnf_rightDist" (formula "16") (term "0,0,0"))
         (rule "commute_or" (formula "16") (term "1,0,0,0"))
         (rule "allLeft" (formula "14") (inst "t=j_1_0"))
         (rule "eqSymm" (formula "14") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
         (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0"))
         (rule "applyEq" (formula "14") (term "1,0,1,0") (ifseqformula "4"))
         (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "14") (term "1,1,0,0,1,0,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
         (rule "leq_literals" (formula "14") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,0,0,1,0") (ifseqformula "5"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "allLeft" (formula "15") (inst "t=i_0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
         (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "15") (term "0,0,1"))
         (rule "leq_literals" (formula "15") (term "0,1"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "2"))
         (rule "qeq_literals" (formula "15") (term "0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "closeFalse" (formula "15"))
      )
      (branch "Case 2"
         (rule "allRight" (formula "19") (inst "sk=x_0"))
         (rule "eqSymm" (formula "19") (term "1,0,1"))
         (rule "equiv_right" (formula "19"))
         (branch "Case 1"
            (rule "nnf_ex2all" (formula "20"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "ex_pull_out3" (formula "14") (term "0"))
            (rule "cnf_rightDist" (formula "14") (term "0,0"))
            (rule "commute_or" (formula "14") (term "1,0,0"))
            (rule "all_pull_out3" (formula "13") (term "0"))
            (rule "shift_paren_or" (formula "13") (term "0,0"))
            (rule "shift_paren_or" (formula "13") (term "0,0,0"))
            (rule "swapQuantifiersAll" (formula "13"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
            (rule "commute_or" (formula "14") (term "1,0,0,0"))
            (rule "arrayLengthNotNegative" (formula "9") (term "0"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "8"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "arrayLengthIsAnInt" (formula "9") (term "1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "arrayLengthNotNegative" (formula "9") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "8"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "1,0,0,1,0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "allLeft" (formula "15") (inst "t=x_0"))
            (rule "exLeft" (formula "15") (inst "sk=j_0_0"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "15"))
            (rule "eqSymm" (formula "17") (term "1"))
            (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_homoInEq0" (formula "16"))
            (rule "polySimp_addComm1" (formula "16") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1"))
            (rule "polySimp_rightDist" (formula "16") (term "1"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
            (rule "mul_literals" (formula "16") (term "0,1"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1"))
            (rule "allLeft" (formula "1") (inst "t=j_0_0"))
            (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "17"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "leq_literals" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "16"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Case 2"
            (rule "exLeft" (formula "1") (inst "sk=j_0_0"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
            (rule "ex_pull_out3" (formula "15") (term "0"))
            (rule "cnf_rightDist" (formula "15") (term "0,0"))
            (rule "commute_or" (formula "15") (term "1,0,0"))
            (rule "all_pull_out3" (formula "14") (term "0"))
            (rule "shift_paren_or" (formula "14") (term "0,0"))
            (rule "shift_paren_or" (formula "14") (term "0,0,0"))
            (rule "swapQuantifiersAll" (formula "14"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
            (rule "commute_or" (formula "15") (term "1,0,0,0"))
            (rule "arrayLengthNotNegative" (formula "10") (term "0"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "9"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthNotNegative" (formula "10") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "9"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthIsAnInt" (formula "10") (term "1"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "arrayLengthIsAnInt" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1,0,0,1,0") (ifseqformula "4"))
            (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "allLeft" (formula "9") (inst "t=j_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "9") (term "1,0"))
            (rule "applyEq" (formula "9") (term "0,0,1") (ifseqformula "3"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "0,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "9") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_contradInEq1" (formula "9") (term "0") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "9") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0"))
            (rule "add_literals" (formula "9") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0"))
            (rule "leq_literals" (formula "9") (term "0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "notLeft" (formula "9"))
            (rule "allLeft" (formula "17") (inst "t=j_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
            (rule "applyEq" (formula "17") (term "1,0,0,0") (ifseqformula "3"))
            (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
            (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "17") (term "0,0,1"))
            (rule "leq_literals" (formula "17") (term "0,1"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "1"))
            (rule "qeq_literals" (formula "17") (term "0,1"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "allLeft" (formula "15") (inst "t=j_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "15") (term "0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "2"))
            (rule "andLeft" (formula "15"))
            (rule "inEqSimp_homoInEq1" (formula "15"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
            (rule "add_literals" (formula "15") (term "1,1,0"))
            (rule "times_zero_1" (formula "15") (term "1,0"))
            (rule "add_zero_right" (formula "15") (term "0"))
            (rule "leq_literals" (formula "15"))
            (rule "closeFalse" (formula "15"))
         )
      )
   )
   (branch "Case 2"
      (rule "allRight" (formula "19") (inst "sk=j_0"))
      (rule "orRight" (formula "19"))
      (rule "orRight" (formula "19"))
      (rule "inEqSimp_geqRight" (formula "20"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "20"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "ex_pull_out3" (formula "14") (term "0"))
      (rule "cnf_rightDist" (formula "14") (term "0,0"))
      (rule "commute_or" (formula "14") (term "1,0,0"))
      (rule "all_pull_out3" (formula "13") (term "0"))
      (rule "shift_paren_or" (formula "13") (term "0,0"))
      (rule "shift_paren_or" (formula "13") (term "0,0,0"))
      (rule "swapQuantifiersAll" (formula "13"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
      (rule "commute_or" (formula "14") (term "1,0,0,0"))
      (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "arrayLengthNotNegative" (formula "9") (term "0"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
      (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "8"))
      (rule "leq_literals" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "arrayLengthIsAnInt" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "arrayLengthNotNegative" (formula "9") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "8"))
      (rule "leq_literals" (formula "9") (term "0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "allLeft" (formula "15") (inst "t=j_0"))
      (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "22"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "15") (term "0,0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "15"))
      (rule "andLeft" (formula "2"))
      (rule "inEqSimp_homoInEq1" (formula "2"))
      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "1,1,0"))
      (rule "times_zero_1" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "leq_literals" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
)
)
}
