\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jan 30 22:15:49 CET 2020
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=3000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Thu Jan 30 22:15:49 CET 2020
contract=KIMapImpl[KIMapImpl\\:\\:contains(int)].JML normal_behavior operation contract.0
name=KIMapImpl[KIMapImpl\\:\\:contains(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "49ea85945cd6c693d72d27b4476aa0916bad8383"))

(autoModeTime "2038")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "key,self,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0,0,0,0,0,0,1"))
(rule "Class_invariant_axiom_for_KIMapImpl" (formula "5") (inst "j=j") (inst "x=x") (inst "j_0=j_0") (inst "j_1=j_1") (inst "i=i") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "eqSymm" (formula "10") (term "1,0,1,0"))
(rule "eqSymm" (formula "9") (term "0,1,0,0"))
(rule "eqSymm" (formula "15"))
(rule "eqSymm" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0"))
(rule "polySimp_addComm1" (formula "9") (term "0,1,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_gtToGeq" (formula "5"))
(rule "times_zero_1" (formula "5") (term "1,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0"))
(rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "9") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "0,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5"))
(rule "mul_literals" (formula "5") (term "1"))
(rule "commuteUnion" (formula "12") (term "1,1"))
(rule "nnf_imp2or" (formula "11") (term "0"))
(rule "nnf_imp2or" (formula "9") (term "0,0"))
(rule "nnf_notAnd" (formula "11") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,0"))
(rule "nnf_notAnd" (formula "9") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
(rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0"))
(rule "commute_or_2" (formula "11") (term "0"))
(rule "commute_or" (formula "11") (term "0,0"))
(rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_contains,savedHeapBefore_contains"))
 (builtin "One Step Simplification" (formula "17"))
(rule "variableDeclarationAssign" (formula "17") (term "1"))
(rule "variableDeclaration" (formula "17") (term "1") (newnames "pos"))
(rule "commute_or_2" (formula "9") (term "0,0,0"))
(rule "cnf_eqv" (formula "10") (term "0"))
(rule "nnf_notEx" (formula "10") (term "1,0,0"))
(rule "nnf_notAnd" (formula "10") (term "0,1,0,0"))
(rule "nnf_notAnd" (formula "10") (term "0,0,1,0,0"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,1,0,0"))
(rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,1,0,0"))
(rule "add_zero_right" (formula "10") (term "0,0,0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0,0"))
(rule "mul_literals" (formula "10") (term "1,0,0,0,1,0,0"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,1,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,1,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,1,0,0"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0,1,0,0"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1,0,0"))
(rule "distr_forallAnd" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "associativeLawUnion" (formula "13") (term "1"))
 (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_posOfId,result_0,exc_0") (contract "KIMapImpl[KIMapImpl::posOfId(int)].JML normal_behavior operation contract.0"))
(branch "Post (posOfId)"
    (builtin "One Step Simplification" (formula "14"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "17"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "0"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "16") (term "0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1"))
   (rule "polySimp_addComm1" (formula "17") (term "0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
   (rule "assignment" (formula "23") (term "1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0"))
   (rule "mul_literals" (formula "16") (term "1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "1,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "0,1,1"))
   (rule "polySimp_elimOne" (formula "17") (term "0,1,1"))
   (rule "nnf_imp2or" (formula "16") (term "0,1"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,1"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0,1"))
   (rule "Class_invariant_axiom_for_KIMapImpl" (formula "18") (inst "j=j") (inst "x=x") (inst "j_0=j_0") (inst "j_1=j_1") (inst "i=i") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "18"))
   (rule "notLeft" (formula "19"))
   (rule "andLeft" (formula "18"))
   (rule "eqSymm" (formula "23") (term "1,0,1,0"))
   (rule "eqSymm" (formula "22") (term "0,1,0,0"))
   (rule "eqSymm" (formula "26"))
   (rule "eqSymm" (formula "19"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "21") (term "0,1,0,0,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "18"))
   (rule "times_zero_1" (formula "18") (term "1,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "20"))
   (rule "inEqSimp_commuteLeq" (formula "19"))
   (rule "applyEq" (formula "22") (term "0") (ifseqformula "13"))
   (rule "eqSymm" (formula "22"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "19") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "19") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "19") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "19") (term "0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18"))
   (rule "mul_literals" (formula "18") (term "1"))
   (rule "commuteUnion" (formula "21") (term "1,0"))
   (rule "eqSymm" (formula "21"))
   (rule "applyEq" (formula "13") (term "1") (ifseqformula "21"))
   (rule "nnf_imp2or" (formula "20") (term "0"))
   (rule "nnf_imp2or" (formula "18") (term "0,0"))
   (rule "nnf_notAnd" (formula "20") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "20") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "20") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "20") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "20") (term "0,0,0"))
   (rule "times_zero_1" (formula "20") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "20") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
   (rule "mul_literals" (formula "20") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0"))
   (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0"))
   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0"))
   (rule "commute_and" (formula "17") (term "1"))
   (rule "commute_or_2" (formula "20") (term "0"))
   (rule "returnUnfold" (formula "26") (term "1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "26") (term "1"))
   (rule "variableDeclaration" (formula "26") (term "1") (newnames "x"))
   (rule "commute_or" (formula "20") (term "0,0"))
   (rule "commute_or_2" (formula "18") (term "0,0,0"))
   (rule "ex_pull_out3" (formula "11") (term "0"))
   (rule "cnf_eqv" (formula "18") (term "0"))
   (rule "nnf_notEx" (formula "18") (term "1,0,0"))
   (rule "nnf_notAnd" (formula "18") (term "0,1,0,0"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0,0"))
   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0,0"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,0,0"))
   (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,0"))
   (rule "distr_forallAnd" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "associativeLawUnion" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "true_left" (formula "19"))
   (rule "associativeLawUnion" (formula "13") (term "1"))
   (rule "all_pull_out3" (formula "10") (term "0"))
   (rule "arrayLengthNotNegative" (formula "6") (term "0"))
   (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
   (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "5"))
   (rule "leq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "arrayLengthNotNegative" (formula "6") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "5"))
   (rule "leq_literals" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "arrayLengthIsAnInt" (formula "6") (term "1"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "shift_paren_or" (formula "10") (term "0,0"))
   (rule "cnf_rightDist" (formula "11") (term "0,0"))
   (rule "commute_or" (formula "11") (term "1,0,0"))
   (rule "shift_paren_or" (formula "10") (term "0,0,0"))
   (rule "swapQuantifiersAll" (formula "10"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "greater_equal_than_comparison_simple" (formula "23") (term "1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
   (rule "commute_or" (formula "11") (term "1,0,0,0"))
   (rule "methodCallReturn" (formula "23") (term "1"))
   (rule "assignment" (formula "23") (term "1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "methodCallEmpty" (formula "23") (term "1"))
   (rule "tryEmpty" (formula "23") (term "1"))
   (rule "emptyModality" (formula "23") (term "1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "Class_invariant_axiom_for_KIMapImpl" (formula "23") (term "1") (inst "j=j") (inst "x=x_1") (inst "j_0=j_0") (inst "j_1=j_1") (inst "i=i") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
   (rule "eqSymm" (formula "23") (term "1,0,0,0,0,0,0,1"))
   (rule "eqSymm" (formula "23") (term "0,1,0,0,1,0,0,0,1"))
   (rule "eqSymm" (formula "23") (term "1,0,1,0,1,0,0,1"))
   (rule "eqSymm" (formula "23") (term "0,1,0,0,0,0,0,1"))
   (rule "replace_known_right" (formula "23") (term "0,1,0,0,0,0,0,1") (ifseqformula "21"))
    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "6")))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,0,1,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "23") (term "0,1,0,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_gtToGeq" (formula "23") (term "0,0,0,0,0,1"))
   (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,1,0,0,0,0,1"))
   (rule "replace_known_left" (formula "23") (term "0,1,0,0,0,0,1") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,1,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "23") (term "1,0,0,0,0,1"))
   (rule "replace_known_left" (formula "23") (term "1,0,0,0,0,1") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "applyEq" (formula "23") (term "0,1,1") (ifseqformula "13"))
   (rule "eqSymm" (formula "23") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0,1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0,1,0,0,1"))
   (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,0,0,1"))
   (rule "mul_literals" (formula "23") (term "1,0,0,0,0,1"))
   (rule "replace_known_left" (formula "23") (term "0,0,0,0,1") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0,1"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0,1"))
   (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "23") (term "1,0,0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "23") (term "0,1,0,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "23") (term "0,1,0,0,0,0,0,0,0,1"))
   (rule "commuteUnion" (formula "23") (term "1,0,1,1"))
   (rule "eqSymm" (formula "23") (term "1,1"))
   (rule "nnf_imp2or" (formula "23") (term "0,1,0,1"))
   (rule "nnf_notAnd" (formula "23") (term "0,0,1,0,1"))
   (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,1,0,1"))
   (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,1,0,1"))
   (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,1,0,1"))
   (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,1"))
   (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,1,0,1"))
   (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0,1"))
   (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,1,0,1"))
   (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0,1"))
   (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0,1"))
   (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,1,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,1,0,1"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0,1"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,1,0,1"))
   (rule "nnf_imp2or" (formula "23") (term "0,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0,0,0,1"))
   (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0,0,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0,0,0,1"))
   (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0,0,0,1"))
   (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0,0,0,1"))
   (rule "cut_direct" (formula "16") (term "0"))
   (branch "CUT: result_0 <= -1 TRUE"
       (builtin "One Step Simplification" (formula "17"))
      (rule "inEqSimp_contradInEq0" (formula "18") (term "0") (ifseqformula "16"))
      (rule "qeq_literals" (formula "18") (term "0,0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "inEqSimp_contradInEq0" (formula "23") (term "0,1,0") (ifseqformula "16"))
      (rule "qeq_literals" (formula "23") (term "0,0,1,0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "inEqSimp_antiSymm" (formula "15") (ifseqformula "16"))
      (rule "applyEq" (formula "17") (term "0") (ifseqformula "15"))
      (rule "leq_literals" (formula "17"))
      (rule "true_left" (formula "17"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "15"))
      (rule "qeq_literals" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "ex_pull_out3" (formula "17") (term "0"))
      (rule "cnf_rightDist" (formula "17") (term "0,0"))
      (rule "commute_or" (formula "17") (term "1,0,0"))
      (rule "cnf_rightDist" (formula "17") (term "0,0,0"))
      (rule "commute_or" (formula "17") (term "1,0,0,0"))
      (rule "associativeLawUnion" (formula "21") (term "1,1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "andRight" (formula "21"))
      (branch "Case 1"
         (rule "notRight" (formula "21"))
         (rule "exLeft" (formula "1") (inst "sk=i_0"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq0" (formula "2"))
         (rule "polySimp_addComm1" (formula "2") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "4"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "1") (ifseqformula "5"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "allLeft" (formula "21") (inst "t=i_0"))
         (rule "replace_known_left" (formula "21") (term "0,1") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "21") (term "0") (ifseqformula "3"))
         (rule "qeq_literals" (formula "21") (term "0,0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "21"))
         (rule "andLeft" (formula "4"))
         (rule "inEqSimp_homoInEq1" (formula "4"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "1,1,0"))
         (rule "times_zero_1" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0"))
         (rule "leq_literals" (formula "4"))
         (rule "closeFalse" (formula "4"))
      )
      (branch "Case 2"
         (rule "andRight" (formula "21"))
         (branch "Case 1"
            (rule "andRight" (formula "21"))
            (branch "Case 1"
               (rule "allRight" (formula "21") (inst "sk=j_1_0"))
               (rule "allRight" (formula "21") (inst "sk=i_0"))
               (rule "orRight" (formula "21"))
               (rule "orRight" (formula "21"))
               (rule "notRight" (formula "23"))
               (rule "orRight" (formula "22"))
               (rule "inEqSimp_geqRight" (formula "24"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "23"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "24"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "allLeft" (formula "13") (inst "t=j_1_0"))
               (rule "eqSymm" (formula "13") (term "0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0"))
               (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0,0"))
               (rule "applyEq" (formula "13") (term "1,0,1,0") (ifseqformula "4"))
               (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,0,0"))
               (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0"))
               (rule "leq_literals" (formula "13") (term "0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1") (ifseqformula "5"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0") (ifseqformula "6"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "allLeft" (formula "15") (inst "t=i_0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "4"))
               (rule "qeq_literals" (formula "15") (term "0,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "3"))
               (rule "andLeft" (formula "15"))
               (rule "inEqSimp_homoInEq1" (formula "15"))
               (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
               (rule "add_literals" (formula "15") (term "1,1,0"))
               (rule "times_zero_1" (formula "15") (term "1,0"))
               (rule "add_literals" (formula "15") (term "0"))
               (rule "leq_literals" (formula "15"))
               (rule "closeFalse" (formula "15"))
            )
            (branch "Case 2"
               (rule "allRight" (formula "21") (inst "sk=x_1_0"))
               (rule "eqSymm" (formula "21") (term "1,0,1"))
               (rule "equiv_right" (formula "21"))
               (branch "Case 1"
                  (rule "nnf_ex2all" (formula "22"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "3"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "1") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "allLeft" (formula "15") (inst "t=x_1_0"))
                  (rule "exLeft" (formula "15") (inst "sk=j_0_0"))
                  (rule "andLeft" (formula "15"))
                  (rule "andLeft" (formula "15"))
                  (rule "eqSymm" (formula "17") (term "1"))
                  (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_homoInEq0" (formula "16"))
                  (rule "polySimp_addComm1" (formula "16") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1"))
                  (rule "polySimp_rightDist" (formula "16") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
                  (rule "mul_literals" (formula "16") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1"))
                  (rule "allLeft" (formula "3") (inst "t=j_0_0"))
                  (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "16"))
                  (rule "qeq_literals" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "3"))
                  (rule "andLeft" (formula "17"))
                  (rule "inEqSimp_homoInEq1" (formula "17"))
                  (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                  (rule "add_literals" (formula "17") (term "1,1,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0"))
                  (rule "add_literals" (formula "17") (term "0"))
                  (rule "leq_literals" (formula "17"))
                  (rule "closeFalse" (formula "17"))
               )
               (branch "Case 2"
                  (rule "exLeft" (formula "1") (inst "sk=j_0_0"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,1") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "allLeft" (formula "15") (inst "t=j_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                  (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "15") (term "0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "15"))
                  (rule "andLeft" (formula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "leq_literals" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "21") (inst "sk=j_0"))
            (rule "orRight" (formula "21"))
            (rule "orRight" (formula "21"))
            (rule "inEqSimp_geqRight" (formula "22"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "22"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "allLeft" (formula "14") (inst "t=j_0"))
            (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "14") (term "0,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "14"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_zero_right" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
      )
   )
   (branch "CUT: result_0 <= -1 FALSE"
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "inEqSimp_leqRight" (formula "18"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "replace_known_left" (formula "24") (term "0,1,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "1"))
      (rule "leq_literals" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "ex_pull_out3" (formula "18") (term "0"))
      (rule "cnf_rightDist" (formula "18") (term "0,0"))
      (rule "commute_or" (formula "18") (term "1,0,0"))
      (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
      (rule "commute_or" (formula "18") (term "1,0,0,0"))
      (rule "associativeLawUnion" (formula "22") (term "1,1,1"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "andRight" (formula "22"))
      (branch "Case 1"
         (rule "nnf_ex2all" (formula "22"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "3"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "1") (ifseqformula "4"))
         (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "allLeft" (formula "3") (inst "t=result_0"))
         (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "20"))
         (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
         (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "3") (term "0,0,1"))
         (rule "leq_literals" (formula "3") (term "0,1"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "3"))
         (rule "qeq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "closeFalse" (formula "5"))
      )
      (branch "Case 2"
         (rule "andRight" (formula "22"))
         (branch "Case 1"
            (rule "andRight" (formula "22"))
            (branch "Case 1"
               (rule "allRight" (formula "22") (inst "sk=j_1_0"))
               (rule "allRight" (formula "22") (inst "sk=i_0"))
               (rule "orRight" (formula "22"))
               (rule "orRight" (formula "22"))
               (rule "notRight" (formula "24"))
               (rule "orRight" (formula "23"))
               (rule "inEqSimp_geqRight" (formula "25"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "24"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "25"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "3"))
               (rule "polySimp_mulLiterals" (formula "3") (term "0"))
               (rule "polySimp_elimOne" (formula "3") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "allLeft" (formula "14") (inst "t=j_1_0"))
               (rule "eqSymm" (formula "14") (term "0,1,0"))
               (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "1,0,0"))
               (rule "applyEq" (formula "14") (term "1,0,1,0") (ifseqformula "4"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0,0,0") (ifseqformula "3"))
               (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1,0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "14") (term "1,1,0,0,1,0,0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
               (rule "leq_literals" (formula "14") (term "0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0") (ifseqformula "6"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0,1") (ifseqformula "7"))
               (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "allLeft" (formula "20") (inst "t=result_0"))
               (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
               (rule "applyEq" (formula "20") (term "1,0,0,0") (ifseqformula "25"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "24"))
               (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
               (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "20") (term "0,0,1"))
               (rule "leq_literals" (formula "20") (term "0,1"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "6"))
               (rule "qeq_literals" (formula "20") (term "0,1"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "allLeft" (formula "16") (inst "t=i_0"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
               (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "16") (term "0,0,1"))
               (rule "leq_literals" (formula "16") (term "0,1"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "16"))
               (rule "qeq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "closeFalse" (formula "3"))
            )
            (branch "Case 2"
               (rule "allRight" (formula "22") (inst "sk=x_1_0"))
               (rule "eqSymm" (formula "22") (term "1,0,1"))
               (rule "equiv_right" (formula "22"))
               (branch "Case 1"
                  (rule "nnf_ex2all" (formula "23"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "0,1") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "allLeft" (formula "15") (inst "t=result_0"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                  (rule "applyEq" (formula "15") (term "1,0,0") (ifseqformula "22"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "21"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1"))
                  (rule "leq_literals" (formula "15") (term "0,1"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "15") (term "0,1"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "allLeft" (formula "17") (inst "t=x_1_0"))
                  (rule "exLeft" (formula "17") (inst "sk=j_0_0"))
                  (rule "andLeft" (formula "17"))
                  (rule "andLeft" (formula "17"))
                  (rule "eqSymm" (formula "19") (term "1"))
                  (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_homoInEq0" (formula "18"))
                  (rule "polySimp_addComm1" (formula "18") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1"))
                  (rule "polySimp_rightDist" (formula "18") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                  (rule "mul_literals" (formula "18") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                  (rule "allLeft" (formula "21") (inst "t=result_0"))
                  (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                  (rule "applyEq" (formula "21") (term "1,0,0,0") (ifseqformula "26"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "25"))
                  (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                  (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "21") (term "0,0,1"))
                  (rule "leq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "21") (term "0,1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "allLeft" (formula "1") (inst "t=result_0"))
                  (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
                  (rule "applyEq" (formula "1") (term "0,0,1") (ifseqformula "27"))
                  (rule "eqSymm" (formula "1") (term "0,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0,0") (ifseqformula "4"))
                  (rule "qeq_literals" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "26"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0"))
                  (rule "leq_literals" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "allLeft" (formula "1") (inst "t=j_0_0"))
                  (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "19"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                  (rule "exLeft" (formula "1") (inst "sk=j_0_0"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq0" (formula "2"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1"))
                  (rule "polySimp_rightDist" (formula "2") (term "1"))
                  (rule "mul_literals" (formula "2") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "1") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "allLeft" (formula "16") (inst "t=result_0"))
                  (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                  (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "23"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "16") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "22"))
                  (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                  (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "16") (term "0,0,1"))
                  (rule "leq_literals" (formula "16") (term "0,1"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "allLeft" (formula "19") (inst "t=result_0"))
                  (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                  (rule "applyEq" (formula "19") (term "1,0,0,0") (ifseqformula "24"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "6"))
                  (rule "qeq_literals" (formula "19") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "23"))
                  (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                  (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "19") (term "0,0,1"))
                  (rule "leq_literals" (formula "19") (term "0,1"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "allLeft" (formula "20") (inst "t=j_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                  (rule "applyEq" (formula "20") (term "1,0,0,0") (ifseqformula "5"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "4"))
                  (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                  (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "20") (term "0,0,1"))
                  (rule "leq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "inEqSimp_contradInEq1" (formula "20") (term "1") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "20") (term "0,1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "allLeft" (formula "17") (inst "t=j_0_0"))
                  (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                  (rule "applyEq" (formula "17") (term "1,0,0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "17") (term "0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "4"))
                  (rule "andLeft" (formula "17"))
                  (rule "inEqSimp_homoInEq1" (formula "17"))
                  (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                  (rule "add_literals" (formula "17") (term "1,1,0"))
                  (rule "times_zero_1" (formula "17") (term "1,0"))
                  (rule "add_zero_right" (formula "17") (term "0"))
                  (rule "leq_literals" (formula "17"))
                  (rule "closeFalse" (formula "17"))
               )
            )
         )
         (branch "Case 2"
            (rule "allRight" (formula "22") (inst "sk=j_0"))
            (rule "orRight" (formula "22"))
            (rule "orRight" (formula "22"))
            (rule "inEqSimp_geqRight" (formula "23"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "23"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "allLeft" (formula "15") (inst "t=j_0"))
            (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "15") (term "0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "2"))
            (rule "andLeft" (formula "15"))
            (rule "inEqSimp_homoInEq1" (formula "15"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
            (rule "add_literals" (formula "15") (term "1,1,0"))
            (rule "times_zero_1" (formula "15") (term "1,0"))
            (rule "add_zero_right" (formula "15") (term "0"))
            (rule "leq_literals" (formula "15"))
            (rule "closeFalse" (formula "15"))
         )
      )
   )
)
(branch "Exceptional Post (posOfId)"
    (builtin "One Step Simplification" (formula "14"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "14"))
   (rule "close" (formula "17") (ifseqformula "16"))
)
(branch "Pre (posOfId)"
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
   (rule "Class_invariant_axiom_for_KIMapImpl" (formula "18") (inst "j=j") (inst "x=x") (inst "j_0=j_0") (inst "j_1=j_1") (inst "i=i") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "15")) (ifInst ""  (formula "14")))
   (rule "eqSymm" (formula "18") (term "0,1,0,0,1,0,0,0"))
   (rule "eqSymm" (formula "18") (term "0,1,0,0,0,0,0"))
   (rule "eqSymm" (formula "18") (term "1,0,1,0,1,0,0"))
   (rule "eqSymm" (formula "18") (term "1,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "18") (term "0,1,0,0,0,0,0") (ifseqformula "16"))
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "6")))
   (rule "inEqSimp_gtToGeq" (formula "18") (term "0,0,0,0,0"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,0,1,0,0,0"))
   (rule "polySimp_addComm1" (formula "18") (term "0,1,0,0,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,1,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,1,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,0,0,0,0"))
   (rule "replace_known_left" (formula "18") (term "1,1,0,0,0,0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "1,0,0,0,0"))
   (rule "replace_known_left" (formula "18") (term "1,0,0,0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,1,0,1,0,0"))
   (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "13"))
   (rule "eqSymm" (formula "18") (term "1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0,1,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,1,0"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "1,0,0,0,0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "0,1,0,0,0,0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "0,1,0,0,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0,0"))
   (rule "mul_literals" (formula "18") (term "1,0,0,0,0"))
   (rule "replace_known_left" (formula "18") (term "0,0,0,0") (ifseqformula "5"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0,0,0,0"))
   (rule "commuteUnion" (formula "18") (term "1,0,1"))
   (rule "eqSymm" (formula "18") (term "1"))
   (rule "nnf_imp2or" (formula "18") (term "0,1,0"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,1,0"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "18") (term "1,0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1,0"))
   (rule "nnf_imp2or" (formula "18") (term "0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "18") (term "0,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0,0,0,0,0"))
   (rule "times_zero_1" (formula "18") (term "1,0,0,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "18") (term "0,0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0,0,0,0,0"))
   (rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0,0,0"))
   (rule "associativeLawUnion" (formula "18") (term "1,1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "andRight" (formula "18"))
   (branch "Case 1"
      (rule "andRight" (formula "18"))
      (branch "Case 1"
         (rule "allRight" (formula "18") (inst "sk=j_1_0"))
         (rule "allRight" (formula "18") (inst "sk=i_0"))
         (rule "orRight" (formula "18"))
         (rule "orRight" (formula "18"))
         (rule "notRight" (formula "20"))
         (rule "orRight" (formula "19"))
         (rule "inEqSimp_geqRight" (formula "21"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "20"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "21"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "ex_pull_out3" (formula "15") (term "0"))
         (rule "cnf_rightDist" (formula "15") (term "0,0"))
         (rule "commute_or" (formula "15") (term "1,0,0"))
         (rule "all_pull_out3" (formula "14") (term "0"))
         (rule "shift_paren_or" (formula "14") (term "0,0"))
         (rule "shift_paren_or" (formula "14") (term "0,0,0"))
         (rule "swapQuantifiersAll" (formula "14"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "arrayLengthIsAnInt" (formula "10") (term "1"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "arrayLengthNotNegative" (formula "10") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "9"))
         (rule "leq_literals" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "arrayLengthIsAnInt" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "arrayLengthNotNegative" (formula "10") (term "0"))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
         (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "9"))
         (rule "leq_literals" (formula "10") (term "0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
         (rule "commute_or" (formula "15") (term "1,0,0,0"))
         (rule "allLeft" (formula "13") (inst "t=j_1_0"))
         (rule "eqSymm" (formula "13") (term "0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "13") (term "1,0,0"))
         (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,0,0"))
         (rule "applyEq" (formula "13") (term "1,0,1,0") (ifseqformula "4"))
         (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0,0,0") (ifseqformula "3"))
         (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "13") (term "1,1,0,0,1,0,0,0"))
         (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
         (rule "leq_literals" (formula "13") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "allLeft" (formula "13") (inst "t=i_0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "13") (term "0,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "13"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_literals" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Case 2"
         (rule "allRight" (formula "18") (inst "sk=x_0"))
         (rule "eqSymm" (formula "18") (term "1,0,1"))
         (rule "equiv_right" (formula "18"))
         (branch "Case 1"
            (rule "nnf_ex2all" (formula "19"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "ex_pull_out3" (formula "13") (term "0"))
            (rule "cnf_rightDist" (formula "13") (term "0,0"))
            (rule "commute_or" (formula "13") (term "1,0,0"))
            (rule "all_pull_out3" (formula "12") (term "0"))
            (rule "shift_paren_or" (formula "12") (term "0,0"))
            (rule "shift_paren_or" (formula "12") (term "0,0,0"))
            (rule "swapQuantifiersAll" (formula "12"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
            (rule "commute_or" (formula "13") (term "1,0,0,0"))
            (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "arrayLengthIsAnInt" (formula "8") (term "1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "arrayLengthNotNegative" (formula "8") (term "0"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
            (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
            (rule "leq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "arrayLengthNotNegative" (formula "8") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
            (rule "leq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "allLeft" (formula "13") (inst "t=x_0"))
            (rule "exLeft" (formula "13") (inst "sk=j_0_0"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "13"))
            (rule "eqSymm" (formula "15") (term "1"))
            (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_homoInEq0" (formula "14"))
            (rule "polySimp_addComm1" (formula "14") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14"))
            (rule "polySimp_mulComm0" (formula "14") (term "1"))
            (rule "polySimp_rightDist" (formula "14") (term "1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
            (rule "mul_literals" (formula "14") (term "0,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1"))
            (rule "allLeft" (formula "1") (inst "t=j_0_0"))
            (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "14"))
            (rule "qeq_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "1"))
            (rule "andLeft" (formula "15"))
            (rule "inEqSimp_homoInEq1" (formula "15"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
            (rule "add_literals" (formula "15") (term "1,1,0"))
            (rule "times_zero_1" (formula "15") (term "1,0"))
            (rule "add_literals" (formula "15") (term "0"))
            (rule "leq_literals" (formula "15"))
            (rule "closeFalse" (formula "15"))
         )
         (branch "Case 2"
            (rule "exLeft" (formula "1") (inst "sk=j_0_0"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_addComm1" (formula "2") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "polySimp_mulComm0" (formula "2") (term "1"))
            (rule "polySimp_rightDist" (formula "2") (term "1"))
            (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
            (rule "mul_literals" (formula "2") (term "0,1"))
            (rule "polySimp_elimOne" (formula "2") (term "1,1"))
            (rule "ex_pull_out3" (formula "14") (term "0"))
            (rule "cnf_rightDist" (formula "14") (term "0,0"))
            (rule "commute_or" (formula "14") (term "1,0,0"))
            (rule "all_pull_out3" (formula "13") (term "0"))
            (rule "shift_paren_or" (formula "13") (term "0,0"))
            (rule "shift_paren_or" (formula "13") (term "0,0,0"))
            (rule "swapQuantifiersAll" (formula "13"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
            (rule "commute_or" (formula "14") (term "1,0,0,0"))
            (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "arrayLengthNotNegative" (formula "9") (term "0"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
            (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "8"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "arrayLengthIsAnInt" (formula "9") (term "1"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "arrayLengthNotNegative" (formula "9") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "8"))
            (rule "leq_literals" (formula "9") (term "0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "allLeft" (formula "15") (inst "t=j_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "applyEq" (formula "15") (term "1,0,0,0") (ifseqformula "3"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "15") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "15") (term "0,0,1"))
            (rule "leq_literals" (formula "15") (term "0,1"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "allLeft" (formula "13") (inst "t=j_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
            (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
            (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "13") (term "0,0,1"))
            (rule "leq_literals" (formula "13") (term "0,1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_contradInEq1" (formula "13") (ifseqformula "1"))
            (rule "qeq_literals" (formula "13") (term "0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "closeFalse" (formula "13"))
         )
      )
   )
   (branch "Case 2"
      (rule "allRight" (formula "18") (inst "sk=j_0"))
      (rule "orRight" (formula "18"))
      (rule "orRight" (formula "18"))
      (rule "inEqSimp_geqRight" (formula "19"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "19"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "ex_pull_out3" (formula "13") (term "0"))
      (rule "cnf_rightDist" (formula "13") (term "0,0"))
      (rule "commute_or" (formula "13") (term "1,0,0"))
      (rule "all_pull_out3" (formula "12") (term "0"))
      (rule "shift_paren_or" (formula "12") (term "0,0"))
      (rule "shift_paren_or" (formula "12") (term "0,0,0"))
      (rule "swapQuantifiersAll" (formula "12"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
      (rule "commute_or" (formula "13") (term "1,0,0,0"))
      (rule "arrayLengthIsAnInt" (formula "8") (term "1"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "arrayLengthNotNegative" (formula "8") (term "0"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
      (rule "leq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "arrayLengthNotNegative" (formula "8") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "7"))
      (rule "leq_literals" (formula "8") (term "0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "allLeft" (formula "14") (inst "t=j_0"))
      (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
      (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
      (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "14") (term "0,0,1"))
      (rule "leq_literals" (formula "14") (term "0,1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "14"))
      (rule "qeq_literals" (formula "1") (term "0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)
}
