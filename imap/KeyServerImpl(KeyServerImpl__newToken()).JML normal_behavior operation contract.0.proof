\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Jan 31 12:52:53 CET 2020
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Fri Jan 31 12:52:53 CET 2020
contract=KeyServerImpl[KeyServerImpl\\:\\:newToken()].JML normal_behavior operation contract.0
name=KeyServerImpl[KeyServerImpl\\:\\:newToken()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "mattias" ) (keyVersion "49ea85945cd6c693d72d27b4476aa0916bad8383"))

(autoModeTime "625")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self,result,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "0,0,1,0,1"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "Class_invariant_axiom_for_KeyServerImpl" (formula "5") (ifseqformula "3"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "eqSymm" (formula "14"))
(rule "eqSymm" (formula "13"))
(rule "eqSymm" (formula "12"))
(rule "disjointDefinition" (formula "10"))
(rule "disjointDefinition" (formula "8"))
(rule "disjointDefinition" (formula "9"))
(rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_newToken,savedHeapBefore_newToken"))
 (builtin "One Step Simplification" (formula "19"))
(rule "variableDeclarationAssign" (formula "19") (term "1"))
(rule "variableDeclaration" (formula "19") (term "1") (newnames "token"))
 (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_nextInt,result_0,exc_0") (contract "Random[Random::nextInt()].JML normal_behavior operation contract.0"))
(branch "Post (nextInt)"
    (builtin "One Step Simplification" (formula "15"))
   (rule "assignment" (formula "20") (term "1"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "variableDeclarationGhostAssign" (formula "20") (term "1"))
   (rule "variableDeclarationGhost" (formula "20") (term "1") (newnames "decrDomain"))
   (rule "assignment_read_attribute_this" (formula "20"))
    (builtin "One Step Simplification" (formula "20"))
    (builtin "Loop Invariant" (formula "20") (newnames "variant,b,heapBefore_LOOP,tokenBefore_LOOP,decrDomainBefore_LOOP,token_0,decrDomain_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Invariant Initially Valid"
      (rule "andRight" (formula "20"))
      (branch
         (rule "andRight" (formula "20"))
         (branch
             (builtin "One Step Simplification" (formula "20"))
            (rule "closeTrue" (formula "20"))
         )
         (branch
             (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "11")))
            (rule "closeTrue" (formula "20"))
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")))
         (rule "closeTrue" (formula "20"))
      )
   )
   (branch "Body Preserves Invariant"
       (builtin "One Step Simplification" (formula "22"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "impRight" (formula "22"))
      (rule "andLeft" (formula "18"))
      (rule "eqSymm" (formula "24") (term "0,0,1,0,1,1,0,1"))
      (rule "variableDeclarationAssign" (formula "1") (term "1"))
      (rule "variableDeclarationAssign" (formula "24") (term "1"))
      (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_1"))
      (rule "variableDeclaration" (formula "24") (term "1") (newnames "exc_1"))
      (rule "assignment" (formula "24") (term "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "variableDeclaration" (formula "24") (term "1") (newnames "thrownExc"))
      (rule "blockThrow" (formula "24") (term "1,0,0,1"))
      (rule "boxToDiamond" (formula "1") (term "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "ifUnfold" (formula "24") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "24") (term "1") (newnames "x"))
      (rule "methodCallWithAssignmentUnfoldTarget" (formula "19") (term "1") (inst "#v0=k"))
      (rule "variableDeclaration" (formula "19") (term "1") (newnames "k"))
      (rule "assignment_read_attribute_this" (formula "19"))
       (builtin "One Step Simplification" (formula "19"))
       (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_contains,result_1,exc_2") (contract "KIMap[KIMap::contains(int)].JML normal_behavior operation contract.0"))
      (branch "Post (contains)"
          (builtin "One Step Simplification" (formula "20"))
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "6")))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "eqSymm" (formula "20"))
         (rule "assignment" (formula "21"))
         (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "13"))
         (rule "methodCallEmpty" (formula "21") (term "1"))
         (rule "emptyModality" (formula "21") (term "1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "notRight" (formula "21"))
         (rule "applyEq" (formula "21") (term "1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "methodCallWithAssignmentUnfoldTarget" (formula "26") (term "1") (inst "#v0=k"))
         (rule "variableDeclaration" (formula "26") (term "1") (newnames "k_1"))
         (rule "assignment_read_attribute_this" (formula "26"))
          (builtin "One Step Simplification" (formula "26"))
          (builtin "Use Operation Contract" (formula "26") (newnames "heapBefore_contains_0,result_2,exc_3") (contract "KIMap[KIMap::contains(int)].JML normal_behavior operation contract.0"))
         (branch "Post (contains)"
             (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "7")))
             (builtin "One Step Simplification" (formula "27"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "23"))
            (rule "eqSymm" (formula "23"))
            (rule "assignment" (formula "28") (term "1"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "14"))
            (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "eqSymm" (formula "23"))
            (rule "applyEq" (formula "28") (term "0,1,0") (ifseqformula "23"))
            (rule "ifSplit" (formula "28"))
            (branch "if x true"
                (builtin "One Step Simplification" (formula "29"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "28") (term "1"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "postincrement" (formula "28") (term "1"))
               (rule "compound_int_cast_expression" (formula "28") (term "1") (inst "#v=x"))
               (rule "variableDeclarationAssign" (formula "28") (term "1"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_1"))
               (rule "remove_parentheses_right" (formula "28") (term "1"))
               (rule "assignmentAdditionInt" (formula "28") (term "1"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "translateJavaAddInt" (formula "28") (term "0,1,0"))
               (rule "polySimp_addComm0" (formula "28") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "28") (term "1"))
               (rule "assignment" (formula "28") (term "1"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "blockEmpty" (formula "28") (term "1"))
               (rule "tryEmpty" (formula "28") (term "1"))
               (rule "methodCallEmpty" (formula "28") (term "1"))
               (rule "emptyModality" (formula "28") (term "1"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "andRight" (formula "28"))
               (branch
                  (rule "andRight" (formula "28"))
                  (branch
                     (rule "allRight" (formula "28") (inst "sk=t_0"))
                     (rule "impRight" (formula "28"))
                     (rule "impRight" (formula "29"))
                     (rule "inEqSimp_homoInEq1" (formula "2"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "inDomainOfMapRemove" (formula "30"))
                     (rule "eqSymm" (formula "30") (term "0,1"))
                     (rule "inEqSimp_contradEq3" (formula "30") (term "0,1") (ifseqformula "2"))
                     (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0,1"))
                     (rule "add_literals" (formula "30") (term "1,1,0,0,0,1"))
                     (rule "times_zero_1" (formula "30") (term "1,0,0,0,1"))
                     (rule "add_zero_right" (formula "30") (term "0,0,0,1"))
                     (rule "qeq_literals" (formula "30") (term "0,0,1"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "nnf_imp2or" (formula "20") (term "0"))
                     (rule "inEqSimp_notGeq" (formula "20") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0,0"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0"))
                     (rule "nnf_imp2or" (formula "20") (term "1,0"))
                     (rule "commute_or" (formula "20") (term "0"))
                     (rule "commute_or" (formula "20") (term "0,0"))
                     (rule "allLeft" (formula "20") (inst "t=t_0"))
                     (rule "replace_known_right" (formula "20") (term "0,0") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")))
                     (rule "inEqSimp_homoInEq0" (formula "20"))
                     (rule "polySimp_addComm1" (formula "20") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1"))
                     (rule "polySimp_rightDist" (formula "20") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                     (rule "mul_literals" (formula "20") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                     (rule "inEqSimp_contradInEq0" (formula "20") (ifseqformula "2"))
                     (rule "andLeft" (formula "20"))
                     (rule "inEqSimp_homoInEq1" (formula "20"))
                     (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "20") (term "1,0"))
                     (rule "mul_literals" (formula "20") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "20") (term "0"))
                     (rule "polySimp_addComm1" (formula "20") (term "0,0"))
                     (rule "add_literals" (formula "20") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                     (rule "add_literals" (formula "20") (term "1,1,0"))
                     (rule "times_zero_1" (formula "20") (term "1,0"))
                     (rule "add_zero_right" (formula "20") (term "0"))
                     (rule "leq_literals" (formula "20"))
                     (rule "closeFalse" (formula "20"))
                  )
                  (branch
                     (rule "isFiniteOfMapRemove" (formula "28"))
                     (rule "close" (formula "28") (ifseqformula "19"))
                  )
               )
               (branch
                  (rule "precOfInt" (formula "28"))
                  (rule "inEqSimp_ltToLeq" (formula "28") (term "1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "28") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "28") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1"))
                  (rule "mul_literals" (formula "28") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "28") (term "1,1,1"))
                  (rule "nnf_imp2or" (formula "18") (term "0"))
                  (rule "inEqSimp_notGeq" (formula "18") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0"))
                  (rule "nnf_imp2or" (formula "18") (term "1,0"))
                  (rule "commute_or" (formula "18") (term "0"))
                  (rule "commute_or" (formula "18") (term "0,0"))
                  (rule "allLeft" (formula "18") (inst "t=token_0"))
                  (rule "replace_known_left" (formula "18") (term "0,1,0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "inEqSimp_homoInEq0" (formula "18") (term "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,1"))
                  (rule "add_literals" (formula "18") (term "1,1,0,1"))
                  (rule "times_zero_1" (formula "18") (term "1,0,1"))
                  (rule "add_zero_right" (formula "18") (term "0,1"))
                  (rule "qeq_literals" (formula "18") (term "1"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "mapSizeNotNegativeForFiniteMaps" (formula "29") (term "0,0"))
                  (rule "isFiniteOfMapRemove" (formula "1") (term "0"))
                  (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "inEqSimp_leqRight" (formula "30"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "4"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0,0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "1,1,0") (ifseqformula "5"))
                  (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "sizeOfMapRemove" (formula "3") (term "0"))
                  (rule "eqSymm" (formula "3") (term "1"))
                  (rule "replace_known_left" (formula "3") (term "0,0,1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "26")))
                  (rule "eqSymm" (formula "3"))
                  (rule "polySimp_elimSub" (formula "3") (term "1"))
                  (rule "mul_literals" (formula "3") (term "1,1"))
                  (rule "polySimp_addComm0" (formula "3") (term "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm0" (formula "2") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                  (rule "add_literals" (formula "2") (term "1,1,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0"))
                  (rule "add_zero_right" (formula "2") (term "0"))
                  (rule "leq_literals" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
            )
            (branch "if x false"
                (builtin "One Step Simplification" (formula "29"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Exceptional Post (contains)"
             (builtin "One Step Simplification" (formula "27"))
             (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "7")))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "22"))
            (rule "notLeft" (formula "22"))
            (rule "close" (formula "25") (ifseqformula "24"))
         )
         (branch "Pre (contains)"
             (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "2")) (ifInst ""  (formula "7")))
            (rule "closeTrue" (formula "26"))
         )
         (branch "Null reference (k_1 = null)"
             (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "22")))
            (rule "closeTrue" (formula "26"))
         )
      )
      (branch "Exceptional Post (contains)"
          (builtin "One Step Simplification" (formula "20"))
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "6")))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "19"))
         (rule "close" (formula "22") (ifseqformula "21"))
      )
      (branch "Pre (contains)"
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")) (ifInst ""  (formula "6")))
         (rule "closeTrue" (formula "19"))
      )
      (branch "Null reference (k = null)"
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "20")))
         (rule "closeTrue" (formula "19"))
      )
   )
   (branch "Use Case"
       (builtin "One Step Simplification" (formula "22"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "variableDeclarationAssign" (formula "23") (term "1"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "b_1"))
      (rule "methodCallWithAssignmentUnfoldTarget" (formula "23") (term "1") (inst "#v0=k"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "k"))
      (rule "assignment_read_attribute_this" (formula "23"))
       (builtin "One Step Simplification" (formula "23"))
       (builtin "Use Operation Contract" (formula "23") (newnames "heapBefore_contains,result_1,exc_1") (contract "KIMap[KIMap::contains(int)].JML normal_behavior operation contract.0"))
      (branch "Post (contains)"
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "6")))
          (builtin "One Step Simplification" (formula "24"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "eqSymm" (formula "20"))
         (rule "assignment" (formula "25") (term "1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "applyEq" (formula "20") (term "0,0,0") (ifseqformula "13"))
         (rule "methodCallEmpty" (formula "25") (term "1"))
         (rule "emptyModality" (formula "25") (term "1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "impRight" (formula "25"))
         (rule "notLeft" (formula "1"))
         (rule "apply_eq_boolean" (formula "20") (term "1") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "notLeft" (formula "20"))
         (rule "methodCallReturn" (formula "26") (term "1"))
         (rule "assignment" (formula "26") (term "1"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "methodCallEmpty" (formula "26") (term "1"))
         (rule "tryEmpty" (formula "26") (term "1"))
         (rule "emptyModality" (formula "26") (term "1"))
         (rule "andRight" (formula "26"))
         (branch
            (rule "andRight" (formula "26"))
            (branch
               (rule "andRight" (formula "26"))
               (branch
                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "20")))
                  (rule "closeTrue" (formula "26"))
               )
               (branch
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "nnf_imp2or" (formula "17") (term "0"))
                  (rule "inEqSimp_notGeq" (formula "17") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0"))
                  (rule "nnf_imp2or" (formula "17") (term "1,0"))
                  (rule "Class_invariant_axiom_for_KeyServerImpl" (formula "26") (ifseqformula "3"))
                  (rule "eqSymm" (formula "26") (term "1,0,0"))
                  (rule "eqSymm" (formula "26") (term "1,0"))
                  (rule "eqSymm" (formula "26") (term "1"))
                  (rule "replace_known_left" (formula "26") (term "1,0,0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "24")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "12")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                  (rule "disjointDefinition" (formula "26") (term "0,0"))
                  (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "disjointDefinition" (formula "26") (term "1"))
                  (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "disjointDefinition" (formula "26"))
                  (rule "close" (formula "26") (ifseqformula "9"))
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "26"))
               (rule "closeTrue" (formula "26"))
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "26"))
            (rule "closeTrue" (formula "26"))
         )
      )
      (branch "Exceptional Post (contains)"
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "6")))
          (builtin "One Step Simplification" (formula "24"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "19"))
         (rule "notLeft" (formula "19"))
         (rule "close" (formula "22") (ifseqformula "21"))
      )
      (branch "Pre (contains)"
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")) (ifInst ""  (formula "6")))
         (rule "closeTrue" (formula "23"))
      )
      (branch "Null reference (k = null)"
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "19")))
         (rule "closeTrue" (formula "23"))
      )
   )
)
(branch "Exceptional Post (nextInt)"
    (builtin "One Step Simplification" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "15"))
   (rule "close" (formula "17") (ifseqformula "16"))
)
(branch "Pre (nextInt)"
    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "19"))
)
)
}
